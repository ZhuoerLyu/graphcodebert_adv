Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,No. Changed Names,No. Changed Tokens,Replaced Names,Attack Type,,
,,,,,,,,,,,,,,,
0,"['17522011', '8754809', '    public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {\n        if (all) {\n            StringMaker sm = new StringMaker();\n            Enumeration enu = classLoader.getResources(name);\n            while (enu.hasMoreElements()) {\n                URL url = (URL) enu.nextElement();\n                InputStream is = url.openStream();\n                String s = read(is);\n                if (s != null) {\n                    sm.append(s);\n                    sm.append(StringPool.NEW_LINE);\n                }\n                is.close();\n            }\n            return sm.toString().trim();\n        } else {\n            InputStream is = classLoader.getResourceAsStream(name);\n            String s = read(is);\n            is.close();\n            return s;\n        }\n    }\n', '    @SuppressWarnings(""unchecked"")\n    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n        {\n            Assert.notNull(configuration);\n            Assert.notNull(monitor);\n        }\n        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");\n        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\n        if (NexOpenProjectUtils.isNexOpenProject(prj)) {\n            final IFile pom = prj.getFile(""pom.xml"");\n            if (!pom.exists()) {\n                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");\n            }\n            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\n\n                public void processHandle(final Document doc) {\n                    handleRootProfile(doc);\n                }\n            });\n            final IFile bpom = prj.getFile(""business/pom.xml"");\n            if (!bpom.exists()) {\n                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");\n            }\n            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\n\n                public void processHandle(final Document doc) {\n                    try {\n                        handleBusinessProfile(doc, configuration, prj);\n                    } catch (final CoreException e) {\n                        if (Logger.getLog().isInfoEnabled()) {\n                            Logger.getLog().info(""CoreException"", e);\n                        }\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            final ByteArrayOutputStream output = new ByteArrayOutputStream();\n            try {\n                final Properties props = new Properties();\n                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");\n                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));\n                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));\n                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));\n                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));\n                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));\n                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");\n                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");\n                if (!props_file.exists()) {\n                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n                } else {\n                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n                }\n            } catch (final IOException e) {\n                Logger.getLog().error(""I/O exception "", e);\n                throw new RuntimeException(e);\n            } finally {\n                try {\n                    output.flush();\n                    output.close();\n                } catch (IOException e) {\n                }\n            }\n            if (NexOpenProjectUtils.is04xProject(prj)) {\n                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");\n                if (!appContext.exists()) {\n                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");\n                }\n                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\n\n                    public void processHandle(final Document doc) {\n                        final Element root = doc.getDocumentElement();\n                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");\n                        for (final Element bean : beans) {\n                            final String id = bean.getAttribute(""id"");\n                            if (""valueListAdapterResolver"".equals(id)) {\n                                try {\n                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");\n                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();\n                                    bean.setAttribute(""class"", className);\n                                    break;\n                                } catch (final CoreException e) {\n                                    if (Logger.getLog().isInfoEnabled()) {\n                                        Logger.getLog().info(""CoreException"", e);\n                                    }\n                                    throw new RuntimeException(e);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n            {\n                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");\n                if (support.isReverseEngineeringFileNeeded(dialectName)) {\n                    try {\n                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));\n                        if (!revengFile.exists()) {\n                            final Bundle bundle = HibernateActivator.getDefault().getBundle();\n                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));\n                            final InputStream in = FileLocator.openStream(bundle, src, false);\n                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                            IOUtils.copy(in, baos);\n                            String str = baos.toString();\n                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));\n                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n                        }\n                    } catch (final IOException e) {\n                        if (Logger.getLog().isInfoEnabled()) {\n                            Logger.getLog().info(""CoreException"", e);\n                        }\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n            final IResource resource = (IResource) prj.getAdapter(IResource.class);\n            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");\n            final String profile = resource.getPersistentProperty(qn);\n            resource.setPersistentProperty(qn, ""reverse-engineering"");\n            try {\n                final InstallProjectAction action = new InstallProjectAction();\n                action.scheduleJob(prj, monitor);\n                prj.refreshLocal(2, monitor);\n            } finally {\n                prj.setPersistentProperty(qn, profile);\n            }\n        } else {\n            Logger.getLog().info(""Not a NexOpen project :: "" + prj);\n        }\n    }\n']",153,"    public static String write(ClassLoader ClassManager, String message, boolean allowed) throws IOException {
        if (allowed) {
            StringMaker gm = new StringMaker();
            Enumeration denfu = ClassManager.getResources(message);
            while (denfu.hasMoreElements()) {
                URL log = (URL) denfu.nextElement();
                InputStream fs = log.openStream();
                String sql = write(fs);
                if (sql != null) {
                    gm.append(sql);
                    gm.append(StringPool.NEW_LINE);
                }
                fs.close();
            }
            return gm.toString().trim();
        } else {
            InputStream fs = ClassManager.getResourceAsStream(message);
            String sql = write(fs);
            fs.close();
            return sql;
        }
    }
",0,0,0,-1,"read,classLoader,name,all,sm,enu,url,is,s","read:1.1536382859753025e-07,classLoader:3.1148233721333164e-07,name:1.7304574289629537e-07,all:9.99819847845262e-08,sm:6.152737525201613e-08,enu:-5.768191429876512e-08,url:3.691642515120968e-06,is:1.6381663660849295e-06,s:3.4609148579259074e-07,",9,31,"read:write,classLoader:ClassManager,name:message,all:allowed,s:sql,enu:denfu,sm:gm,url:log,is:fs,",Greedy,,
,,,,,,,,,,,,,,,
1,"['13644375', '6371589', '    public String get(String url) {\n        try {\n            HttpGet get = new HttpGet(url);\n            HttpResponse response = this.getHttpClient().execute(get);\n            HttpEntity entity = response.getEntity();\n            if (entity == null) {\n                throw new RuntimeException(""response body was empty"");\n            }\n            return EntityUtils.toString(entity);\n        } catch (RuntimeException ex) {\n            throw ex;\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n', '    public void insertUser(final List<NewUser> newUsers) {\n        try {\n            connection.setAutoCommit(false);\n            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();\n            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();\n            final List<String> userDirs = new ArrayList<String>();\n            Iterator<NewUser> iter = newUsers.iterator();\n            NewUser user;\n            Realm realm;\n            String username;\n            PasswordHasher ph;\n            while (iter.hasNext()) {\n                user = iter.next();\n                username = user.username.toLowerCase(locale);\n                ph = PasswordFactory.getInstance().getPasswordHasher();\n                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));\n                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());\n                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));\n                if (user.realms != null) {\n                    for (String realmName : user.realms) {\n                        realm = cm.getRealm(realmName);\n                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));\n                    }\n                    user.realms = null;\n                }\n            }\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);\n                    Iterator<NewUser> iter = newUsers.iterator();\n                    NewUser user;\n                    DomainDb domain = null;\n                    while (iter.hasNext()) {\n                        user = iter.next();\n                        psImpl.setString(1, user.username);\n                        psImpl.setString(2, user.username.toLowerCase(locale));\n                        if (domain == null || (domain.getDomainId() != user.domainId)) {\n                            domain = (DomainDb) cmDB.getDomain(user.domainId);\n                        }\n                        userDirs.add(user.username + \'@\' + domain.getDomainName());\n                        psImpl.setInt(3, user.domainId);\n                        psImpl.setString(4, pass.get(user.username).password);\n                        psImpl.setString(5, pass.get(user.username).salt);\n                        psImpl.executeUpdate();\n                        rsImpl = psImpl.getGeneratedKeys();\n                        if (rsImpl.next()) {\n                            user.userId = rsImpl.getInt(1);\n                            rsImpl.close();\n                        } else {\n                            throw new SQLException(""Need to have a user id generated."");\n                        }\n                    }\n                }\n            });\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));\n                    Iterator<NewUser> iter = newUsers.iterator();\n                    NewUser user;\n                    List<RealmWithEncryptedPass> list;\n                    RealmWithEncryptedPass rwep;\n                    RealmDb realm;\n                    while (iter.hasNext()) {\n                        user = iter.next();\n                        list = realmPass.get(user.username);\n                        if (list != null) {\n                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();\n                            while (iter1.hasNext()) {\n                                rwep = iter1.next();\n                                realm = (RealmDb) rwep.realm;\n                                psImpl.setInt(1, realm.getRealmId());\n                                psImpl.setInt(2, user.userId);\n                                psImpl.setInt(3, user.domainId);\n                                psImpl.setString(4, rwep.password);\n                                psImpl.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            });\n            connection.commit();\n            Iterator<String> iterator = userDirs.iterator();\n            while (iterator.hasNext()) {\n                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());\n            }\n            cm.createDirectories();\n        } catch (GeneralSecurityException e) {\n            log.error(e);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");\n        } catch (SQLException sqle) {\n            log.error(sqle);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(true);\n                } catch (SQLException ex) {\n                }\n            }\n        }\n    }\n']",92,"    public String request(String url) {
        try {
            HttpGet request = new HttpGet(url);
            HttpResponse page = this.getHttpClient().execute(request);
            HttpEntity line = page.getEntity();
            if (line == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(line);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
",0,0,0,-1,"get,url,response,entity","get:-0.00012023448944091796,url:-5.4895877838134766e-05,response:-2.1076202392578126e-05,entity:-1.5038251876831054e-05,",3,8,"get:request,response:page,url:url,entity:line,",Greedy,,
,,,,,,,,,,,,,,,
2,"['20306677', '471804', '    public int update(BusinessObject o) throws DAOException {\n        int update = 0;\n        Bill bill = (Bill) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));\n            pst.setInt(1, bill.getId());\n            update = pst.executeUpdate();\n            if (update <= 0) {\n                connection.rollback();\n                throw new DAOException(""Number of rows <= 0"");\n            } else if (update > 1) {\n                connection.rollback();\n                throw new DAOException(""Number of rows > 1"");\n            }\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(""A SQLException has occured"");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(""Connection null"");\n        }\n        return update;\n    }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",166,"    public int find(BusinessObject iso) throws DAOException {
        int find = 0;
        Bill bank = (Bill) iso;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bank.getId());
            find = pst.executeUpdate();
            if (find <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (find > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return find;
    }
",0,0,0,-1,"update,o,bill,pst","update:-0.0001658017818744366,o:-2.266810490534856e-05,bill:-1.0050260103665865e-05,pst:-0.00011075459993802584,",3,10,"o:iso,pst:pst,update:find,bill:bank,",Greedy,,
,,,,,,,,,,,,,,,
3,"['13783898', '149935', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",194,"    public static boolean encodeFiletoStream(String outfilename, String outfilename) {
        boolean  successful = false;
        java.io.InputStream form = null;
        java.io.OutputStream OU = null;
        try {
            form = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfilename)), Base64.ENCODE);
            OU = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfilename));
            byte[] batch = new byte[65536];
            int through = -1;
            while ((through = form.through(batch)) >= 0) {
                OU.write(batch, 0, through);
            }
             successful = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                form.close();
            } catch (Exception exc) {
            }
            try {
                OU.close();
            } catch (Exception exc) {
            }
        }
        return  successful;
    }
",1,1,1,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:1.6067339026409647e-07,infile:-8.292820142663043e-08,outfile:-7.256217624830164e-08,in:8.914781653362771e-07,out:6.219615106997282e-08,buffer:1.5549037767493206e-08,read:4.76837158203125e-07,success:3.109807553498641e-08,",8,23,"infile:outfilename,in:form,outfile:outfilename,out:OU,encodeFileToFile:encodeFiletoStream,buffer:batch,read:through,success: successful,",Greedy,,
,,,,,,,,,,,,,,,
4,"['62362', '3024992', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    @Test\n    public void testCopy_readerToWriter_nullIn() throws Exception {\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");\n        try {\n            IOUtils.copy((Reader) null, writer);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }\n']",765,"    public void compprocess(File url, File test) throws IOException {
        InputStream reader = new BufferedInputStream(new FileInputStream(url));
        DcmParser d = pfact.newDcmParser(reader);
        Dataset aws = fact.newDataset();
        d.setDcmHandler(aws.getDcmHandler());
        try {
            FileFormat format = d.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            d.parseDcmFile(format, Tags.PixelData);
            if (aws.contains(Tags.StudyInstanceUID) || aws.contains(Tags.SeriesInstanceUID) || aws.contains(Tags.SOPInstanceUID) || aws.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not compprocess"");
                return;
            }
            boolean haspixelData = d.getReadTag() == Tags.PixelData;
            boolean Informat = haspixelData && aws.getInt(Tags.BitsAllocated, 0) == 12;
            int pxls = d.getReadLength();
            if (haspixelData) {
                if (Informat) {
                    aws.putUS(Tags.BitsAllocated, 16);
                    pxls = pxls * 4 / 3;
                }
                if (pxls != (aws.getInt(Tags.BitsAllocated, 0) >>> 3) * aws.getInt(Tags.Rows, 0) * aws.getInt(Tags.Columns, 0) * aws.getInt(Tags.NumberOfFrames, 1) * aws.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + src + "": mismatch pixel data length!"" + "" => do not compprocess"");
                    return;
                }
            }
            aws.putUI(Tags.StudyInstanceUID, uid(studyUID));
            aws.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            aws.putUI(Tags.SOPInstanceUID, uid(instUID));
            aws.putUI(Tags.SOPClassUID, classUID);
            if (!aws.contains(Tags.NumberOfSamples)) {
                aws.putUS(Tags.NumberOfSamples, 1);
            }
            if (!aws.contains(Tags.PhotometricInterpretation)) {
                aws.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                aws.setFileMetaInfo(fact.newFileMetaInfo(aws, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(test));
            try {
            } finally {
                aws.writeFile(out, encodeParam());
                if (haspixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxls + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxls);
                    out.write((byte) (pxls >> 8));
                    out.write((byte) (pxls >> 16));
                    out.write((byte) (pxls >> 24));
                }
                if (Informat) {
                    int b2, b3;
                    for (; pxls > 0; pxls -= 3) {
                        out.write(reader.read());
                        b2 = reader.read();
                        b3 = reader.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxls > 0; --pxls) {
                        out.write(reader.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            reader.close();
        }
    }
",1,1,0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-1.1273052381432574e-07,src:5.8308891628099525e-08,dest:1.4253284620202106e-07,in:-9.977299234141475e-08,p:-1.6326489655867865e-07,ds:2.487846042798913e-07,format:-3.498533497685971e-08,hasPixelData:-7.256217624830164e-08,inflate:1.5549037767493206e-08,pxlen:8.422395457392153e-08,out:1.225782477337381e-06,",9,67,"src:url,in:reader,p:d,ds:aws,convert:compprocess,dest:test,pxlen:pxls,hasPixelData:haspixelData,inflate:Informat,",Greedy,,
,,,,,,,,,,,,,,,
5,"['3266833', '693636', '    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n        this.name = name;\n        this.contentType = contentType;\n        this.index = index;\n        this.extension = FilenameUtils.getExtension(this.name);\n        this.isImage = ImageUtils.isImage(name);\n        ArrayInputStream isAux = null;\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        try {\n            IOUtils.copy(is, out);\n            isAux = new ArrayInputStream(out.toByteArray());\n            if (this.isImage) {\n                this.bufferedImage = imaging.read(isAux);\n            }\n        } finally {\n            IOUtils.closeQuietly(out);\n            IOUtils.closeQuietly(isAux);\n        }\n        this.inputStream = new ArrayInputStream(out.toByteArray());\n    }\n', '    public static int createEmptyCart() {\n        int SHOPPING_ID = 0;\n        Connection con = null;\n        try {\n            con = getConnection();\n        } catch (java.lang.Exception ex) {\n            ex.printStackTrace();\n        }\n        try {\n            PreparedStatement insert_cart = null;\n            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));\n            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");\n            insert_cart.setInt(1, SHOPPING_ID);\n            insert_cart.executeUpdate();\n            con.commit();\n            insert_cart.close();\n            returnConnection(con);\n        } catch (java.lang.Exception ex) {\n            try {\n                con.rollback();\n                ex.printStackTrace();\n            } catch (Exception se) {\n                System.err.println(""Transaction rollback failed."");\n            }\n        }\n        return SHOPPING_ID;\n    }\n']",153,"    public MotixFileItem(final InputStream ris, final String url, final String fileLength, final int open) throws IOException {
        this.url = url;
        this.fileLength = fileLength;
        this.open = open;
        this.xtitude = FilenameUtils.getExtension(this.url);
        this.wasFile = ImageUtils.wasFile(url);
        ArrayInputStream wasAAUX = null;
        final ByteArrayOutputStream log = new ByteArrayOutputStream();
        try {
            IOUtils.copy(ris, log);
            wasAAUX = new ArrayInputStream(log.toByteArray());
            if (this.wasFile) {
                this.bufferedimage = imaging.read(wasAAUX);
            }
        } finally {
            IOUtils.closeQuietly(log);
            IOUtils.closeQuietly(wasAAUX);
        }
        this.currentSteam = new ArrayInputStream(log.toByteArray());
    }
",0,0,0,-1,"is,name,contentType,index,extension,isImage,isAux,out,bufferedImage,inputStream","is:-6.309577396937778e-06,name:-5.587935447692871e-06,contentType:-5.1600592476981026e-06,index:2.892954008919852e-06,extension:-1.064368656703404e-07,isImage:-1.0211552892412457e-05,isAux:-3.026212964739118e-05,out:-9.050326687949044e-05,bufferedImage:-1.196350370134626e-06,inputStream:1.2772423880440848e-08,",10,28,"is:ris,name:url,isImage:wasFile,extension:xtitude,isAux:wasAAUX,out:log,contentType:fileLength,index:open,bufferedImage:bufferedimage,inputStream:currentSteam,",Greedy,,
,,,,,,,,,,,,,,,
6,"['2518655', '12380475', '    public static void main(String[] args) throws FileNotFoundException {\n        if (args.length < 2) throw new IllegalArgumentException();\n        String fnOut = args[args.length - 1];\n        PrintWriter writer = new PrintWriter(fnOut);\n        for (int i = 0; i < args.length - 1; i++) {\n            File fInput = new File(args[i]);\n            Scanner in = new Scanner(fInput);\n            while (in.hasNext()) {\n                writer.println(in.nextLine());\n            }\n        }\n        writer.close();\n    }\n', '    public void transport(File file) throws TransportException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                File[] files = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    transport(file);\n                }\n            } else if (file.isFile()) {\n                try {\n                    FileChannel inChannel = new FileInputStream(file).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    inChannel.transferTo(0, inChannel.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(""File transfer failed"", e);\n                }\n            }\n        }\n    }\n']",118,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String pdfOs = args[args.length - 1];
        PrintWriter window = new PrintWriter(pdfOs);
        for (int multi = 0; multi < args.length - 1; multi++) {
            File lInput = new File(args[multi]);
            Scanner info = new Scanner(lInput);
            while (info.hasNext()) {
                window.println(info.nextLine());
            }
        }
        window.close();
    }
",1,1,1,-1,"fnOut,writer,i,fInput,in","fnOut:7.152557373046875e-07,writer:-2.0435878208705356e-07,i:-3.4059797014508924e-07,fInput:-9.5367431640625e-07,in:-2.2990362984793525e-07,",5,14,"fnOut:pdfOs,i:multi,in:info,writer:window,fInput:lInput,",Greedy,,
,,,,,,,,,,,,,,,
7,"['23118425', '932225', '    public synchronized String encrypt(String plaintext) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (Exception e) {\n        }\n        try {\n            md.update(plaintext.getBytes(""UTF-8""));\n        } catch (Exception e) {\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n', '    public void createVendorSignature() {\n        byte b;\n        try {\n            _vendorMessageDigest = MessageDigest.getInstance(""MD5"");\n            _vendorSig = Signature.getInstance(""MD5/RSA/PKCS#1"");\n            _vendorSig.initSign((PrivateKey) _vendorPrivateKey);\n            _vendorMessageDigest.update(getBankString().getBytes());\n            _vendorMessageDigestBytes = _vendorMessageDigest.digest();\n            _vendorSig.update(_vendorMessageDigestBytes);\n            _vendorSignatureBytes = _vendorSig.sign();\n        } catch (Exception e) {\n        }\n        ;\n    }\n']",88,"    public synchronized String encrypted(String  PlainText) throws Exception {
        MessageDigest med = null;
        try {
            med = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            med.update( PlainText.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte message[] = med.digest();
        String href = (new BASE64Encoder()).encode(message);
        return href;
    }
",1,1,1,-1,"encrypt,plaintext,md,raw,hash","encrypt:2.216209064830433e-06,plaintext:2.774325284090909e-06,md:-1.1444091796875e-05,raw:1.4955347234552556e-06,hash:1.8639998002485796e-06,",5,11,"md:med,raw:message,hash:href,encrypt:encrypted,plaintext: PlainText,",Greedy,,
,,,,,,,,,,,,,,,
8,"['20568568', '1586662', '    private String createHTML(PAGE_TYPE requestPage) {\n        String result = ""<html><head>"";\n        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");\n        InputStreamReader ins;\n        try {\n            ins = new InputStreamReader(url.openStream());\n            BufferedReader bufferedReader = new BufferedReader(ins);\n            String cssLine;\n            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\\n"";\n        } catch (IOException e1) {\n            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n        }\n        switch(requestPage) {\n            case PAGE_LOGO:\n                result += ""</head><body class=\\""header\\"">"" + ""<table width=\\""100%\\""><tr><td>"" + ""<img src=\\""res:org/compiere/images/logo_ad.png\\"">"" + ""</td><td></td><td width=\\""290\\"">"" + ""</td></tr></table>"" + ""</body></html>"";\n                break;\n            case PAGE_HOME:\n                result += ""</head><body><div class=\\""content\\"">\\n"";\n                queryZoom = null;\n                queryZoom = new ArrayList<MQuery>();\n                String appendToHome = null;\n                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive=\'Y\'"" + "" ORDER BY LINE"";\n                PreparedStatement pstmt = null;\n                ResultSet rs = null;\n                try {\n                    pstmt = DB.prepareStatement(sql, null);\n                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n                    rs = pstmt.executeQuery();\n                    while (rs.next()) {\n                        appendToHome = rs.getString(""HTML"");\n                        if (appendToHome != null) {\n                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\\n"";\n                            result += stripHtml(appendToHome, false) + ""<br>\\n"";\n                        }\n                        if (rs.getInt(""AD_MENU_ID"") > 0) {\n                            result += ""<a class=\\""hrefNode\\"" href=\\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\\n"");\n                        }\n                        result += ""<br>\\n"";\n                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));\n                    }\n                } catch (SQLException e) {\n                    log.log(Level.SEVERE, sql, e);\n                } finally {\n                    DB.close(rs, pstmt);\n                    rs = null;\n                    pstmt = null;\n                }\n                result += ""<br><br><br>\\n"" + ""</div>\\n</body>\\n</html>\\n"";\n                break;\n            default:\n                log.warning(""Unknown option - "" + requestPage);\n        }\n        return result;\n    }\n', '    int doOne(int bid, int tid, int aid, int delta) {\n        int aBalance = 0;\n        if (Conn == null) {\n            bench.incrementFailedTransactionCount();\n            return 0;\n        }\n        try {\n            if (Benchmark.prepared_stmt) {\n                pstmt1.setInt(1, delta);\n                pstmt1.setInt(2, aid);\n                pstmt1.executeUpdate();\n                pstmt1.clearWarnings();\n                pstmt2.setInt(1, aid);\n                ResultSet RS = pstmt2.executeQuery();\n                pstmt2.clearWarnings();\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n                pstmt3.setInt(1, delta);\n                pstmt3.setInt(2, tid);\n                pstmt3.executeUpdate();\n                pstmt3.clearWarnings();\n                pstmt4.setInt(1, delta);\n                pstmt4.setInt(2, bid);\n                pstmt4.executeUpdate();\n                pstmt4.clearWarnings();\n                pstmt5.setInt(1, tid);\n                pstmt5.setInt(2, bid);\n                pstmt5.setInt(3, aid);\n                pstmt5.setInt(4, delta);\n                pstmt5.executeUpdate();\n                pstmt5.clearWarnings();\n            } else {\n                Statement Stmt = Conn.createStatement();\n                String Query = ""UPDATE accounts"";\n                Query += "" SET Abalance = Abalance + "" + delta;\n                Query += "" WHERE Aid = "" + aid;\n                int res = Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = ""SELECT Abalance"";\n                Query += "" FROM accounts"";\n                Query += "" WHERE Aid = "" + aid;\n                ResultSet RS = Stmt.executeQuery(Query);\n                Stmt.clearWarnings();\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n                Query = ""UPDATE tellers"";\n                Query += "" SET Tbalance = Tbalance + "" + delta;\n                Query += "" WHERE Tid = "" + tid;\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = ""UPDATE branches"";\n                Query += "" SET Bbalance = Bbalance + "" + delta;\n                Query += "" WHERE Bid = "" + bid;\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = ""INSERT INTO history(Tid, Bid, Aid, delta)"";\n                Query += "" VALUES ("";\n                Query += tid + "","";\n                Query += bid + "","";\n                Query += aid + "","";\n                Query += delta + "")"";\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Stmt.close();\n            }\n            if (Benchmark.transactions) {\n                Conn.commit();\n            }\n            return aBalance;\n        } catch (java.lang.Exception e) {\n            if (Benchmark.verbose) {\n                System.out.println(""Transaction failed: "" + e.getMessage());\n                e.printStackTrace();\n            }\n            bench.incrementFailedTransactionCount();\n            if (Benchmark.transactions) {\n                try {\n                    Conn.rollback();\n                } catch (SQLException e1) {\n                }\n            }\n        }\n        return 0;\n    }\n']",418,"    private String createHTML(PAGE_TYPE requestPage) {
        String true = ""<html><head>"";
        URL char = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(char.openStream());
            BufferedReader bufferedWriter = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedWriter.readLine()) != null) true += cssLine + ""
"";
        } catch (IOException o5) {
            log.log(Level.SEVERE, o5.getLocalizedMessage(), o5);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                true += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                true += ""</head><body><div class=\""content\"">
"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendtoUrl = null;
                String db = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstStatement = null;
                ResultSet xs = null;
                try {
                    pstStatement = DB.prepareStatement(db, null);
                    pstStatement.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    xs = pstStatement.executeQuery();
                    while (xs.next()) {
                        appendtoUrl = xs.getString(""HTML"");
                        if (appendtoUrl != null) {
                            if (xs.getString(""DESCRIPTION"") != null) true += ""<H2>"" + xs.getString(""DESCRIPTION"") + ""</H2>
"";
                            true += stripHtml(appendtoUrl, false) + ""<br>
"";
                        }
                        if (xs.getInt(""AD_MENU_ID"") > 0) {
                            true += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(xs.getInt(""AD_WINDOW_ID"") + ""\"">"" + xs.getString(""DESCRIPTION"") + ""</a><br>
"");
                        }
                        true += ""<br>
"";
                        if (xs.getInt(""PA_GOAL_ID"") > 0) true += goalsDetail(xs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, db, e);
                } finally {
                    DB.close(xs, pstStatement);
                    xs = null;
                    pstStatement = null;
                }
                true += ""<br><br><br>
"" + ""</div>
</body>
</html>
"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return true;
    }
",0,0,1,1,"createHTML,requestPage,result,url,ins,bufferedReader,cssLine,e1,queryZoom,appendToHome,sql,pstmt,rs","createHTML:6.021133490971156e-06,requestPage:5.887129477092198e-05,result:0.0008352292435509817,url:0.0004707063947405134,ins:1.657541309084211e-05,bufferedReader:9.467346327645437e-05,cssLine:0.00021540692874363489,e1:2.1323561668395996e-05,queryZoom:3.1888484954833984e-05,appendToHome:7.056338446480887e-05,sql:1.100025006702968e-05,pstmt:1.6361474990844727e-05,rs:0.00038332066365650723,",8,44,"rs:xs,result:true,appendToHome:appendtoUrl,sql:db,e1:o5,pstmt:pstStatement,url:char,bufferedReader:bufferedWriter,",Greedy,,
,,,,,,,,,,,,,,,
9,"['7757297', '3945236', '    public boolean submit(String uri) throws java.io.IOException, Exception {\n        if (getUserInfo()) {\n            String encodedrdf = URLEncoder.encode(rdfpayload, ""UTF-8"");\n            URL url = new URL(uri);\n            URLConnection connection = url.openConnection();\n            connection.setDoOutput(true);\n            setDescription(mDescription.getText());\n            addCreator(mUser.getText());\n            lastUser = mUser.getText();\n            PrintWriter out = new PrintWriter(connection.getOutputStream());\n            out.println(""rdfblob="" + encodedrdf);\n            writeCreators(out);\n            writeCategories(out);\n            writeName(out);\n            writeDescription(out);\n            writeDate(out);\n            out.println(""&inputtype=1"");\n            out.println(""&op=Submit"");\n            out.close();\n            return doSubmit(connection, rdfpayload);\n        } else {\n            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);\n            return false;\n        }\n    }\n', '    public static void hash(String... plainTexts) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            for (String plainText : plainTexts) md.update(plainText.getBytes());\n            byte b[] = md.digest();\n            int i;\n            StringBuffer buf = new StringBuffer("""");\n            for (int offset = 0; offset < b.length; offset++) {\n                i = b[offset];\n                if (i < 0) i += 256;\n                if (i < 16) buf.append(""0"");\n                buf.append(Integer.toHexString(i));\n            }\n            String str = buf.toString();\n            System.out.println(""result: "" + buf.toString());\n            System.out.println(""result: "" + buf.toString().substring(8, 24));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n']",185,"    public boolean run(String report) throws java.io.IOException, Exception {
        if (getUserInfo()) {
            String encodeddrl = URLEncoder.encode(rdfpayload, ""UTF-8"");
            URL file = new URL(report);
            URLConnection writer = file.openConnection();
            writer.setDoOutput(true);
            setDescription(mDescription.getText());
            addCreator(mUser.getText());
            LastDate = mUser.getText();
            PrintWriter write = new PrintWriter(writer.getOutputStream());
            write.println(""rdfblob="" + encodeddrl);
            writeCreators(write);
            writeCategories(write);
            writeName(write);
            writeDescription(write);
            writeDate(write);
            write.println(""&inputtype=1"");
            write.println(""&op=Submit"");
            write.close();
            return doSubmit(writer, rdfpayload);
        } else {
            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
",0,0,0,-1,"submit,uri,encodedrdf,url,connection,lastUser,out","submit:-1.910057934847745e-06,uri:5.375255237926137e-06,encodedrdf:7.369301535866477e-07,url:1.8639998002485796e-06,connection:4.118139093572443e-07,lastUser:8.127906105735086e-08,out:6.177208640358664e-06,",7,22,"encodedrdf:encodeddrl,lastUser:LastDate,uri:report,url:file,connection:writer,out:write,submit:run,",Greedy,,
,,,,,,,,,,,,,,,
10,"['23402240', '16590954', '    public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {\n        int intResult = 0;\n        String sql = ""UPDATE torneo"" + "" SET  numeroDivisiones="" + nDivisiones + "" WHERE idTorneo="" + idTorneo;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n', '    public void createJAR(String fileString, String ext) {\n        try {\n            File file = new File(fileString);\n            int i = fileString.lastIndexOf(java.io.File.separator);\n            String dir = fileString.substring(0, i + 1);\n            if (ext.matches(""jar"")) {\n                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());\n                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n                FileChannel out = fstrm.getChannel();\n                in.transferTo(0, jarFile.length(), out);\n                in.close();\n                out.close();\n            } else {\n                file.mkdir();\n            }\n            File.umount(file);\n            File temp = new File(dir + ""document.jsd"");\n            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n            ostrm = new ObjectOutputStream(fstrm2);\n            ostrm.writeObject(doc);\n            ostrm.flush();\n            ostrm.close();\n            File.umount();\n            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");\n            File.cp_p(temp, docFile);\n            File.umount();\n            temp.delete();\n            File.umount(file);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",131,"    public boolean  actualizarNumente(int idMorno, int nDecionales) {
        int interResults = 0;
        String fn = ""UPDATE torneo"" + "" SET  numeroDivisiones="" + nDecionales + "" WHERE idTorneo="" + idMorno;
        try {
            writer = conexionBD.getConnection();
            writer.setAutoCommit(false);
            pers = writer.prepareStatement(fn);
            interResults = pers.executeUpdate();
            writer.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                writer.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(pers);
            conexionBD.close(writer);
        }
        return (interResults > 0);
    }
",0,0,0,-1,"actualizarNdivisiones,idTorneo,nDivisiones,intResult,sql,connection,ps","actualizarNdivisiones:9.185389468544408e-06,idTorneo:-5.019338507401316e-07,nDivisiones:-4.9189517372532895e-06,intResult:8.13132838199013e-06,sql:2.9331759402626436e-05,connection:0.00029558884470086346,ps:4.4552903426320925e-05,",7,19,"idTorneo:idMorno,nDivisiones:nDecionales,sql:fn,connection:writer,ps:pers,intResult:interResults,actualizarNdivisiones: actualizarNumente,",Greedy,,
,,,,,,,,,,,,,,,
11,"['12428013', '414258', '    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\n        if (monitor != null && monitor.isCanceled()) {\n            return;\n        }\n        try {\n            ftpClient = new FTPClient();\n            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\n            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\n            ftpClient.connect();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            if (from != null) {\n                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\n                synchedSet.add(ftpHolder);\n            }\n            JobHandler.aquireFTPLock();\n            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\n                if (monitor != null && monitor.isCanceled()) {\n                    JobHandler.releaseFTPLock();\n                    ftpClient.quit();\n                    return;\n                }\n                Thread.yield();\n                FTPHolder element = (FTPHolder) iter.next();\n                ftpClient.setType(FTPTransferType.ASCII);\n                ftpClient.put(element.from, element.to);\n                if (element.renameTo != null) {\n                    try {\n                        ftpClient.delete(element.renameTo);\n                    } catch (Exception e) {\n                    }\n                    ftpClient.rename(element.to, element.renameTo);\n                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);\n                }\n            }\n            JobHandler.releaseFTPLock();\n            ftpClient.quit();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (FTPException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        synchedSet.clear();\n    }\n', '    public Configuration(URL url) {\n        InputStream in = null;\n        try {\n            load(in = url.openStream());\n        } catch (Exception e) {\n            throw new RuntimeException(""Could not load configuration from "" + url, e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException ignore) {\n                }\n            }\n        }\n    }\n']",401,"    public static void  swISHExec(IProgressMonitor mx, String reset, String format, String renewTO) {
        if (mx != null && mx.isCanceled()) {
            return;
        }
        try {
            ftcpConn = new FTPClient();
            ftcpConn.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftcpConn.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftcpConn.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftcpConn.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (reset != null) {
                FTPHolder ftPHholder = new FTPHolder(reset, format, renewTO, false);
                synchedSet.add(ftPHholder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator oper = synchedSet.iterator(); oper.hasNext(); ) {
                if (mx != null && mx.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftcpConn.quit();
                    return;
                }
                Thread.yield();
                FTPHolder append = (FTPHolder) oper.next();
                ftcpConn.setType(FTPTransferType.ASCII);
                ftcpConn.put(append.reset, append.format);
                if (append.renewTO != null) {
                    try {
                        ftcpConn.delete(append.renewTO);
                    } catch (Exception e) {
                    }
                    ftcpConn.rename(append.format, append.renewTO);
                    log.info(""RENAME: "" + append.format + ""To: "" + append.renewTO);
                }
            }
            JobHandler.releaseFTPLock();
            ftcpConn.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
",0,0,0,-1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element","polishOff:-1.814054406207541e-08,monitor:4.405560700789742e-07,from:-7.256217624830164e-08,to:1.2957531472911005e-08,renameTo:-2.487846042798913e-07,ftpClient:-3.3637751703676972e-06,ftpHolder:7.256217624830164e-08,iter:-6.219615106997282e-08,element:9.329422660495924e-08,",9,46,"polishOff: swISHExec,monitor:mx,from:reset,to:format,renameTo:renewTO,iter:oper,ftpClient:ftcpConn,ftpHolder:ftPHholder,element:append,",Greedy,,
,,,,,,,,,,,,,,,
12,"['20011285', '19687456', '    public static void copy(File sourceFile, File destinationFile) {\n        try {\n            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\n                System.out.println(""sourceFile & destinationFile is null"");\n                System.exit(-1);\n            }\n            if (sourceFile.isDirectory()) {\n                File[] tmp = sourceFile.listFiles();\n                File f;\n                for (int i = 0; i < tmp.length; i++) {\n                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\n                    f.getParentFile().mkdirs();\n                    copy(tmp[i], f);\n                }\n            } else {\n                System.out.println(""\\nCopy from: "" + sourceFile + ""\\n\\n     to: "" + destinationFile);\n                FileChannel source = new FileInputStream(sourceFile).getChannel();\n                FileChannel destination = new FileOutputStream(destinationFile).getChannel();\n                destination.transferFrom(source, 0, source.size());\n                source.close();\n                destination.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public void testReadPerMemberSixSmall() throws IOException {\n        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n        gzin.setEofEachMember(true);\n        for (int i = 0; i < 3; i++) {\n            int count2 = IOUtils.copy(gzin, new NullOutputStream());\n            assertEquals(""wrong 1-byte member count"", 1, count2);\n            gzin.nextMember();\n            int count3 = IOUtils.copy(gzin, new NullOutputStream());\n            assertEquals(""wrong 5-byte member count"", 5, count3);\n            gzin.nextMember();\n        }\n        int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong eof count"", 0, countEnd);\n    }\n']",237,"    public static void download(File packageFile, File destinationKey) {
        try {
            if (((packageFile == null) && (destinationKey == null)) || ((packageFile == null) || (destinationKey == null))) {
                System.out.println(""sourceFile & destinationFile is null"");
                System.exit(-1);
            }
            if (packageFile.isDirectory()) {
                File[] shots = packageFile.listFiles();
                File q;
                for (int multi = 0; multi < shots.length; multi++) {
                    q = new File(destinationKey.getAbsolutePath() + File.separator + shots[multi].getName());
                    q.getParentFile().mkdirs();
                    download(shots[multi], q);
                }
            } else {
                System.out.println(""
Copy from: "" + sourceFile + ""

     to: "" + destinationFile);
                FileChannel archive = new FileInputStream(packageFile).getChannel();
                FileChannel coordinated = new FileOutputStream(destinationKey).getChannel();
                coordinated.transferFrom(archive, 0, archive.size());
                archive.close();
                coordinated.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"copy,sourceFile,destinationFile,tmp,f,i,source,destination","copy:-2.520424979073661e-07,sourceFile:-1.5974044799804688e-06,destinationFile:-8.378710065569196e-07,tmp:-6.948198590959821e-07,f:-7.629394531249999e-07,i:-1.5326908656529016e-06,source:-2.5885445731026784e-07,destination:-5.517687116350447e-07,",8,35,"destinationFile:destinationKey,tmp:shots,f:q,i:multi,destination:coordinated,sourceFile:packageFile,source:archive,copy:download,",Greedy,,
,,,,,,,,,,,,,,,
13,"['23246123', '9687813', '    protected Control createDialogArea(Composite parent) {\n        Composite composite = (Composite) super.createDialogArea(parent);\n        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));\n        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));\n        Composite content = new Composite(composite, SWT.NONE);\n        content.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final int ncol = 1;\n        GridLayout layout = new GridLayout(1, false);\n        layout.numColumns = ncol;\n        content.setLayout(layout);\n        Browser browser = null;\n        Text text = null;\n        try {\n            browser = new Browser(content, SWT.NONE);\n            browser.setLayoutData(new GridData(GridData.FILL_BOTH));\n        } catch (Throwable t) {\n            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\n            text.setLayoutData(new GridData(GridData.FILL_BOTH));\n        }\n        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");\n        InputStream in = null;\n        BufferedReader r = null;\n        StringBuffer sb = new StringBuffer();\n        try {\n            in = url.openStream();\n            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));\n            String line;\n            while ((line = r.readLine()) != null) sb.append(line).append(""\\r\\n"");\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (r != null) {\n                try {\n                    r.close();\n                } catch (IOException e) {\n                }\n            }\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());\n        return composite;\n    }\n', '    public static InputStream getFileInputStream(String path) throws IOException {\n        InputStream is = null;\n        File file = new File(path);\n        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));\n        if (is == null) {\n            URL url = FileUtils.class.getClassLoader().getResource(path);\n            is = (url == null) ? null : url.openStream();\n        }\n        return is;\n    }\n']",368,"    protected Control createEditorBar(Composite block) {
        Composite comppositable = (Composite) super.createEditorBar(block);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite this = new Composite(comppositable, SWT.NONE);
        this.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int NCol = 1;
        GridLayout grid = new GridLayout(1, false);
        grid.numberColumnS = NCol;
        this.setLayout(grid);
        Browser hr = null;
        Text writer = null;
        try {
            hr = new Browser(this, SWT.NONE);
            hr.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            writer = new Text(this, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            writer.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL b = PalobrowserPlugin.getDefault().getBundle().getResource(hr != null ? ""license.html"" : ""license.txt"");
        InputStream mi = null;
        BufferedReader rt = null;
        StringBuffer bg = new StringBuffer();
        try {
            mi = b.openStream();
            rt = new BufferedReader(new InputStreamReader(mi, ""ISO-8859-1""));
            String block;
            while ((block = rt.readLine()) != null) bg.append(block).append(""\r
"");
        } catch (IOException ze) {
            ze.printStackTrace();
        } finally {
            if (rt != null) {
                try {
                    rt.close();
                } catch (IOException ze) {
                }
            }
            if (mi != null) {
                try {
                    mi.close();
                } catch (IOException ze) {
                }
            }
        }
        if (hr != null) hr.setText(bg.toString()); else writer.setText(bg.toString());
        return comppositable;
    }
",0,0,0,-1,"createDialogArea,parent,composite,content,ncol,layout,numColumns,browser,text,url,in,r,sb,line,e","createDialogArea:-1.4725853415096508e-07,parent:-8.414773380055147e-07,composite:-1.6584115869858686e-06,content:-3.5821222791484756e-06,ncol:1.1687185250076593e-08,layout:-2.6085797478170956e-06,numColumns:1.61283156451057e-07,browser:-7.292803596047794e-07,text:5.6098489200367646e-08,url:2.8259613934685203e-06,in:-5.808531069288067e-06,r:-9.162753236060049e-06,sb:-8.181029675053615e-07,line:-7.503172930549173e-07,e:-1.056521546606924e-06,",15,51,"content:this,text:writer,e:ze,browser:hr,url:b,in:mi,r:rt,createDialogArea:createEditorBar,parent:block,composite:comppositable,layout:grid,ncol:NCol,numColumns:numberColumnS,sb:bg,line:block,",Greedy,,
,,,,,,,,,,,,,,,
14,"['9872346', '18374478', '    public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException {\n        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "")"");\n        Document document = null;\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setNamespaceAware(true);\n            factory.setCoalescing(true);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setDefaultUseCaches(false);\n            connection.setUseCaches(false);\n            connection.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");\n            connection.connect();\n            InputStream stream = connection.getInputStream();\n            document = factory.newDocumentBuilder().parse(stream);\n            stream.close();\n            connection.disconnect();\n        } catch (SAXException e) {\n            if (e instanceof SAXParseException) {\n                throw (SAXParseException) e;\n            }\n        } catch (ParserConfigurationException e) {\n            e.printStackTrace();\n        }\n        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "") ["" + document + ""]"");\n        return document;\n    }\n', '    public void updateUser(final User user) throws IOException {\n        try {\n            Connection conn = null;\n            boolean autoCommit = false;\n            try {\n                conn = pool.getConnection();\n                autoCommit = conn.getAutoCommit();\n                conn.setAutoCommit(false);\n                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");\n                updateUser.setInt(1, user.getMainRole().getId());\n                updateUser.setString(2, user.getUserId());\n                updateUser.executeUpdate();\n                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");\n                deleteRoles.setString(1, user.getUserId());\n                deleteRoles.executeUpdate();\n                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");\n                for (final Role role : user.getRoles()) {\n                    insertRoles.setString(1, user.getUserId());\n                    insertRoles.setInt(2, role.getId());\n                    insertRoles.executeUpdate();\n                }\n                conn.commit();\n            } catch (Throwable t) {\n                if (conn != null) conn.rollback();\n                throw new SQLException(t.toString());\n            } finally {\n                if (conn != null) {\n                    conn.setAutoCommit(autoCommit);\n                    conn.close();\n                }\n            }\n        } catch (final SQLException sqle) {\n            log.log(Level.SEVERE, sqle.toString(), sqle);\n            throw new IOException(sqle.toString());\n        }\n    }\n']",209,"    public static synchronized Document readLocalObject(URL request, boolean valididate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + request + "")"");
        Document component = null;
        try {
            DocumentBuilderFactory fixture = DocumentBuilderFactory.newInstance();
            fixture.setNamespaceAware(true);
            fixture.setCoalescing(true);
            HttpURLConnection writer = (HttpURLConnection) request.openConnection();
            writer.setDefaultUseCaches(false);
            writer.setUseCaches(false);
            writer.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            writer.connect();
            InputStream pool = writer.getInputStream();
            component = fixture.newDocumentBuilder().parse(pool);
            pool.close();
            writer.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + request + "") ["" + component + ""]"");
        return component;
    }
",0,0,0,-1,"readRemoteDocument,url,validate,document,factory,connection,stream","readRemoteDocument:-1.2273589769999186e-05,url:-0.0003025829792022705,validate:-1.6125539938608803e-05,document:-0.00013791521390279132,factory:-0.0002810657024383545,connection:-0.0002677241961161296,stream:-3.085285425186157e-05,",7,24,"url:request,document:component,factory:fixture,stream:pool,connection:writer,readRemoteDocument:readLocalObject,validate:valididate,",Greedy,,
,,,,,,,,,,,,,,,
15,"['7757297', '692738', '    public boolean submit(String uri) throws java.io.IOException, Exception {\n        if (getUserInfo()) {\n            String encodedrdf = URLEncoder.encode(rdfpayload, ""UTF-8"");\n            URL url = new URL(uri);\n            URLConnection connection = url.openConnection();\n            connection.setDoOutput(true);\n            setDescription(mDescription.getText());\n            addCreator(mUser.getText());\n            lastUser = mUser.getText();\n            PrintWriter out = new PrintWriter(connection.getOutputStream());\n            out.println(""rdfblob="" + encodedrdf);\n            writeCreators(out);\n            writeCategories(out);\n            writeName(out);\n            writeDescription(out);\n            writeDate(out);\n            out.println(""&inputtype=1"");\n            out.println(""&op=Submit"");\n            out.close();\n            return doSubmit(connection, rdfpayload);\n        } else {\n            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);\n            return false;\n        }\n    }\n', '    public Configuration(URL url) {\n        InputStream in = null;\n        try {\n            load(in = url.openStream());\n        } catch (Exception e) {\n            throw new RuntimeException(""Could not load configuration from "" + url, e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException ignore) {\n                }\n            }\n        }\n    }\n']",185,,0,0,,-3,"submit,uri,encodedrdf,url,connection,lastUser,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
16,"['17161805', '4852691', '    private String encode(String plaintext) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA"");\n            md.update(plaintext.getBytes(""UTF-8""));\n            byte raw[] = md.digest();\n            return (new BASE64Encoder()).encode(raw);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(""Error encoding: "" + e);\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(""Error encoding: "" + e);\n        }\n    }\n', '    public static final synchronized String hash(String data) {\n        if (digest == null) {\n            try {\n                digest = MessageDigest.getInstance(""MD5"");\n            } catch (NoSuchAlgorithmException nsae) {\n                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");\n                nsae.printStackTrace();\n            }\n        }\n        digest.update(data.getBytes());\n        return toHex(digest.digest());\n    }\n']",91,"    private String unprocess(String plainText) {
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA"");
            sha.update(plainText.getBytes(""UTF-8""));
            byte inner[] = sha.digest();
            return (new BASE64Encoder()).unprocess(inner);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
",1,1,1,-1,"encode,plaintext,md,raw","encode:-1.3377931382921006e-06,plaintext:9.444024827745225e-06,md:-4.132588704427083e-06,raw:3.112687004937066e-06,",4,9,"md:sha,encode:unprocess,plaintext:plainText,raw:inner,",Greedy,,
,,,,,,,,,,,,,,,
17,"['9210168', '614099', '            @Override\n            public void run() {\n                try {\n                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n                    InputStream fis = url.openStream();\n                    InputStreamReader r = new InputStreamReader(fis, ""UTF-8"");\n                    BufferedReader br = new BufferedReader(r);\n                    String line;\n                    StringBuilder sb = new StringBuilder();\n                    while (null != (line = br.readLine())) {\n                        sb.append(line);\n                        sb.append(""\\r\\n"");\n                    }\n                    br.close();\n                    r.close();\n                    fis.close();\n                    final String text = sb.toString();\n                    SwingUtilities.invokeLater(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            MainPanel.this.source.setText(text);\n                            MainPanel.this.source.setCaretPosition(0);\n                        }\n                    });\n                } catch (Exception ex) {\n                }\n            }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",179,"            @Override
            public void play() {
                try {
                    URL https = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream fiIs = https.openStream();
                    InputStreamReader rect = new InputStreamReader(fiIs, ""UTF-8"");
                    BufferedReader tr = new BufferedReader(rect);
                    String  status;
                    StringBuilder erb = new StringBuilder();
                    while (null != ( status = tr.readLine())) {
                        erb.append( status);
                        erb.append(""\r
"");
                    }
                    tr.close();
                    rect.close();
                    fiIs.close();
                    final String buffer = erb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void play() {
                            MainPanel.this.source.setText(buffer);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
",1,1,1,-1,"run,url,fis,r,br,line,sb,text","run:-7.309696891091087e-06,url:5.386092446067116e-06,fis:4.927949471907182e-05,r:1.390684734691273e-05,br:-8.84722579609264e-05,line:-5.296956409107555e-05,sb:-8.826906030828303e-05,text:-2.0216811786998402e-05,",8,22,"url:https,r:rect,text:buffer,fis:fiIs,run:play,br:tr,sb:erb,line: status,",Greedy,,
,,,,,,,,,,,,,,,
18,"['16572931', '13657103', '    private String unJar(String jarPath, String jarEntry) {\n        String path;\n        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));\n        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));\n        try {\n            new File(path + ""/"" + relPath).mkdirs();\n            JarFile jar = new JarFile(jarPath);\n            ZipEntry ze = jar.getEntry(jarEntry);\n            File bin = new File(path + ""/"" + jarEntry);\n            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return path + ""/"" + jarEntry;\n    }\n', '    private void forBundle(BundleManipulator manip) {\n        ByteArrayOutputStream bout = null;\n        try {\n            bout = new ByteArrayOutputStream();\n            ZipOutputStream zout = new ZipOutputStream(bout);\n            Bundle bundle = getBundle();\n            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);\n            if (files != null) {\n                while (files.hasMoreElements()) {\n                    URL url = files.nextElement();\n                    String name = url.getFile();\n                    if (name.startsWith(""/"")) {\n                        name = name.substring(1);\n                    }\n                    if (manip.includeEntry(name)) {\n                        zout.putNextEntry(new ZipEntry(name));\n                        IOUtils.copy(url.openStream(), zout);\n                    }\n                }\n            }\n            manip.finish(bundle, zout);\n            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());\n            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));\n            mf.write(zout);\n            zout.close();\n            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");\n            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n            }\n            pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n            tmpFile.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(bout);\n        }\n    }\n']",164,"    private String removeExt(String barePath, String springItem) {
        String output;
        if (barePath.lastIndexOf(""lib/"") >= 0) output = barePath.substring(0, barePath.lastIndexOf(""lib/"")); else output = barePath.substring(0, barePath.lastIndexOf(""/""));
        String relPort = springItem.substring(0, springItem.lastIndexOf(""/""));
        try {
            new File(output + ""/"" + relPort).mkdirs();
            JarFile archive = new JarFile(barePath);
            ZipEntry e = archive.getEntry(springItem);
            File skin = new File(output + ""/"" + springItem);
            IOUtils.copy(archive.getInputStream(e), new FileOutputStream(skin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return output + ""/"" + springItem;
    }
",1,1,1,-1,"unJar,jarPath,jarEntry,path,relPath,jar,ze,bin","unJar:-1.0276662892308728e-07,jarPath:1.0934369317416487e-06,jarEntry:1.6278234021417026e-06,path:-1.2085355561355064e-06,relPath:1.2331995470770475e-07,jar:1.3565195017847522e-07,ze:1.9731192753232758e-07,bin:-4.1106651569234917e-08,",8,29,"jarPath:barePath,path:output,jar:archive,jarEntry:springItem,relPath:relPort,bin:skin,unJar:removeExt,ze:e,",Greedy,,
,,,,,,,,,,,,,,,
19,"['19849797', '13333160', '    public static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n', '    private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\n        Document dom = null;\n        try {\n            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n            f.setNamespaceAware(false);\n            f.setCoalescing(true);\n            f.setIgnoringComments(true);\n            f.setValidating(false);\n            DocumentBuilder b = f.newDocumentBuilder();\n            dom = b.parse(new InputSource(xmlIn));\n        } catch (ParserConfigurationException err) {\n            throw new IOException(err);\n        }\n        Element root = dom.getDocumentElement();\n        if (root == null) throw new SAXException(""Not root in document"");\n        Attr att = root.getAttributeNode(""label"");\n        if (att == null) root.setAttribute(""label"", ""Wikipedia"");\n        Menu menu = parseMenu(root);\n        menu.id = ""menuWikipedia"";\n        ZipOutputStream zout = new ZipOutputStream(out);\n        String content = ResourceUtils.getContent(XUL4Wikipedia.class, ""chrome.manifest"");\n        addEntry(zout, ""chrome.manifest"", content);\n        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""install.rdf"");\n        addEntry(zout, ""install.rdf"", content);\n        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""library.js"");\n        addDir(zout, ""chrome/"");\n        addDir(zout, ""chrome/content/"");\n        addDir(zout, ""chrome/skin/"");\n        String signal = ""/*INSERT_CMD_HERE*/"";\n        int n = content.indexOf(signal);\n        if (n == -1) throw new RuntimeException(""where is "" + signal + "" ??"");\n        ZipEntry entry = new ZipEntry(""chrome/content/library.js"");\n        zout.putNextEntry(entry);\n        PrintWriter pout = new PrintWriter(zout);\n        pout.write(content.substring(0, n));\n        menu.toJS(pout);\n        pout.write(content.substring(n + signal.length()));\n        pout.flush();\n        zout.closeEntry();\n        entry = new ZipEntry(""chrome/content/menu.xul"");\n        zout.putNextEntry(entry);\n        pout = new PrintWriter(zout);\n        pout.println(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>"");\n        pout.println(""<overlay id=\\""xul4wikipedia\\"" xmlns=\\"""" + XUL.NS + ""\\"">"");\n        pout.println(""<script src=\\""library.js\\""/>"");\n        pout.println(""<popup id=\\""contentAreaContextMenu\\"">"");\n        pout.println(""<menuseparator/>"");\n        menu.toXUL(pout);\n        pout.println(""</popup>"");\n        pout.println(""</overlay>"");\n        pout.flush();\n        zout.closeEntry();\n        InputStream png = XUL4Wikipedia.class.getResourceAsStream(""32px-Wikipedia-logo.png"");\n        if (png == null) throw new IOException(""Cannot get icon"");\n        entry = new ZipEntry(""chrome/skin/wikipedia.png"");\n        zout.putNextEntry(entry);\n        IOUtils.copyTo(png, zout);\n        zout.closeEntry();\n        zout.finish();\n        zout.flush();\n    }\n']",116,"    public static void transferStream(File  sourcePage, File optEntity) throws IOException {
        if (!optEntity.exists()) {
            optEntity.createNewFile();
        }
        FileChannel body = null;
        FileChannel Destination = null;
        try {
            body = new FileInputStream( sourcePage).getChannel();
            Destination = new FileOutputStream(optEntity).getChannel();
            Destination.transferFrom(body, 0, body.size());
        } finally {
            if (body != null) {
                body.close();
            }
            if (Destination != null) {
                Destination.close();
            }
        }
    }
",1,1,1,-1,"copyFile,sourceFile,destFile,source,destination","copyFile:2.582867940266927e-07,sourceFile:7.02010260687934e-07,destFile:1.6424391004774304e-06,source:-1.9470850626627603e-06,destination:-1.4901161193847656e-06,",5,18,"sourceFile: sourcePage,source:body,destFile:optEntity,destination:Destination,copyFile:transferStream,",Greedy,,
,,,,,,,,,,,,,,,
20,"['9261777', '23273706', '    public static void main(String[] args) {\n        String source, destination;\n        if (args[0].toLowerCase().endsWith("".gz"")) {\n            source = args[0];\n            destination = source.substring(0, source.length() - 3);\n        } else {\n            source = args[0] + "".gz"";\n            destination = args[0];\n        }\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new GZIPInputStream(new FileInputStream(source));\n            os = new FileOutputStream(destination);\n            byte[] buffer = new byte[8192];\n            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n        } catch (IOException e) {\n            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);\n        } finally {\n            if (os != null) try {\n                os.close();\n            } catch (IOException e) {\n            }\n            if (is != null) try {\n                is.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n', '    public String[][] getProjectTreeData() {\n        String[][] treeData = null;\n        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";\n        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";\n        try {\n            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setValidating(false);\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            URL u = new URL(urldata);\n            DataInputStream is = new DataInputStream(u.openStream());\n            FileOutputStream os = new FileOutputStream(filename);\n            int iBufSize = is.available();\n            byte inBuf[] = new byte[20000 * 1024];\n            int iNumRead;\n            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n            os.close();\n            is.close();\n            File f = new File(filename);\n            InputStream inputstream = new FileInputStream(f);\n            Document document = parser.parse(inputstream);\n            NodeList nodelist = document.getElementsByTagName(""proj"");\n            int num = nodelist.getLength();\n            treeData = new String[num][3];\n            for (int i = 0; i < num; i++) {\n                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));\n                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));\n                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));\n            }\n        } catch (MalformedURLException ex) {\n            System.out.println(ex);\n        } catch (ParserConfigurationException ex) {\n            System.out.println(ex);\n        } catch (NullPointerException e) {\n        } catch (Exception ex) {\n            System.out.println(ex);\n        }\n        return treeData;\n    }\n']",222,"    public static void main(String[] args) {
        String expression,  destend;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            expression = args[0];
             destend = expression.substring(0, expression.path() - 3);
        } else {
            expression = args[0] + "".gz"";
             destend = args[0];
        }
        InputStream ios = null;
        OutputStream ó = null;
        try {
            ios = new GZIPInputStream(new FileInputStream(expression));
            ó = new FileOutputStream( destend);
            byte[] background = new byte[8192];
            for (int path; (path = ios.read(background)) != -1; ) ó.write(buffer, 0, path);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (ó != null) try {
                ó.close();
            } catch (IOException e) {
            }
            if (ios != null) try {
                ios.close();
            } catch (IOException e) {
            }
        }
    }
",1,1,1,-1,"source,destination,is,os,buffer,length","source:-1.006656222873264e-06,destination:-8.12389232494213e-07,is:8.830317744502314e-08,os:9.27183363172743e-07,buffer:6.622738308376736e-08,length:-1.5894571940104166e-07,",6,27,"source:expression,destination: destend,length:path,is:ios,os:ó,buffer:background,",Greedy,,
,,,,,,,,,,,,,,,
21,"['2217889', '23666867', '    public static InputStream getResourceAsStreamIfAny(String resPath) {\n        URL url = findResource(resPath);\n        try {\n            return url == null ? null : url.openStream();\n        } catch (IOException e) {\n            ZMLog.warn(e, "" URL open Connection got an exception!"");\n            return null;\n        }\n    }\n', '    public static void copyFile(File in, File out) {\n        try {\n            FileChannel inChannel = null, outChannel = null;\n            try {\n                out.getParentFile().mkdirs();\n                inChannel = new FileInputStream(in).getChannel();\n                outChannel = new FileOutputStream(out).getChannel();\n                outChannel.transferFrom(inChannel, 0, inChannel.size());\n            } finally {\n                if (inChannel != null) {\n                    inChannel.close();\n                }\n                if (outChannel != null) {\n                    outChannel.close();\n                }\n            }\n        } catch (Exception e) {\n            ObjectUtils.throwAsError(e);\n        }\n    }\n']",54,"    public static InputStream getResourceAsStreamWherePresent(String ResId) {
        URL file = findResource(ResId);
        try {
            return file == null ? null : file.openStream();
        } catch (IOException e) {
            ZMLog.warn(e, "" URL open Connection got an exception!"");
            return null;
        }
    }
",0,0,0,-1,"getResourceAsStreamIfAny,resPath,url","getResourceAsStreamIfAny:2.582867940266927e-07,resPath:1.2834866841634113e-05,url:9.000301361083984e-06,",3,6,"resPath:ResId,url:file,getResourceAsStreamIfAny:getResourceAsStreamWherePresent,",Greedy,,
,,,,,,,,,,,,,,,
22,"['22135199', '823074', '    public void testCodingEmptyFile() throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        WritableByteChannel channel = newChannel(baos);\n        HttpParams params = new BasicHttpParams();\n        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n        encoder.write(wrap(""stuff;""));\n        File tmpFile = File.createTempFile(""testFile"", ""txt"");\n        FileOutputStream fout = new FileOutputStream(tmpFile);\n        OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n        wrtout.flush();\n        wrtout.close();\n        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n        encoder.transfer(fchannel, 0, 20);\n        encoder.write(wrap(""more stuff""));\n        String s = baos.toString(""US-ASCII"");\n        assertTrue(encoder.isCompleted());\n        assertEquals(""stuff;more stuff"", s);\n        tmpFile.delete();\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",189,"    public void  testCachingEmptyStream() throws Exception {
        ByteArrayOutputStream Baoss = new ByteArrayOutputStream();
        WritableByteChannel client = newChannel(Baoss);
        HttpParams Parameters = new BasicHttpParams();
        SessionOutputBuffer Outbuf = new SessionOutputBufferImpl(1024, 128, Parameters);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder enramer = new LengthDelimitedEncoder(client, Outbuf, metrics, 16);
        enramer.write(wrap(""stuff;""));
        File imgKey = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream vao = new FileOutputStream(imgKey);
        OutputStreamWriter wttwriter = new OutputStreamWriter(vao);
        wttwriter.flush();
        wttwriter.close();
        FileChannel FChannel = new FileInputStream(imgKey).getChannel();
        enramer.transfer(FChannel, 0, 20);
        enramer.write(wrap(""more stuff""));
        String ws = Baoss.toString(""US-ASCII"");
        assertTrue(enramer.isCompleted());
        assertEquals(""stuff;more stuff"", ws);
        imgKey.delete();
    }
",1,1,1,-1,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s","testCodingEmptyFile:7.549921671549479e-08,baos:-2.384185791015625e-07,channel:-1.9073486328125e-07,params:-8.742014567057291e-08,outbuf:-1.9073486328125e-07,metrics:-1.1920928955078125e-07,encoder:-7.748603820800781e-07,tmpFile:1.7801920572916667e-06,fout:3.735224405924479e-07,wrtout:2.5033950805664064e-07,fchannel:-1.986821492513021e-07,s:1.5894571940104166e-08,",11,28,"channel:client,outbuf:Outbuf,metrics:metrics,encoder:enramer,s:ws,params:Parameters,tmpFile:imgKey,baos:Baoss,fchannel:FChannel,testCodingEmptyFile: testCachingEmptyStream,fout:vao,wrtout:wttwriter,",Greedy,,
,,,,,,,,,,,,,,,
23,"['16511008', '20886320', '    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {\n        ProgramProfilingMessageSymbol profilingMessageSymbol = null;\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultSet = null;\n        try {\n            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";\n            connection = DriverManager.getConnection(CONN_STR);\n            statement = connection.createStatement();\n            statement.executeUpdate(query);\n            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;\n            resultSet = statement.executeQuery(query);\n            if (!resultSet.next()) {\n                connection.rollback();\n                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";\n                log.error(msg);\n                throw new AdaptationException(msg);\n            }\n            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);\n            connection.commit();\n        } catch (SQLException ex) {\n            try {\n                connection.rollback();\n            } catch (Exception e) {\n            }\n            String msg = ""SQLException in createNewProfilingMessageSymbol"";\n            log.error(msg, ex);\n            throw new AdaptationException(msg, ex);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Exception ex) {\n            }\n            try {\n                statement.close();\n            } catch (Exception ex) {\n            }\n            try {\n                connection.close();\n            } catch (Exception ex) {\n            }\n        }\n        return profilingMessageSymbol;\n    }\n', '    @Override\n    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {\n        if (query == null) {\n            return null;\n        }\n        String encodedQuery = """";\n        try {\n            encodedQuery = URLEncoder.encode(query, ""UTF-8"");\n        } catch (UnsupportedEncodingException e) {\n            throw e;\n        }\n        final int startAt = 0;\n        final int pageNr = (startAt - 1) / 30;\n        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));\n        HttpParams httpparams = new BasicHttpParams();\n        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);\n        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);\n        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);\n        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");\n        HttpGet httpget = new HttpGet(url);\n        HttpResponse response = httpclient.execute(httpget);\n        InputStream instream = response.getEntity().getContent();\n        String html = HttpHelper.ConvertStreamToString(instream);\n        instream.close();\n        return parseHtml(html);\n    }\n']",253,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
",0,0,0,-1,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg","createNewProfilingMessageSymbol:5.79937084301098e-08,configID:-7.345869734480574e-07,programMessageSymbolID:-1.9331236143369934e-07,profilingMessageSymbol:-1.5464988914695947e-07,connection:-9.472305710251268e-07,statement:-1.5787176183752112e-06,resultSet:-1.159874168602196e-06,query:-6.701495196368244e-07,msg:-3.866247228673987e-08,",0,0,"configID:configID,programMessageSymbolID:programMessageSymbolID,query:query,connection:connection,createNewProfilingMessageSymbol:createNewProfilingMessageSymbol,statement:statement,resultSet:resultSet,profilingMessageSymbol:profilingMessageSymbol,msg:msg,",Greedy,,
,,,,,,,,,,,,,,,
24,"['88047', '19096138', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n', '    public static void main(String[] args) {\n        String logFileName = args[0];\n        int extractLineEvery = new Integer(args[1]).intValue();\n        String filterToken = ""P0"";\n        if (args.length > 2) {\n            filterToken = args[2];\n        }\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(logFileName));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));\n            String readLine;\n            int x = 0;\n            while ((readLine = br.readLine()) != null) {\n                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n                    bw.write(readLine + ""\\n"");\n                }\n            }\n            bw.flush();\n            bw.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",262,"    private static void readAndResend(File docFilename, File reportFilename) throws IOException {
        ImageInputStream  ii = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(docFilename)));
        DcmParser dcmStatement = DcmParserFactory.getInstance().newDcmParser( ii);
        Dataset db = DcmObjectFactory.getInstance().newDataset();
        dcmStatement.setDcmHandler(db.getDcmHandler());
        dcmStatement.parseDcmFile(null, Tags.PixelData);
        PixelDataReader ddRunner = pdFact.newReader(db,  ii, dcmStatement.getDcmDecodeParam().byteOrder, dcmStatement.getReadVR());
        System.writer.println(""reading "" + docFilename + ""..."");
        ddRunner.readPixelData(false);
        ImageOutputStream writer = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(reportFilename)));
        DcmEncodeParam dcmEnParam = DcmEncodeParam.IVR_LE;
        db.writeDataset(writer, dcmEnParam);
        db.writeHeader(writer, dcmEnParam, Tags.PixelData, dcmStatement.getReadVR(), dcmStatement.getReadLength());
        System.writer.println(""writing "" + reportFilename + ""..."");
        PixelDataWriter PDEditor = pdFact.newWriter(ddRunner.getPixelDataArray(), false, db, writer, dcmStatement.getDcmDecodeParam().byteOrder, dcmStatement.getReadVR());
        PDEditor.writePixelData();
        writer.flush();
        writer.close();
        System.writer.println(""done!"");
    }
",1,1,1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-1.419158208937872e-08,inFile:-8.514949253627231e-08,outFile:-2.8950827462332587e-07,iis:-2.0435878208705356e-07,dcmParser:-7.152557373046875e-07,ds:8.514949253627231e-08,pdReader:6.811959402901785e-08,out:-2.8099332536969867e-07,dcmEncParam:-5.108969552176339e-08,pdWriter:-3.9736429850260414e-08,",10,42,"dcmParser:dcmStatement,ds:db,pdReader:ddRunner,out:writer,pdWriter:PDEditor,iis: ii,inFile:docFilename,readAndRewrite:readAndResend,outFile:reportFilename,dcmEncParam:dcmEnParam,",Greedy,,
,,,,,,,,,,,,,,,
25,"['8000624', '4599372', '    private void CopyTo(File dest) throws IOException {\n        FileReader in = null;\n        FileWriter out = null;\n        int c;\n        try {\n            in = new FileReader(image);\n            out = new FileWriter(dest);\n            while ((c = in.read()) != -1) out.write(c);\n        } finally {\n            if (in != null) try {\n                in.close();\n            } catch (Exception e) {\n            }\n            if (out != null) try {\n                out.close();\n            } catch (Exception e) {\n            }\n        }\n    }\n', '    @Override\n    public String readFixString(final int len) {\n        if (len < 1) {\n            return StringUtils.EMPTY;\n        }\n        final StringWriter sw = new StringWriter();\n        try {\n            IOUtils.copy(createLimitedInputStream(len), sw, null);\n        } catch (IOException e) {\n            throw createRuntimeException(e);\n        }\n        return sw.toString();\n    }\n']",113,"    private void  CopyFrom(File cont) throws IOException {
        FileReader client = null;
        FileWriter writer = null;
        int current;
        try {
            client = new FileReader(image);
            writer = new FileWriter(cont);
            while ((current = client.read()) != -1) writer.write(current);
        } finally {
            if (client != null) try {
                client.close();
            } catch (Exception e) {
            }
            if (writer != null) try {
                writer.close();
            } catch (Exception e) {
            }
        }
    }
",1,1,1,-1,"CopyTo,dest,in,out,c","CopyTo:4.1350722312927246e-07,dest:2.8312206268310547e-07,in:1.5459954738616943e-06,out:9.313225746154785e-07,c:-1.1175870895385742e-07,",5,16,"dest:cont,out:writer,in:client,c:current,CopyTo: CopyFrom,",Greedy,,
,,,,,,,,,,,,,,,
26,"['5620792', '17729554', '    public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n', '    public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n        System.out.println("""");\n        boolean estado = false;\n        try {\n            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n            FileChannel canalDestino = salida.getChannel();\n            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n            rutaFicheroOrigen.close();\n            salida.close();\n            estado = true;\n        } catch (IOException e) {\n            System.out.println(""No se encontro el archivo"");\n            e.printStackTrace();\n            estado = false;\n        }\n        return estado;\n    }\n']",75,"    public static String HSOne(String path, int HASH_VAL_Size) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest metadata;
        metadata = MessageDigest.getInstance(""SHA-1"");
        byte[] sha5sum = new byte[HASH_VAL_Size];
        metadata.update(path.getBytes(""iso-8859-1""), 0, path.length());
        sha5sum = metadata.digest();
        return convertToHex(sha5sum);
    }
",0,0,0,-1,"SHA1,text,HASH_VALUE_SIZE,md,sha1hash","SHA1:2.1641071026141828e-05,text:2.063237703763522e-05,HASH_VALUE_SIZE:-2.2337986872746394e-05,md:-0.00014182237478402947,sha1hash:4.352056063138522e-05,",5,13,"md:metadata,sha1hash:sha5sum,text:path,HASH_VALUE_SIZE:HASH_VAL_Size,SHA1:HSOne,",Greedy,,
,,,,,,,,,,,,,,,
27,"['12349563', '12678045', '    public boolean resourceExists(String location) {\n        if ((location == null) || (location.length() == 0)) {\n            return false;\n        }\n        try {\n            URL url = buildURL(location);\n            URLConnection cxn = url.openConnection();\n            InputStream is = null;\n            try {\n                byte[] byteBuffer = new byte[2048];\n                is = cxn.getInputStream();\n                while (is.read(byteBuffer, 0, 2048) >= 0) ;\n                return true;\n            } finally {\n                if (is != null) {\n                    is.close();\n                }\n            }\n        } catch (IOException ex) {\n            return false;\n        }\n    }\n', '    private void addQDInformation() {\n        try {\n            long qdDate = System.currentTimeMillis();\n            if (_local == true) {\n                File qdFile = new File(""qdinfo.dat"");\n                if (!qdFile.exists()) {\n                    return;\n                }\n                qdDate = qdFile.lastModified();\n            }\n            if (qdDate > this._qdFileDate) {\n                this._qdFileDate = qdDate;\n                for (int ii = 0; ii < this._projectInfo.size(); ii++) {\n                    Information info = getInfo(ii);\n                    if (info != null) {\n                        info._qdValue = null;\n                    }\n                }\n                Reader reader = null;\n                if (_local == true) {\n                    reader = new FileReader(""qdinfo.dat"");\n                } else {\n                    StringBuffer urlName = new StringBuffer();\n                    urlName.append(""http://boston.quik.com/rph/"");\n                    urlName.append(""qdinfo.dat"");\n                    try {\n                        URL url = new URL(urlName.toString());\n                        InputStream stream = url.openStream();\n                        reader = new InputStreamReader(stream);\n                    } catch (MalformedURLException mue) {\n                        mue.printStackTrace();\n                    }\n                }\n                BufferedReader file = new BufferedReader(reader);\n                try {\n                    String line = null;\n                    while ((line = file.readLine()) != null) {\n                        if (line.startsWith(""pg "")) {\n                            this._qdDate = Long.parseLong(line.substring(3), 16);\n                            this._qdDate = (this._qdDate + 946684800) * 1000;\n                        } else if (line.startsWith(""pt "")) {\n                            line = line.substring(3).trim();\n                            int pos = -1;\n                            while ((line.length() > 0) && ((pos = line.indexOf(\' \')) > 0)) {\n                                int projectNum = 0;\n                                Double value = null;\n                                if (pos > 0) {\n                                    projectNum = Integer.parseInt(line.substring(0, pos));\n                                    line = line.substring(pos).trim();\n                                }\n                                pos = line.indexOf(\' \');\n                                if (pos > 0) {\n                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);\n                                    line = line.substring(pos).trim();\n                                }\n                                Information info = getInfo(projectNum);\n                                if (info == null) {\n                                    info = createInfo(projectNum);\n                                }\n                                if (info._qdValue == null) {\n                                    info._qdValue = value;\n                                }\n                            }\n                        }\n                    }\n                } finally {\n                    file.close();\n                }\n            }\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n    }\n']",126,"    public boolean  pathExists(String remote) {
        if ((remote == null) || (remote.length() == 0)) {
            return false;
        }
        try {
            URL google = buildURL(remote);
            URLConnection conn = google.openConnection();
            InputStream fs = null;
            try {
                byte[] byteMatrix = new byte[2048];
                fs = conn.getInputStream();
                while (fs.read(byteMatrix, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (fs != null) {
                    fs.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
",0,0,0,-1,"resourceExists,location,url,cxn,is,byteBuffer","resourceExists:-1.2349337339401245e-05,location:-0.00030624866485595703,url:-0.00010643154382705688,cxn:0.00021606683731079102,is:-0.00026263296604156494,byteBuffer:-4.106014966964722e-05,",6,16,"url:google,cxn:conn,location:remote,is:fs,resourceExists: pathExists,byteBuffer:byteMatrix,",Greedy,,
,,,,,,,,,,,,,,,
28,"['6963063', '22879400', '    public static void main(String args[]) {\n        int[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };\n        int sort = 0;\n        for (int j = 0; j < (mas.length); j++) {\n            for (int i = 0; i < mas.length - 1; i++) {\n                if (mas[i] > mas[i + 1]) {\n                    sort = mas[i];\n                    mas[i] = mas[i + 1];\n                    mas[i + 1] = sort;\n                }\n            }\n        }\n        for (int i = 0; i < mas.length; i++) {\n            System.out.print("" "" + mas[i]);\n        }\n    }\n', '    public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {\n        Assert.notNull(resourceName, ""Resource name must not be null"");\n        ClassLoader clToUse = classLoader;\n        if (clToUse == null) {\n            clToUse = ClassUtils.getDefaultClassLoader();\n        }\n        Properties properties = new Properties();\n        Enumeration urls = clToUse.getResources(resourceName);\n        while (urls.hasMoreElements()) {\n            URL url = (URL) urls.nextElement();\n            InputStream is = null;\n            try {\n                URLConnection con = url.openConnection();\n                con.setUseCaches(false);\n                is = con.getInputStream();\n                properties.load(is);\n            } finally {\n                if (is != null) {\n                    is.close();\n                }\n            }\n        }\n        return properties;\n    }\n']",160,"    public static void main(String args[]) {
        int[] mon = { 3, 5, 6, 9, 1, -3, -4, -88 };
        int lower = 0;
        for (int br = 0; br < (mon.length); br++) {
            for (int и = 0; и < mon.length - 1; и++) {
                if (mon[и] > mon[и + 1]) {
                    lower = mon[и];
                    mon[и] = mon[и + 1];
                    mon[и + 1] = sort;
                }
            }
        }
        for (int и = 0; и < mon.length; и++) {
            System.out.print("" "" + mon[и]);
        }
    }
",0,0,0,-1,"mas,sort,j,i","mas:-1.0053316752115885e-05,sort:-5.245208740234375e-07,j:-3.218650817871094e-07,i:-6.198883056640625e-06,",4,30,"mas:mon,i:и,j:br,sort:lower,",Greedy,,
,,,,,,,,,,,,,,,
29,"['6501291', '13783549', '    public static void extractFile(String input, String output) throws ZipException, IOException {\n        FileReader reader = new FileReader(input);\n        InputStream in = reader.getInputStream();\n        OutputStream out = new FileOutputStream(new File(output));\n        byte[] buf = new byte[512];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        reader.close();\n        out.close();\n    }\n', '    private static void copy(String sourceName, String destName) throws IOException {\n        File source = new File(sourceName);\n        File dest = new File(destName);\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n']",101,"    public static void extractFile(String url, String response) throws ZipException, IOException {
        FileReader mr = new FileReader(url);
        InputStream mc = mr.getInputStream();
        OutputStream obj = new FileOutputStream(new File(response));
        byte[] queue = new byte[512];
        int ls;
        while ((ls = mc.read(queue)) > 0) obj.write(queue, 0, ls);
        mr.close();
        obj.close();
    }
",1,1,0,1,"extractFile,input,output,reader,in,out,buf,len","extractFile:-4.391921193976151e-07,input:-2.133218865645559e-07,output:8.156425074527138e-07,reader:7.529007761101973e-08,in:1.6312850149054274e-07,out:-1.694026746247944e-07,buf:-8.846584119294819e-07,len:-8.846584119294819e-07,",7,18,"output:response,out:obj,in:mc,buf:queue,len:ls,input:url,reader:mr,",Greedy,,
,,,,,,,,,,,,,,,
30,"['21488868', '8182932', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n        LOG.info(""Unzipping zip file \'"" + file.getAbsolutePath() + ""\' to directory \'"" + targetDirectory.getAbsolutePath() + ""\'."");\n        assert (file.exists() && file.isFile());\n        if (targetDirectory.exists() == false) {\n            LOG.debug(""Creating target directory."");\n            if (targetDirectory.mkdirs() == false) {\n                throw new BusinessException(""Could not create target directory at \'"" + targetDirectory.getAbsolutePath() + ""\'!"");\n            }\n        }\n        ZipInputStream zipin = null;\n        try {\n            zipin = new ZipInputStream(new FileInputStream(file));\n            ZipEntry entry = null;\n            while ((entry = zipin.getNextEntry()) != null) {\n                LOG.debug(""Unzipping entry \'"" + entry.getName() + ""\'."");\n                if (entry.isDirectory()) {\n                    LOG.debug(""Skipping directory."");\n                    continue;\n                }\n                final File targetFile = new File(targetDirectory, entry.getName());\n                final File parentTargetFile = targetFile.getParentFile();\n                if (parentTargetFile.exists() == false) {\n                    LOG.debug(""Creating directory \'"" + parentTargetFile.getAbsolutePath() + ""\'."");\n                    if (parentTargetFile.mkdirs() == false) {\n                        throw new BusinessException(""Could not create target directory at \'"" + parentTargetFile.getAbsolutePath() + ""\'!"");\n                    }\n                }\n                InputStream input = null;\n                FileOutputStream output = null;\n                try {\n                    input = zipFile.getInputStream(entry);\n                    if (targetFile.createNewFile() == false) {\n                        throw new BusinessException(""Could not create target file \'"" + targetFile.getAbsolutePath() + ""\'!"");\n                    }\n                    output = new FileOutputStream(targetFile);\n                    int readBytes = 0;\n                    byte[] buffer = new byte[BUFFER_SIZE];\n                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n                        output.write(buffer, 0, readBytes);\n                    }\n                } finally {\n                    FileUtil.closeCloseable(input);\n                    FileUtil.closeCloseable(output);\n                }\n            }\n        } catch (IOException e) {\n            throw new BusinessException(""Could not unzip file \'"" + file.getAbsolutePath() + ""\'!"", e);\n        } finally {\n            FileUtil.closeCloseable(zipin);\n        }\n    }\n']",194,"    public static boolean encodeFiletoStream(String outfilename, String outfilename) {
        boolean  successful = false;
        java.io.InputStream form = null;
        java.io.OutputStream OU = null;
        try {
            form = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfilename)), Base64.ENCODE);
            OU = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfilename));
            byte[] batch = new byte[65536];
            int through = -1;
            while ((through = form.through(batch)) >= 0) {
                OU.write(batch, 0, through);
            }
             successful = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                form.close();
            } catch (Exception exc) {
            }
            try {
                OU.close();
            } catch (Exception exc) {
            }
        }
        return  successful;
    }
",1,1,1,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:1.9177146579908289e-07,infile:-5.183012589164402e-08,outfile:-7.256217624830164e-08,in:1.0987986689028533e-06,out:-1.2439230213994565e-07,buffer:-4.6647113302479615e-08,read:5.183012589164402e-07,success:-3.109807553498641e-08,",8,23,"infile:outfilename,in:form,outfile:outfilename,out:OU,encodeFileToFile:encodeFiletoStream,buffer:batch,read:through,success: successful,",Greedy,,
,,,,,,,,,,,,,,,
31,"['7872659', '1473212', '    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n', '    @Test\n    public void test_validate_geo_getEvents() {\n        try {\n            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");\n            File schemaLocation = new File(""tes.xsd"");\n            Schema schema = factory.newSchema(schemaLocation);\n            Validator validator = schema.newValidator();\n            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026"");\n            InputStream inputStream = url.openStream();\n            Source source = new StreamSource(inputStream);\n            validator.validate(source);\n        } catch (IOException ex) {\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(""File not found"", true);\n        } catch (SAXException ex) {\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(""Schema did not validate"", true);\n        }\n        assertTrue(true);\n    }\n']",385,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",0,0,0,-1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile","genCustRatingFileAndMovieIndexFile:4.899011899347174e-09,completePath:3.266007932898116e-08,masterFile:1.3064031731592465e-08,CustRatingFileName:0.0,MovieIndexFileName:1.9596047597388698e-08,inFile:6.5320158657962325e-09,inC:5.878814279216609e-08,outFile1:1.9596047597388698e-08,outC1:8.491620625535102e-08,outFile2:3.2660079328981163e-09,outC2:4.409110709412457e-08,fileSize:5.388913089281892e-08,totalNoDataRows:1.6330039664490581e-09,mappedBuffer:2.776106742963399e-07,startIndex:7.838419038955479e-08,count:1.3064031731592465e-07,currentMovie:8.981521815469819e-08,movieName:1.9596047597388698e-08,customer:9.798023798694349e-09,rating:1.3064031731592465e-08,outBuf1:1.3717233318172088e-07,outBuf2:4.082509916122645e-08,endOfIndexFile:0.0,",0,0,"completePath:completePath,masterFile:masterFile,inFile:inFile,MovieIndexFileName:MovieIndexFileName,outFile1:outFile1,CustRatingFileName:CustRatingFileName,outFile2:outFile2,inC:inC,fileSize:fileSize,mappedBuffer:mappedBuffer,genCustRatingFileAndMovieIndexFile:genCustRatingFileAndMovieIndexFile,outC1:outC1,outC2:outC2,totalNoDataRows:totalNoDataRows,outBuf1:outBuf1,startIndex:startIndex,count:count,currentMovie:currentMovie,movieName:movieName,customer:customer,rating:rating,endOfIndexFile:endOfIndexFile,outBuf2:outBuf2,",Greedy,,
,,,,,,,,,,,,,,,
32,"['9449064', '20019847', '    public static void main(String[] args) {\n        try {\n            boolean readExp = Utils.getFlag(\'l\', args);\n            final boolean writeExp = Utils.getFlag(\'s\', args);\n            final String expFile = Utils.getOption(\'f\', args);\n            if ((readExp || writeExp) && (expFile.length() == 0)) {\n                throw new Exception(""A filename must be given with the -f option"");\n            }\n            Experiment exp = null;\n            if (readExp) {\n                FileInputStream fi = new FileInputStream(expFile);\n                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));\n                exp = (Experiment) oi.readObject();\n                oi.close();\n            } else {\n                exp = new Experiment();\n            }\n            System.err.println(""Initial Experiment:\\n"" + exp.toString());\n            final JFrame jf = new JFrame(""Weka Experiment Setup"");\n            jf.getContentPane().setLayout(new BorderLayout());\n            final SetupPanel sp = new SetupPanel();\n            jf.getContentPane().add(sp, BorderLayout.CENTER);\n            jf.addWindowListener(new WindowAdapter() {\n\n                public void windowClosing(WindowEvent e) {\n                    System.err.println(""\\nFinal Experiment:\\n"" + sp.m_Exp.toString());\n                    if (writeExp) {\n                        try {\n                            FileOutputStream fo = new FileOutputStream(expFile);\n                            ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));\n                            oo.writeObject(sp.m_Exp);\n                            oo.close();\n                        } catch (Exception ex) {\n                            ex.printStackTrace();\n                            System.err.println(""Couldn\'t write experiment to: "" + expFile + \'\\n\' + ex.getMessage());\n                        }\n                    }\n                    jf.dispose();\n                    System.exit(0);\n                }\n            });\n            jf.pack();\n            jf.setVisible(true);\n            System.err.println(""Short nap"");\n            Thread.currentThread().sleep(3000);\n            System.err.println(""Done"");\n            sp.setExperiment(exp);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            System.err.println(ex.getMessage());\n        }\n    }\n', '    public static void copyFile(File source, File target) throws IOException {\n        FileChannel in = (new FileInputStream(source)).getChannel();\n        FileChannel out = (new FileOutputStream(target)).getChannel();\n        in.transferTo(0, source.length(), out);\n        in.close();\n        out.close();\n    }\n']",389,"    public static void main(String[] args) {
        try {
            boolean ReadLoc = Utils.getFlag('l', args);
            final boolean  writeXP = Utils.getFlag('s', args);
            final String docField = Utils.getOption('f', args);
            if ((ReadLoc ||  writeXP) && (docField.length() == 0)) {
                throw new Exception(""A filename must be given with the -f option"");
            }
            Experiment  resp = null;
            if (ReadLoc) {
                FileInputStream Fi = new FileInputStream(docField);
                ObjectInputStream multi = new ObjectInputStream(new BufferedInputStream(Fi));
                 resp = (Experiment) multi.readObject();
                multi.close();
            } else {
                 resp = new Experiment();
            }
            System.err.println(""Initial Experiment:
"" + exp.toString());
            final JFrame  jfp = new JFrame(""Weka Experiment Setup"");
             jfp.getContentPane().setLayout(new BorderLayout());
            final SetupPanel cp = new SetupPanel();
             jfp.getContentPane().add(cp, BorderLayout.CENTER);
             jfp.addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent fe) {
                    System.err.println(""
Final Experiment:
"" + sp.m_Exp.toString());
                    if ( writeXP) {
                        try {
                            FileOutputStream ico = new FileOutputStream(docField);
                            ObjectOutputStream folio = new ObjectOutputStream(new BufferedOutputStream(ico));
                            folio.writeObject(cp.m_Exp);
                            folio.close();
                        } catch (Exception event) {
                            event.printStackTrace();
                            System.err.println(""Couldn't write experiment to: "" + docField + '
' + ex.getMessage());
                        }
                    }
                     jfp.dispose();
                    System.exit(0);
                }
            });
             jfp.pack();
             jfp.setVisible(true);
            System.err.println(""Short nap"");
            Thread.currentThread().sleep(3000);
            System.err.println(""Done"");
            cp.setExperiment( resp);
        } catch (Exception event) {
            event.printStackTrace();
            System.err.println(event.getMessage());
        }
    }
",1,1,1,-1,"readExp,writeExp,expFile,exp,fi,oi,jf,sp,e,fo,oo,ex","readExp:-1.617840358189174e-07,writeExp:-2.724783761160714e-07,expFile:-3.1221480596633185e-07,exp:-4.54130626860119e-07,fi:-1.9868214925130207e-07,oi:-3.150531223842076e-07,jf:-4.172325134277344e-07,sp:-3.633045014880952e-07,e:-3.9736429850260414e-08,fo:-8.514949253627231e-08,oo:-2.980232238769531e-07,ex:-2.696400596981957e-07,",12,42,"readExp:ReadLoc,e:fe,oo:folio,expFile:docField,exp: resp,fi:Fi,ex:event,writeExp: writeXP,oi:multi,sp:cp,fo:ico,jf: jfp,",Greedy,,
,,,,,,,,,,,,,,,
33,"['19849797', '2807585', '    public static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n', '    private static String encodeMd5(String key) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.reset();\n            md.update(key.getBytes());\n            byte[] bytes = md.digest();\n            String result = toHexString(bytes);\n            return result;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n']",116,,0,0,,-3,"copyFile,sourceFile,destFile,source,destination",,,,,Greedy,,
,,,,,,,,,,,,,,,
34,"['7143591', '9267602', '    public void getWebByUrl(String strUrl, String charset, String fileIndex) {\n        try {\n            System.out.println(""Getting web by url: "" + strUrl);\n            addReport(""Getting web by url: "" + strUrl + ""\\n"");\n            URL url = new URL(strUrl);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            InputStream is = null;\n            is = url.openStream();\n            String filePath = fPath + ""/web"" + fileIndex + "".htm"";\n            PrintWriter pw = null;\n            FileOutputStream fos = new FileOutputStream(filePath);\n            OutputStreamWriter writer = new OutputStreamWriter(fos);\n            pw = new PrintWriter(writer);\n            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));\n            StringBuffer sb = new StringBuffer();\n            String rLine = null;\n            String tmp_rLine = null;\n            while ((rLine = bReader.readLine()) != null) {\n                tmp_rLine = rLine;\n                int str_len = tmp_rLine.length();\n                if (str_len > 0) {\n                    sb.append(""\\n"" + tmp_rLine);\n                    pw.println(tmp_rLine);\n                    pw.flush();\n                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);\n                }\n                tmp_rLine = null;\n            }\n            is.close();\n            pw.close();\n            System.out.println(""Get web successfully! "" + strUrl);\n            addReport(""Get web successfully! "" + strUrl + ""\\n"");\n            addWebSuccessed();\n        } catch (Exception e) {\n            System.out.println(""Get web failed!       "" + strUrl);\n            addReport(""Get web failed!       "" + strUrl + ""\\n"");\n            addWebFailed();\n        }\n    }\n', '    public static void main(String[] args) throws IOException {\n        String urltext = ""http://www.vogella.de"";\n        URL url = new URL(urltext);\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String inputLine;\n        while ((inputLine = in.readLine()) != null) {\n            System.out.println(inputLine);\n        }\n        in.close();\n    }\n']",292,"    public void getWebFromString(String volURL, String chorset, String ileIndex) {
        try {
            System.out.println(""Getting web by url: "" + volURL);
            addReport(""Getting web by url: "" + volURL + ""
"");
            URL cert = new URL(volURL);
            URLConnection ca = cert.openConnection();
            ca.setDoOutput(true);
            InputStream iris = null;
            iris = cert.openStream();
            String FileFile = fPath + ""/web"" + ileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(FileFile);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader rbR = new BufferedReader(new InputStreamReader(iris));
            StringBuffer sb = new StringBuffer();
            String  rFrame = null;
            String tmp_rLine = null;
            while (( rFrame = rbR.readLine()) != null) {
                tmp_rLine =  rFrame;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""
"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(volURL) < webDepth) getUrlByString(tmp_rLine, volURL);
                }
                tmp_rLine = null;
            }
            iris.close();
            pw.close();
            System.out.println(""Get web successfully! "" + volURL);
            addReport(""Get web successfully! "" + volURL + ""
"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + volURL);
            addReport(""Get web failed!       "" + volURL + ""
"");
            addWebFailed();
        }
    }
",1,1,0,1,"getWebByUrl,strUrl,charset,fileIndex,url,conn,is,filePath,pw,fos,writer,bReader,sb,rLine,tmp_rLine,str_len","getWebByUrl:-1.0096296972158003e-07,strUrl:1.8708559931540977e-05,charset:1.1032941390056998e-06,fileIndex:3.953369296326929e-06,url:3.2569680895124164e-05,conn:1.272619987020687e-05,is:7.634260216537786e-06,filePath:3.1602625944176496e-06,pw:-5.054230592688736e-06,fos:2.805067568409199e-06,writer:2.1579314251335297e-06,bReader:-6.301062447684152e-07,sb:1.8173334549884406e-06,rLine:-1.3881800126056282e-05,tmp_rLine:-4.076227849843551e-05,str_len:-7.989455242546237e-06,",10,30,"fileIndex:ileIndex,filePath:FileFile,bReader:rbR,rLine: rFrame,strUrl:volURL,url:cert,conn:ca,getWebByUrl:getWebFromString,charset:chorset,is:iris,",Greedy,,
,,,,,,,,,,,,,,,
35,"['18489832', '17974661', '    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n        URLConnection urlConnection = url.openConnection();\n        File tmpFile = null;\n        try {\n            tmpFile = File.createTempFile(""remoteLib_"", null);\n            InputStream in = null;\n            FileOutputStream out = null;\n            try {\n                in = urlConnection.getInputStream();\n                out = new FileOutputStream(tmpFile);\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n                if (in != null) {\n                    in.close();\n                }\n            }\n            unzip(tmpFile, destDir);\n        } finally {\n            if (tmpFile != null) {\n                tmpFile.delete();\n            }\n        }\n        URL localURL = destDir.toURI().toURL();\n        return localURL;\n    }\n', '    public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {\n        HttpClient client = new SSLHttpClient();\n        StringBuilder builder = new StringBuilder(url).append(""?"" + SESSION_PARAM + ""="" + sessionId).append(""&"" + CMD_PARAM + ""="" + CMD_SERVERMODIF);\n        HttpGet method = httpGetMethod(builder.toString());\n        try {\n            HttpResponse response = client.execute(method);\n            Header header = response.getFirstHeader(HEADER_NAME);\n            if (header != null && HEADER_VALUE.equals(header.getValue())) {\n                int code = response.getStatusLine().getStatusCode();\n                if (code == HttpStatus.SC_OK) {\n                    long expectedLength = response.getEntity().getContentLength();\n                    InputStream is = response.getEntity().getContent();\n                    FileUtils.writeInFile(is, out, expectedLength);\n                    return true;\n                } else {\n                    throw new SynchronizationException(""Command \'receive\' : HTTP error code returned."" + code, SynchronizationException.ERROR_RECEIVE);\n                }\n            } else {\n                throw new SynchronizationException(""HTTP header is invalid"", SynchronizationException.ERROR_RECEIVE);\n            }\n        } catch (Exception e) {\n            throw new SynchronizationException(""Command \'receive\' -> "", e, SynchronizationException.ERROR_RECEIVE);\n        }\n    }\n']",153,"    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
",0,0,0,-1,"downLoadZippedFile,url,destDir,urlConnection,tmpFile,in,out,localURL","downLoadZippedFile:-1.87983879676232e-07,url:-8.161251361553486e-07,destDir:-5.777065570537861e-07,urlConnection:6.418961745042068e-08,tmpFile:4.4015737680288464e-07,in:4.584972675030048e-07,out:-4.81422130878155e-07,localURL:9.169945350060097e-08,",0,0,"tmpFile:tmpFile,url:url,urlConnection:urlConnection,destDir:destDir,localURL:localURL,in:in,out:out,downLoadZippedFile:downLoadZippedFile,",Greedy,,
,,,,,,,,,,,,,,,
36,"['4481712', '14464131', '    public void deleteObject(String id) throws SQLException {\n        boolean selfConnection = true;\n        Connection conn = null;\n        PreparedStatement stmt = null;\n        try {\n            if (dbConnection == null) {\n                DatabaseConn dbConn = new DatabaseConn();\n                conn = dbConn.getConnection();\n                conn.setAutoCommit(false);\n            } else {\n                conn = dbConnection;\n                selfConnection = false;\n            }\n            stmt = conn.prepareStatement(this.deleteSql);\n            stmt.setString(1, id);\n            stmt.executeUpdate();\n            if (selfConnection) conn.commit();\n        } catch (Exception e) {\n            if (selfConnection && conn != null) conn.rollback();\n            throw new SQLException(e.getMessage());\n        } finally {\n            if (stmt != null) {\n                stmt.close();\n                stmt = null;\n            }\n            if (selfConnection && conn != null) {\n                conn.close();\n                conn = null;\n            }\n        }\n    }\n', '    public static void main(String[] args) {\n        try {\n            URL url = new URL(""http://hostname:80"");\n            URLConnection conn = url.openConnection();\n            for (int i = 0; ; i++) {\n                String headerName = conn.getHeaderFieldKey(i);\n                String headerValue = conn.getHeaderField(i);\n                if (headerName == null && headerValue == null) {\n                    break;\n                }\n                if (headerName == null) {\n                }\n            }\n        } catch (Exception e) {\n        }\n    }\n']",181,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
",0,0,0,-1,"deleteObject,id,conn,stmt,dbConn,selfConnection","deleteObject:-1.3921942029680523e-06,id:-1.9243785313197544e-06,conn:-6.537778036934989e-05,stmt:-2.0876526832580566e-05,dbConn:-1.9243785313197544e-06,selfConnection:-1.2623412268502371e-05,",0,0,"conn:conn,stmt:stmt,deleteObject:deleteObject,id:id,dbConn:dbConn,selfConnection:selfConnection,",Greedy,,
,,,,,,,,,,,,,,,
37,"['17202158', '5759961', '    static HashSet<Integer> readZoneIDs(String zoneFileName) {\n        HashSet<Integer> zoneids = new HashSet<Integer>();\n        try {\n            URL url = zoneFileName.getClass().getResource(zoneFileName);\n            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));\n        } catch (Exception xc) {\n            xc.printStackTrace();\n        }\n        return zoneids;\n    }\n', '    @Override\n    public User saveUser(User user) {\n        try {\n            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");\n            digest.update(user.getPassword().getBytes(""UTF-8""));\n            byte[] hash = digest.digest();\n            BigInteger bigInt = new BigInteger(1, hash);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = ""0"" + hashtext;\n            }\n            user.setPassword(hashtext);\n            user.setDataRegjistrimit(new Date());\n            return em.merge(user);\n        } catch (Exception e) {\n            throw new NestedException(e.getMessage(), e);\n        }\n    }\n']",108,"    static HashSet<Integer> readLineIDS(String ZonefileSource) {
        HashSet<Integer> elementlines = new HashSet<Integer>();
        try {
            URL build = ZonefileSource.getClass().getResource(ZonefileSource);
            LineNumberReader linrar = new LineNumberReader(new InputStreamReader(build.openStream()));
            String word = null;
            while ((word = linrar.readLine()) != null) elementlines.add(Integer.parseInt(word));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return elementlines;
    }
",0,0,0,-1,"readZoneIDs,zoneFileName,zoneids,url,lnr,line","readZoneIDs:-9.749616895403181e-07,zoneFileName:-1.7357724053519113e-05,zoneids:-7.395233426775251e-06,url:-2.4284635271344864e-05,lnr:7.254736764090401e-06,line:-1.551849501473563e-05,",6,14,"zoneFileName:ZonefileSource,url:build,lnr:linrar,zoneids:elementlines,line:word,readZoneIDs:readLineIDS,",Greedy,,
,,,,,,,,,,,,,,,
38,"['10728243', '481364', '    private byte[] scramble411(String password, String seed) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(""SHA-1"");\n            byte[] passwordHashStage1 = md.digest(password.getBytes());\n            md.reset();\n            byte[] passwordHashStage2 = md.digest(passwordHashStage1);\n            md.reset();\n            md.update(seed.getBytes());\n            md.update(passwordHashStage2);\n            byte[] toBeXord = md.digest();\n            int numToXor = toBeXord.length;\n            for (int i = 0; i < numToXor; i++) {\n                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);\n            }\n            return toBeXord;\n        } catch (NoSuchAlgorithmException e) {\n            if (logger.isLoggable(Level.SEVERE)) {\n                logger.log(Level.SEVERE, e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n', '    private void downloadFiles() {\n        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {\n\n            Date startDownloadDate;\n\n            @Override\n            public Double doInBackground() {\n                startDownloadDate = new Date();\n                refreshSpeed = 0;\n                lastDate = null;\n                try {\n                    int totalSizeRead = 0;\n                    int totalNumberRead = 0;\n                    for (RaphPhotoGalleryPhoto photo : photoList) {\n                        URL url = new URL(getCodeBase().toString() + photo.getUrl());\n                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                        DataInputStream dis = new DataInputStream(connection.getInputStream());\n                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());\n                        byte[] b = new byte[65536];\n                        int sizeRead;\n                        photo.setProcessedSize(0);\n                        totalNumberRead++;\n                        while ((sizeRead = dis.read(b)) > -1) {\n                            fos.write(b, 0, sizeRead);\n                            totalSizeRead += sizeRead;\n                            photo.addToProcessedSize(sizeRead);\n                            photo.setTotalProcessedSize(totalSizeRead);\n                            photo.setTotalProcessedNumber(totalNumberRead);\n                            publish(photo);\n                            try {\n                            } catch (Exception ignore) {\n                            }\n                        }\n                        fos.close();\n                    }\n                } catch (MalformedURLException e1) {\n                    System.err.println(""MalformedURLException: "" + e1);\n                } catch (IOException e2) {\n                    System.err.println(""IOException: "" + e2);\n                }\n                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();\n                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);\n                return new Double(totalSpeed);\n            }\n\n            @Override\n            protected void process(List<RaphPhotoGalleryPhoto> list) {\n                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);\n                progressBarTotal.setMaximum(photoListTotalSize);\n                progressBarTotal.setValue(photo.getTotalProcessedSize());\n                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());\n                progressBarCurrent.setMaximum(photo.getFileSize());\n                progressBarCurrent.setValue(photo.getProcessedSize());\n                progressBarCurrentLabel.setText(photo.getFileName());\n                long diffTime = 0;\n                if (lastDate == null) lastDate = new Date();\n                diffTime = (new Date()).getTime() - lastDate.getTime();\n                if (diffTime > 1000) {\n                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);\n                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));\n                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();\n                    double speed = 0;\n                    for (Double d : lastSpeed) {\n                        speed += d.doubleValue();\n                    }\n                    speed = Math.round(speed / lastSpeed.size());\n                    if (refreshSpeed == 0) {\n                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();\n                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);\n                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;\n                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;\n                    } else {\n                        refreshSpeed--;\n                        remainingTime -= diffTime / 1000.0;\n                    }\n                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");\n                    lastDate = new Date();\n                    lastTotalSize = photo.getTotalProcessedSize();\n                }\n            }\n\n            @Override\n            protected void done() {\n                try {\n                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));\n                    downloadButton.setText(getParameter(""i18n_finished""));\n                    downloadState = 2;\n                } catch (Exception ignore) {\n                }\n            }\n        };\n        downloadFilesWorker.execute();\n    }\n']",185,"    private byte[] scramblepassword(String email, String sql) {
        MessageDigest metadata;
        try {
            metadata = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashstage5 = metadata.digest(email.getBytes());
            metadata.reset();
            byte[] passwordSaltStage2 = metadata.digest(passwordHashstage5);
            metadata.reset();
            metadata.update(sql.getBytes());
            metadata.update(passwordSaltStage2);
            byte[] toBeTxord = metadata.digest();
            int numToYOR = toBeTxord.length;
            for (int si = 0; si < numToYOR; si++) {
                toBeTxord[si] = (byte) (toBeTxord[si] ^ passwordHashstage5[si]);
            }
            return toBeTxord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
",0,0,0,-1,"scramble411,password,seed,md,passwordHashStage1,passwordHashStage2,toBeXord,numToXor,i","scramble411:1.341104507446289e-07,password:1.2516975402832031e-06,seed:4.991888999938965e-07,md:1.0209158062934875e-05,passwordHashStage1:1.821666955947876e-06,passwordHashStage2:1.0207295417785645e-06,toBeXord:1.8719583749771118e-06,numToXor:-1.0803341865539551e-07,i:-2.246350049972534e-06,",9,32,"password:email,md:metadata,passwordHashStage1:passwordHashstage5,i:si,passwordHashStage2:passwordSaltStage2,scramble411:scramblepassword,seed:sql,toBeXord:toBeTxord,numToXor:numToYOR,",Greedy,,
,,,,,,,,,,,,,,,
39,"['12389873', '19378010', '    private void load() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            ClearData.clearTables(stmt);\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, \'Living Thing\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, \'Inanimate Object\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, \'Dog\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, \'Sheltie\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, \'Eskimo\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, \'Person\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, \'Collar\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, \'Ball\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, \'Fido\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, \'Samantha\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, \'A collar\')"");\n            stmt.executeQuery(""select setval(\'objects_objectid_seq\', 1000)"");\n            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values (\'hasa\', 2)"");\n            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values (\'partof\', 2)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, \'isa\', 1)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, \'isa\', 1)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, \'isa\', 100)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, \'isa\', 300)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, \'isa\', 300)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, \'isa\', 100)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, \'isa\', 200)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, \'isa\', 200)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, \'instance\', 400)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, \'instance\', 500)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, \'instance\', 800)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, \'hasa\', 801)"");\n            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values (\'color\')"");\n            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values (\'weight\')"");\n            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values (\'length\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'green\', \'color\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'blue\', \'color\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'light\', \'weight\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'heavy\', \'weight\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'short\', \'length\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'long\', \'length\')"");\n            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, \'light\')"");\n            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, \'short\')"");\n            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, \'blue\')"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'LEFT-WALL\', \'1\', \'AV+ | NP+\', 1)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'the\', \'1\', \'D+\', 1)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'big\', \'1\', \'ADJ+\', 400)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'dog\', \'1\', \'[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)\', 700)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'run\', \'1\', \'[S-] & AV- & [PREP+]\', 800)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'across\', \'1\', \'PREP- & PO+\', 800)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'street\', \'1\', \'[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)\', 800)"");\n            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values (\'with\', 100, \'hasa\')"");\n            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values (\'in\', 200, \'partof\')"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 1, \'good\', \'best\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 2, \'*y\', \'*iest\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 3, \'*e\', \'*est\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 4, \'*\', \'*est\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 1, \'good\', \'better\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 2, \'*y\', \'*ier\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 3, \'*e\', \'*er\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 4, \'*\', \'*er\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'possessive\', 1, \'*s\', \'*s\\\\\'\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'possessive\', 2, \'*\', \'*\\\\\'s\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 1, \'be\', \'being\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 2, \'*Vy\', \'*Vying\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 3, \'*c\', \'*cking\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 4, \'*VVC\', \'*VVCing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 5, \'*VC\', \'*VCCing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 6, \'*ie\', \'*ying\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 7, \'*e\', \'*ing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 8, \'*\', \'*ing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 1, \'sing\', \'sang\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 2, \'give\', \'gave\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 3, \'swim\', \'swam\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 4, \'have\', \'had\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 5, \'run\', \'ran\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 6, \'do\', \'did\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 7, \'be\', \'was\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 8, \'throw\', \'threw\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 9, \'sleep\', \'slept\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 10, \'*c\', \'*cked\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 11, \'*VVC\', \'*VVCed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 12, \'*VC\', \'*VCCed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 13, \'*y\', \'*ied\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 14, \'*oe\', \'*oed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 15, \'*e\', \'*ed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 16, \'*\', \'*ed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 1, \'sing\', \'sung\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 2, \'give\', \'given\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 3, \'swim\', \'swum\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 4, \'have\', \'had\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 5, \'do\', \'done\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 6, \'be\', \'been\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 7, \'sleep\', \'slept\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 8, \'*e\', \'*ed\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 9, \'*\', \'*ed\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first singular\', 1, \'be\', \'am\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first singular\', 2, \'have\', \'have\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first singular\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'second singular\', 1, \'be\', \'are\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'second singular\', 2, \'have\', \'have\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'second singular\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 1, \'be\', \'is\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 2, \'have\', \'has\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 3, \'do\', \'do\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 4, \'*ch\', \'*ches\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 5, \'*sh\', \'*shes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 6, \'*x\', \'*xes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 7, \'*z\', \'*zes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 8, \'*Cy\', \'*Cies\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 9, \'*s\', \'*ses\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 10, \'*o\', \'*oes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 11, \'*\', \'*s\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first plural\', 1, \'be\', \'are\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first plural\', 2, \'have\', \'have\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first plural\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third plural\', 1, \'be\', \'are\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third plural\', 2, \'have\', \'have\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third plural\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 1, \'leaf\', \'leaves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 2, \'knife\', \'knives\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 3, \'elf\', \'elves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 4, \'half\', \'halves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 5, \'loaf\', \'loaves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 6, \'shelf\', \'shelves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 7, \'wife\', \'wives\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 8, \'person\', \'people\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 9, \'deer\', \'deer\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 10, \'child\', \'children\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 11, \'*Co\', \'*Coes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 12, \'*s\', \'*ses\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 13, \'*ch\', \'*ches\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 14, \'*sh\', \'*shes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 15, \'*x\', \'*xes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 16, \'*z\', \'*zes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 17, \'*Cy\', \'*Cies\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 18, \'*\', \'*s\', TRUE)"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, \'$N[.N]\', \'D+\', 100, \'money\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, \'N/N/N\', \'D+\', 200, \'date\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, \'[/](C/)C\', \'D+\', 300, \'unix path\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, \'[A:](C\\\\\\\\)C\', \'D+\', 400, \'dos path\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, \'N:N\', \'D+\', 500, \'time\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, \'N.N.N.N\', \'D+\', 600, \'internet\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, \'E(.E)\', \'D+\', 700, \'hostname\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, \'{+-}N[.N]\', \'D+\', 800, \'number\')"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'i\', 1, 3, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'we\', 1, 3, TRUE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'they\', 3, 3, TRUE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'he\', 3, 1, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'she\', 3, 2, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'it\', 3, 3, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'you\', 2, 3, FALSE)"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'actor\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'origin\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'destination\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'object\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'instrument\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'beneficiary\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'location\')"");\n            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values (\'throw\', \'actor\', \'destination\', \'object\')"");\n            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values (\'melt\', \'actor\', \'\', \'\')"");\n            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values (\'kill\', \'actor\', \'\', \'object\')"");\n            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values (\'with\', 200, \'instrument\')"");\n            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values (\'at\', 1, \'location\')"");\n            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values (\'the\', 1)"");\n            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values (\'a\', 2)"");\n            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values (\'an\', 2)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'S\', 1)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PN\', 2)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'DO\', 3)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'IO\', 4)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PO\', 5)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'NP\', 6)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'AV\', 7)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'LV\', 8)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PREP\', 9)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'D\', 10)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'ADJ\', 11)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'ADV\', 12)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'CONJ\', 13)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'INTJ\', 14)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PA\', 15)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'HV\', 16)"");\n            stmt.executeQuery(""select setval(\'instructions_instructionid_seq\', 1)"");\n            int next = 2;\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'throw\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'test\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, \'actor\', 1, \'hasa\', \'300\', \'\')"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, \'instrument\', 3, null, null, \'blue\')"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'get\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'drop\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");\n            stmt.executeQuery(""select setval(\'transactions_transactionid_seq\', 1)"");\n            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", \'throw something\')"");\n            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", \'get something\')"");\n            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", \'drop something\')"");\n            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, \'actor\', 1, \'hasa\', \'object\', \'\', 3)"");\n            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, \'object\', 4, \'\', \'\', \'heavy\', 4)"");\n            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, \'object\', "" + (next + 6) + "")"");\n            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, \'destination\', "" + (next + 5) + "")"");\n            stmt.executeQuery(""select setval(\'verbtransactions_verbid_seq\', 1)"");\n            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values (\'throw\', 2, 2)"");\n            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, \'object\', 200)"");\n            stmt.executeUpdate(""update SystemProperties set value = \'Play Data\' where name = \'DB Data Version\'"");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }\n', '    public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException {\n        final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath);\n        final Multimap<String, String> proteins = HashMultimap.create();\n        for (final String query : queries) {\n            HttpURLConnection connection = null;\n            try {\n                final String encoded = URLEncoder.encode(query.trim(), ""UTF-8"");\n                final URL url = new URL(String.format(__urlTempl2, encoded, taxon));",,,,,,,,,,,,,,
,,,,,,,,,,,,,,,
"n                connection = (HttpURLConnection) url.openConnection();\n                connection.setConnectTimeout(__connTimeout);\n                connection.setReadTimeout(__readTimeout);\n                connection.setRequestProperty(""""Connection"""""," """"close"""");\n                connection.connect();\n                final InputStream stream = connection.getInputStream();\n                final Document doc = parser.parse(stream);\n                final NodeList nodes = (NodeList) xpe.evaluate(doc", XPathConstants.NODESET);\n                if (nodes != null) {\n                    final int n = nodes.getLength();\n                    for (int i = 0; i < n; i++) {\n                        final Node node = nodes.item(i);\n                        proteins.put(node.getTextContent().trim()," query.trim());\n                    }\n                }\n            } catch (final Exception ex) {\n                continue;\n            } finally {\n                if (connection != null) connection.disconnect();\n            }\n        }\n        return proteins;\n    }\n']""",1689,"    private void load() throws SQLException {
        Connection col = null;
        Statement histmt = null;
        try {
            col = FidoDataSource.getConnection();
            col.setAutoCommit(false);
            histmt = col.createStatement();
            ClearData.clearTables(histmt);
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            histmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            histmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            histmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            histmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            histmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            histmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            histmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            histmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            histmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            histmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            histmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            histmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            histmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            histmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            histmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            histmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            histmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            histmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            histmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            histmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            histmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            histmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            histmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            histmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            histmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            histmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            histmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            histmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            histmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            histmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            histmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            histmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            histmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            histmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            histmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            histmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            histmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            histmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            histmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            histmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            histmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            histmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            histmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            histmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            histmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            histmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            histmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            histmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            histmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            histmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            histmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            histmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            histmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            histmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            histmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            histmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            histmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            histmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            histmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            histmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            histmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            histmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            histmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            histmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            histmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            histmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            histmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            histmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            histmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            histmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            histmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            histmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            histmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            histmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            histmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            histmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            histmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            col.commit();
        } catch (SQLException e) {
            if (col != null) col.rollback();
            throw e;
        } finally {
            if (histmt != null) histmt.close();
            if (col != null) col.close();
        }
    }
",0,0,0,-1,"load,conn,stmt","load:-5.5503407749561e-08,conn:-2.6231512017206315e-06,stmt:-0.00018738825386817304,",2,217,450,3.275006139
,,,,,,,,,,,,,,,
40,"['13233761', '17773263', '    public void executeUpdateTransaction(List queries) throws SQLException {\n        assert connection != null;\n        boolean autoCommit = connection.getAutoCommit();\n        connection.setAutoCommit(false);\n        try {\n            Iterator iterator = queries.iterator();\n            while (iterator.hasNext()) {\n                String query = (String) iterator.next();\n                Statement statement = connection.createStatement();\n                statement.executeUpdate(query);\n            }\n            connection.commit();\n            connection.setAutoCommit(autoCommit);\n        } catch (SQLException e) {\n            connection.rollback();\n            throw new SQLException(e.getMessage());\n        }\n    }\n', '    public boolean visar() throws SQLException, ClassNotFoundException, Exception {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        Date fechaSystem = new Date();\n        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");\n        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");\n        DateFormat sss = new SimpleDateFormat(""S"");\n        String ss = sss.format(fechaSystem);\n        if (ss.length() > 2) {\n            ss = ss.substring(0, 2);\n        }\n        boolean visado = false;\n        try {\n            conn = ToolsBD.getConn();\n            conn.setAutoCommit(false);\n            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA=\'S\' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";\n            ps = conn.prepareStatement(sentenciaSql);\n            ps.setString(1, usuarioVisado);\n            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\n            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n            int contador = 4;\n            if (hayVisadoExtracto) {\n                ps.setString(contador++, ""X"");\n            }\n            if (hayVisadoRemitente) {\n                ps.setString(contador++, ""X"");\n            }\n            ps.setInt(contador++, oficina);\n            ps.setInt(contador++, numeroRegistro);\n            ps.setInt(contador++, anoSalida);\n            ps.setString(contador++, fechaModificacion);\n            ps.setString(contador++, horaModificacion);\n            int registrosAfectados = ps.executeUpdate();\n            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\n                visado = true;\n            }\n            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\n                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n                if (generado) {\n                    visado = actualizarBZSALIDA(conn);\n                }\n                String rem = """";\n                String com = """";\n                if (hayVisadoRemitente) {\n                    if (!remitente.trim().equals("""")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");\n                        valor.remove();\n                    }\n                } else {\n                    if (!altres.trim().equals("""")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");\n                        valor.remove();\n                    }\n                }\n                if (hayVisadoExtracto) {\n                    com = extracto;\n                } else {\n                    com = comentario;\n                }\n                try {\n                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");\n                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };\n                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };\n                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);\n                    metodo.invoke(null, params);\n                } catch (IllegalAccessException iae) {\n                } catch (IllegalArgumentException iae) {\n                } catch (InvocationTargetException ite) {\n                } catch (NullPointerException npe) {\n                } catch (ExceptionInInitializerError eiie) {\n                } catch (NoSuchMethodException nsme) {\n                } catch (SecurityException se) {\n                } catch (LinkageError le) {\n                } catch (ClassNotFoundException le) {\n                }\n            }\n            conn.commit();\n            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n            String Stringsss = sss.format(fechaSystem);\n            switch(Stringsss.length()) {\n                case (1):\n                    Stringsss = ""00"" + Stringsss;\n                    break;\n                case (2):\n                    Stringsss = ""0"" + Stringsss;\n                    break;\n            }\n            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\n            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, \'S\', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n        } catch (Exception e) {\n            System.out.println(""Error: "" + e.getMessage());\n            e.printStackTrace();\n            visado = false;\n            try {\n                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");\n            } catch (Exception ex) {\n                System.out.println(""Error: "" + e.getMessage());\n                ex.printStackTrace();\n            }\n        } finally {\n            ToolsBD.closeConn(conn, ps, null);\n        }\n        return visado;\n    }\n']",120,"    public void startQueryTask(List aquenges) throws SQLException {
        assert connection != null;
        boolean autoDebate = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator loop = aquenges.loop();
            while (loop.hasNext()) {
                String version = (String) loop.next();
                Statement state = connection.createStatement();
                state.executeUpdate(version);
            }
            connection.commit();
            connection.setAutoCommit(autoDebate);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
",1,1,1,-1,"executeUpdateTransaction,queries,autoCommit,iterator,query,statement","executeUpdateTransaction:-1.5588907095102165e-06,queries:1.2562825129582332e-05,autoCommit:4.6124825110802285e-06,iterator:1.9403604360727164e-05,query:2.356675954965445e-06,statement:6.64821037879357e-06,",6,13,"executeUpdateTransaction:startQueryTask,queries:aquenges,autoCommit:autoDebate,iterator:loop,query:version,statement:state,",Greedy,,
,,,,,,,,,,,,,,,
41,"['21642215', '9267602', '    private int addIDs(PeakListRow row, String name) {\n        {\n            BufferedReader in = null;\n            try {\n                String urlName = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + name;\n                URL url = new URL(urlName);\n                in = new BufferedReader(new InputStreamReader(url.openStream()));\n                String inputLine, score = ""0"";\n                while ((inputLine = in.readLine()) != null) {\n                    String metaboliteID = """";\n                    if (inputLine.contains(""href=\\""Metabolites/"")) {\n                        String[] dataScore = inputLine.split(""</td><td>"");\n                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);\n                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\\""Metabolites/"") + 18, inputLine.indexOf(""aspx\\"">"") + 4);\n                        urlName = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteID;\n                        inputLine = in.readLine();\n                        inputLine = in.readLine();\n                        String[] data = inputLine.split(""</td><td>"");\n                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");\n                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\n                        break;\n                    } else if (inputLine.contains(""href=\\""Analytes/"")) {\n                        String[] dataScore = inputLine.split(""</td><td>"");\n                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);\n                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\\""Analytes/"") + 15, inputLine.indexOf(""aspx\\"">"") + 4);\n                        urlName = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteID;\n                        inputLine = in.readLine();\n                        inputLine = in.readLine();\n                        String[] data = inputLine.split(""</td><td>"");\n                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");\n                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\n                        break;\n                    } else if (inputLine.contains(""href=\\""ReferenceSubstances/"")) {\n                        String[] dataScore = inputLine.split(""</td><td>"");\n                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);\n                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\\""ReferenceSubstances/"") + 26, inputLine.indexOf(""aspx\\"">"") + 4);\n                        urlName = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteID;\n                        inputLine = in.readLine();\n                        inputLine = in.readLine();\n                        String[] data = inputLine.split(""</td><td>"");\n                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");\n                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);\n                        break;\n                    }\n                }\n                in.close();\n                urlName = searchMetabolite(urlName);\n                if (urlName != null && urlName.contains("".aspx"")) {\n                    url = new URL(urlName);\n                    in = new BufferedReader(new InputStreamReader(url.openStream()));\n                    while ((inputLine = in.readLine()) != null) {\n                        if (inputLine.contains(""<meta http-equiv=\\""keywords\\"" content="")) {\n                            String line = inputLine.substring(inputLine.indexOf(""<meta http-equiv=\\""keywords\\"" content="") + 37, inputLine.indexOf(""\\"" /></head>""));\n                            String[] names = line.split("", "");\n                            for (String id : names) {\n                                if (id.contains(""PubChem"")) {\n                                    id = id.substring(id.indexOf(""PubChem"") + 8);\n                                    String pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());\n                                    if (pubChem.length() == 0) {\n                                        pubChem += id;\n                                    } else {\n                                        pubChem += "", "" + id;\n                                    }\n                                    row.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);\n                                } else if (id.contains(""ChEBI"")) {\n                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);\n                                    row.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);\n                                } else if (id.contains(""KEGG"")) {\n                                    id = id.substring(id.indexOf(""KEGG:"") + 6);\n                                    row.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);\n                                } else if (id.contains(""CAS"")) {\n                                    id = id.substring(id.indexOf(""CAS:"") + 5);\n                                    row.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);\n                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {\n                                } else {\n                                    String synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());\n                                    if (synonym.length() == 0) {\n                                        synonym += id;\n                                    } else {\n                                        synonym += "" // "" + id;\n                                    }\n                                    synonym = synonym.replaceAll(""&amp;#39;"", ""\'"");\n                                    row.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    in.close();\n                }\n                return Integer.parseInt(score);\n            } catch (IOException ex) {\n                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);\n                return 0;\n            }\n        }\n    }\n', '    public static void main(String[] args) throws IOException {\n        String urltext = ""http://www.vogella.de"";\n        URL url = new URL(urltext);\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String inputLine;\n        while ((inputLine = in.readLine()) != null) {\n            System.out.println(inputLine);\n        }\n        in.close();\n    }\n']",993,"    private int processID(PeakListRow report, String ame) {
        {
            BufferedReader sql = null;
            try {
                String implNames = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + ame;
                URL reader = new URL(implNames);
                sql = new BufferedReader(new InputStreamReader(reader.openStream()));
                String statusLine, search = ""0"";
                while ((statusLine = sql.readLine()) != null) {
                    String metaboliteid = """";
                    if (statusLine.contains(""href=\""Metabolites/"")) {
                        String[] divSize = statusLine.split(""</td><td>"");
                        search = divSize[0].substring(divSize[0].indexOf(""<td>"") + 4);
                        metaboliteid = statusLine.substring(statusLine.indexOf(""href=\""Metabolites/"") + 18, statusLine.indexOf(""aspx\"">"") + 4);
                        implNames = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteid;
                        statusLine = sql.readLine();
                        statusLine = sql.readLine();
                        String[] params = statusLine.split(""</td><td>"");
                        String molecularweight = params[params.length - 1].replaceAll(""&nbsp;"", """");
                        report.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularweight);
                        break;
                    } else if (statusLine.contains(""href=\""Analytes/"")) {
                        String[] divSize = statusLine.split(""</td><td>"");
                        search = divSize[0].substring(divSize[0].indexOf(""<td>"") + 4);
                        metaboliteid = statusLine.substring(statusLine.indexOf(""href=\""Analytes/"") + 15, statusLine.indexOf(""aspx\"">"") + 4);
                        implNames = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteid;
                        statusLine = sql.readLine();
                        statusLine = sql.readLine();
                        String[] params = statusLine.split(""</td><td>"");
                        String molecularweight = params[params.length - 1].replaceAll(""&nbsp;"", """");
                        report.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularweight);
                        break;
                    } else if (statusLine.contains(""href=\""ReferenceSubstances/"")) {
                        String[] divSize = statusLine.split(""</td><td>"");
                        search = divSize[0].substring(divSize[0].indexOf(""<td>"") + 4);
                        metaboliteid = statusLine.substring(statusLine.indexOf(""href=\""ReferenceSubstances/"") + 26, statusLine.indexOf(""aspx\"">"") + 4);
                        implNames = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteid;
                        statusLine = sql.readLine();
                        statusLine = sql.readLine();
                        String[] params = statusLine.split(""</td><td>"");
                        String molecularweight = params[params.length - 1].replaceAll(""&nbsp;"", """");
                        report.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularweight);
                        break;
                    }
                }
                sql.close();
                implNames = searchMetabolite(implNames);
                if (implNames != null && implNames.contains("".aspx"")) {
                    reader = new URL(implNames);
                    sql = new BufferedReader(new InputStreamReader(reader.openStream()));
                    while ((statusLine = sql.readLine()) != null) {
                        if (statusLine.contains(""<meta http-equiv=\""keywords\"" content="")) {
                            String line = statusLine.substring(statusLine.indexOf(""<meta http-equiv=\""keywords\"" content="") + 37, statusLine.indexOf(""\"" /></head>""));
                            String[] names = line.split("", "");
                            for (String id : names) {
                                if (id.contains(""PubChem"")) {
                                    id = id.substring(id.indexOf(""PubChem"") + 8);
                                    String pubChem = (String) report.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());
                                    if (pubChem.length() == 0) {
                                        pubChem += id;
                                    } else {
                                        pubChem += "", "" + id;
                                    }
                                    report.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);
                                } else if (id.contains(""ChEBI"")) {
                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);
                                    report.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);
                                } else if (id.contains(""KEGG"")) {
                                    id = id.substring(id.indexOf(""KEGG:"") + 6);
                                    report.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);
                                } else if (id.contains(""CAS"")) {
                                    id = id.substring(id.indexOf(""CAS:"") + 5);
                                    report.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);
                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {
                                } else {
                                    String synonym = (String) report.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());
                                    if (synonym.length() == 0) {
                                        synonym += id;
                                    } else {
                                        synonym += "" // "" + id;
                                    }
                                    synonym = synonym.replaceAll(""&amp;#39;"", ""'"");
                                    report.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);
                                }
                            }
                            break;
                        }
                    }
                    sql.close();
                }
                return Integer.parseInt(search);
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return 0;
            }
        }
    }
",1,1,1,-1,"addIDs,row,name,in,urlName,url,inputLine,score,metaboliteID,dataScore,data,molecularWeight","addIDs:-2.152389950222439e-07,row:1.0927518208821614e-07,name:6.865572046350549e-07,in:4.649162292480469e-06,urlName:-2.1347293147334346e-05,url:1.94620203088831e-05,inputLine:-0.00012855507709361887,score:-4.715941570423267e-06,metaboliteID:-9.42636419225622e-07,dataScore:-1.6132990519205727e-05,data:-5.56806723276774e-06,molecularWeight:-3.4703148735894097e-06,",12,108,"in:sql,inputLine:statusLine,url:reader,metaboliteID:metaboliteid,score:search,dataScore:divSize,data:params,molecularWeight:molecularweight,name:ame,urlName:implNames,addIDs:processID,row:report,",Greedy,,
,,,,,,,,,,,,,,,
42,"['16825994', '19096138', '    public int run(String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(""Download dir local"");\n            return 1;\n        }\n        OutputStream out = new FileOutputStream(args[1]);\n        Path srcDir = new Path(args[0]);\n        Configuration conf = new Configuration();\n        FileSystem srcFS = FileSystem.get(conf);\n        if (!srcFS.getFileStatus(srcDir).isDirectory()) {\n            System.err.println(args[0] + "" is not a directory."");\n            return 1;\n        }\n        try {\n            FileStatus contents[] = srcFS.listStatus(srcDir);\n            for (int i = 0; i < contents.length; i++) {\n                if (contents[i].isFile()) {\n                    System.err.println(contents[i].getPath());\n                    InputStream in = srcFS.open(contents[i].getPath());\n                    try {\n                        IOUtils.copyBytes(in, out, conf, false);\n                    } finally {\n                        in.close();\n                    }\n                }\n            }\n        } finally {\n            out.close();\n        }\n        return 0;\n    }\n', '    public static void main(String[] args) {\n        String logFileName = args[0];\n        int extractLineEvery = new Integer(args[1]).intValue();\n        String filterToken = ""P0"";\n        if (args.length > 2) {\n            filterToken = args[2];\n        }\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(logFileName));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));\n            String readLine;\n            int x = 0;\n            while ((readLine = br.readLine()) != null) {\n                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n                    bw.write(readLine + ""\\n"");\n                }\n            }\n            bw.flush();\n            bw.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",227,"    public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream all = new FileOutputStream(args[1]);
        Path distDir = new Path(args[0]);
        Configuration local = new Configuration();
        FileSystem sourceLS = FileSystem.get(local);
        if (!sourceLS.getFileStatus(distDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus consent[] = sourceLS.listStatus(distDir);
            for (int и = 0; и < contents.length; и++) {
                if (consent[и].isFile()) {
                    System.err.println(consent[и].getPath());
                    InputStream ini = sourceLS.open(consent[и].getPath());
                    try {
                        IOUtils.copyBytes(ini, all, local, false);
                    } finally {
                        ini.close();
                    }
                }
            }
        } finally {
            all.close();
        }
        return 0;
    }
",1,1,1,-1,"run,out,srcDir,conf,srcFS,contents,i,in","run:-8.940696716308594e-08,out:-2.0435878208705356e-07,srcDir:-1.6604151044573102e-07,conf:-5.236693790980747e-07,srcFS:7.152557373046875e-07,contents:-2.980232238769531e-07,i:-7.152557373046875e-07,in:3.3208302089146204e-07,",7,27,"out:all,i:и,srcDir:distDir,conf:local,srcFS:sourceLS,in:ini,run:run,contents:consent,",Greedy,,
,,,,,,,,,,,,,,,
43,"['12236729', '2668634', '        private void copy(File inputFile, File outputFile) throws Exception {\n            FileReader in = new FileReader(inputFile);\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n        }\n', '    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n        File tempFile = null;\n        JarFile jin = null;\n        JarOutputStream jout = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(outputName);\n            System.out.println(""portletApplicationName = "" + portletApplicationName);\n            tempFile = File.createTempFile(""webmill-delpoy-"", """");\n            tempFile.deleteOnExit();\n            jin = new JarFile(inputName);\n            jout = new JarOutputStream(new FileOutputStream(tempFile));\n            Document webXml = null;\n            Document portletXml = null;\n            Document contextXml = null;\n            ZipEntry src;\n            InputStream source;\n            Enumeration zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(""Found web.xml"");\n                        webXml = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(""Found WEB-INF/portlet.xml"");\n                        portletXml = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(""Found META-INF/context.xml"");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (webXml == null) {\n                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");\n            }\n            if (portletXml == null) {\n                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");\n            }\n            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n            webRewriter.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            jin = new JarFile(inputName);\n            zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    String fullTarget = \'/\' + target;\n                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {\n                        System.out.println(""Skip logger "" + target);\n                        continue;\n                    } else {\n                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n                            System.out.println(""Skip portlet tld file "" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(""Skip web.xml file "" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(""Skip portlet.xml file "" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(""Skip context.xml file "" + target);\n                            continue;\n                        }\n                        System.out.println(""Add file "" + target);\n                    }\n                    addFile(target, source, jout);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, webXml, jout);\n            addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n            addFile(META_INF_CONTEXT_XML, contextXml, jout);\n            System.out.println(""Attempting to add portlet.tld to war..."");\n            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");\n            if (is == null) {\n                System.out.println(""Failed to find portlet.tld in classpath"");\n            } else {\n                String portletTldFile = webRewriter.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == \'/\') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(""Adding file "" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, jout);\n                } finally {\n                    is.close();\n                }\n            }\n            jout.close();\n            jin.close();\n            jin = null;\n            jout = null;\n            System.out.println(""Creating war "" + outputName + "" ..."");\n            System.out.flush();\n            srcChannel = new FileInputStream(tempFile).getChannel();\n            dstChannel = new FileOutputStream(outputName).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            tempFile.delete();\n            tempFile = null;\n            System.out.println(""War "" + outputName + "" created"");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (jin != null) {\n                try {\n                    jin.close();\n                    jin = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (jout != null) {\n                try {\n                    jout.close();\n                    jout = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (tempFile != null && tempFile.exists()) {\n                tempFile.delete();\n            }\n        }\n    }\n']",70,"        private void  download(File outputPath, File outFilename) throws Exception {
            FileReader reader = new FileReader(outputPath);
            FileWriter cache = new FileWriter(outFilename);
            int f;
            while ((f = reader.read()) != -1) cache.write(f);
            reader.close();
            cache.close();
        }
",1,1,1,-1,"copy,inputFile,outputFile,in,out,c","copy:5.449567522321428e-07,inputFile:1.0728836059570312e-06,outputFile:5.279268537248883e-07,in:2.2479466029575893e-06,out:1.2772423880440847e-06,c:6.386211940220424e-07,",6,14,"inputFile:outputPath,in:reader,outputFile:outFilename,out:cache,c:f,copy: download,",Greedy,,
,,,,,,,,,,,,,,,
44,"['23672408', '23452437', '    private void copyIconFiles(UmlClass clazz) {\n        if (clazz.hasAnnotation(""icon16"")) {\n            String i16 = clazz.annotationValue(""icon16"");\n            String fileType = "".png"";\n            if (i16.endsWith("".jpg"")) fileType = "".jpg"";\n            if (i16.endsWith("".gif"")) fileType = "".gif"";\n            String desti16 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;\n            try {\n                FileChannel src = new FileInputStream(i16).getChannel();\n                FileChannel dst = new FileOutputStream(desti16).getChannel();\n                dst.transferFrom(src, 0, src.size());\n                src.close();\n                dst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (clazz.hasAnnotation(""icon32"")) {\n            String i32 = clazz.annotationValue(""icon32"");\n            String fileType = "".png"";\n            if (i32.endsWith("".jpg"")) fileType = "".jpg"";\n            if (i32.endsWith("".gif"")) fileType = "".gif"";\n            String desti32 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;\n            try {\n                FileChannel src = new FileInputStream(i32).getChannel();\n                FileChannel dst = new FileOutputStream(desti32).getChannel();\n                dst.transferFrom(src, 0, src.size());\n                src.close();\n                dst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '        private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {\n            if (fSource.getName().equals(""Thums.db"")) return;\n            System.out.println(""copying "" + fSource + "" in "" + file);\n            OutputStream o = new BufferedOutputStream(new FileOutputStream(file));\n            InputStream i = new BufferedInputStream(new FileInputStream(fSource));\n            byte[] b = new byte[8192];\n            int n;\n            while ((n = i.read(b)) > 0) o.write(b, 0, n);\n            i.close();\n            o.close();\n        }\n']",286,"    private void copyiconDocuments(UmlClass clojure) {
        if (clojure.hasAnnotation(""icon16"")) {
            String ri157 = clojure.annotationValue(""icon16"");
            String formatTime = "".png"";
            if (ri157.endsWith("".jpg"")) formatTime = "".jpg"";
            if (ri157.endsWith("".gif"")) formatTime = "".gif"";
            String resulti216 = output_dir + ""/../resources/images/"" + clojure.getName() + ""16"" + formatTime;
            try {
                FileChannel cont = new FileInputStream(ri157).getChannel();
                FileChannel dst = new FileOutputStream(resulti216).getChannel();
                dst.transferFrom(cont, 0, cont.size());
                cont.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clojure.hasAnnotation(""icon32"")) {
            String  i28 = clojure.annotationValue(""icon32"");
            String formatTime = "".png"";
            if ( i28.endsWith("".jpg"")) formatTime = "".jpg"";
            if ( i28.endsWith("".gif"")) formatTime = "".gif"";
            String targeti30 = output_dir + ""/../resources/images/"" + clojure.getName() + ""32"" + formatTime;
            try {
                FileChannel cont = new FileInputStream( i28).getChannel();
                FileChannel dst = new FileOutputStream(targeti30).getChannel();
                dst.transferFrom(cont, 0, cont.size());
                cont.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",1,1,1,-1,"copyIconFiles,clazz,i16,fileType,desti16,src,dst,i32,desti32","copyIconFiles:1.2488592238653272e-07,clazz:7.152557373046875e-07,i16:3.633045014880952e-07,fileType:8.855547223772321e-07,desti16:2.838316417875744e-08,src:8.855547223772321e-07,dst:-5.108969552176339e-08,i32:3.4059797014508927e-08,desti32:-3.4059797014508927e-08,",8,36,"clazz:clojure,i16:ri157,fileType:formatTime,desti16:resulti216,i32: i28,desti32:targeti30,src:cont,dst:dst,copyIconFiles:copyiconDocuments,",Greedy,,
,,,,,,,,,,,,,,,
45,"['14188043', '3375718', '    public static byte[] openHttpResult(String urlPath, boolean retry) throws IOException {\n        AQUtility.debug(""net"", urlPath);\n        URL url = new URL(urlPath);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setUseCaches(false);\n        connection.setInstanceFollowRedirects(true);\n        connection.setConnectTimeout(NET_TIMEOUT);\n        int code = connection.getResponseCode();\n        if (code == 307 && retry) {\n            String redirect = connection.getHeaderField(""Location"");\n            return openHttpResult(redirect, false);\n        }\n        if (code == -1 && retry) {\n            return openHttpResult(urlPath, false);\n        }\n        AQUtility.debug(""response"", code);\n        if (code == -1 || code < 200 || code >= 300) {\n            throw new IOException();\n        }\n        byte[] result = AQUtility.toBytes(connection.getInputStream());\n        return result;\n    }\n', '    public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {\n        pAndamento.delimitarIntervaloDeVariacao(0, 49);\n        WSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);\n        pAndamento.delimitarIntervaloDeVariacao(50, 100);\n        if (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {\n            String sql = ""INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)"";\n            OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n            int quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;\n            try {\n                int quantidadeDeRegistrosImportados = 0;\n                int numeroDoRegistro = 0;\n                for (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {\n                    ++numeroDoRegistro;\n                    stmtDestino.clearParameters();\n                    int ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();\n                    Calendar calendario = Calendar.getInstance();\n                    calendario.clear();\n                    calendario.set(ano, mes, dia);\n                    java.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());\n                    BigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();\n                    stmtDestino.setDateAtName(""DATA"", vDATA);\n                    stmtDestino.setBigDecimalAtName(""PRECO"", vPRECO);\n                    int contagemDasInsercoes = stmtDestino.executeUpdate();\n                    quantidadeDeRegistrosImportados++;\n                    double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;\n                    pAndamento.setPercentualCompleto((int) percentualCompleto);\n                }\n                conDestino.commit();\n            } catch (Exception ex) {\n                conDestino.rollback();\n                throw ex;\n            } finally {\n                if (stmtDestino != null && (!stmtDestino.isClosed())) {\n                    stmtDestino.close();\n                }\n            }\n        }\n        pAndamento.setPercentualCompleto(100);\n    }\n']",176,"    public static byte[] openhttpResult(String UrlString, boolean pretrier) throws IOException {
        AQUtility.debug(""net"", UrlString);
        URL http = new URL(UrlString);
        HttpURLConnection statement = (HttpURLConnection) http.openConnection();
        statement.setUseCaches(false);
        statement.setInstanceFollowRedirects(true);
        statement.setConnectTimeout(NET_TIMEOUT);
        int ie = statement.getResponseCode();
        if (ie == 307 && pretrier) {
            String redirect = statement.getHeaderField(""Location"");
            return openhttpResult(redirect, false);
        }
        if (ie == -1 && pretrier) {
            return openhttpResult(UrlString, false);
        }
        AQUtility.debug(""response"", ie);
        if (ie == -1 || ie < 200 || ie >= 300) {
            throw new IOException();
        }
        byte[] value = AQUtility.toBytes(statement.getInputStream());
        return value;
    }
",0,0,1,1,"openHttpResult,urlPath,retry,url,connection,code,redirect,result","openHttpResult:-9.157061576843263e-05,urlPath:0.00014115174611409504,retry:0.0002921044826507568,url:-9.625752766927084e-05,connection:-0.00045609076817830404,code:0.0017631828784942627,redirect:0.00018060604731241862,result:-1.5079975128173828e-05,",7,28,"openHttpResult:openhttpResult,urlPath:UrlString,retry:pretrier,url:http,connection:statement,result:value,redirect:redirect,code:ie,",Greedy,,
,,,,,,,,,,,,,,,
46,"['10131427', '14598566', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n', '    public static void copyFileByNIO(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n']",69,"    public static void CopyStream(File cin, File log) throws IOException {
        FileChannel resourceConnection = new FileInputStream(cin).getChannel();
        FileChannel DestinationContext = new FileOutputStream(log).getChannel();
        resourceConnection.transferTo(0, resourceConnection.size(), DestinationContext);
        resourceConnection.close();
        DestinationContext.close();
    }
",1,1,1,-1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:3.625949223836263e-07,in:1.0927518208821614e-06,out:7.351239522298176e-07,sourceChannel:6.556510925292969e-07,destinationChannel:-4.023313522338867e-07,",5,12,"in:cin,sourceChannel:resourceConnection,out:log,destinationChannel:DestinationContext,copyFile:CopyStream,",Greedy,,
,,,,,,,,,,,,,,,
47,"['10385815', '6421904', '    public static void copy(String fileFrom, String fileTo) throws IOException {\n        FileInputStream inputStream = null;\n        FileOutputStream outputStream = null;\n        FileChannel inputChannel = null;\n        FileChannel outputChannel = null;\n        try {\n            inputStream = new FileInputStream(fileFrom);\n            outputStream = new FileOutputStream(fileTo);\n            inputChannel = inputStream.getChannel();\n            outputChannel = outputStream.getChannel();\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } finally {\n            try {\n                inputChannel.close();\n            } finally {\n                try {\n                    outputChannel.close();\n                } finally {\n                    try {\n                        inputStream.close();\n                    } finally {\n                        outputStream.close();\n                    }\n                }\n            }\n        }\n    }\n', '    public DataRecord addRecord(InputStream input) throws DataStoreException {\n        File temporary = null;\n        try {\n            temporary = newTemporaryFile();\n            DataIdentifier tempId = new DataIdentifier(temporary.getName());\n            usesIdentifier(tempId);\n            long length = 0;\n            MessageDigest digest = MessageDigest.getInstance(DIGEST);\n            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n            try {\n                length = IOUtils.copyLarge(input, output);\n            } finally {\n                output.close();\n            }\n            DataIdentifier identifier = new DataIdentifier(digest.digest());\n            File file;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                file = getFile(identifier);\n                if (!file.exists()) {\n                    File parent = file.getParentFile();\n                    parent.mkdirs();\n                    if (temporary.renameTo(file)) {\n                        temporary = null;\n                    } else {\n                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n                    }\n                }\n                if (file.length() != length) {\n                    if (!file.isFile()) {\n                        throw new IOException(""Not a file: "" + file);\n                    }\n                    throw new IOException(DIGEST + "" collision: "" + file);\n                }\n            }\n            inUse.remove(tempId);\n            return new FileDataRecord(identifier, file);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + "" not available"", e);\n        } catch (IOException e) {\n            throw new DataStoreException(""Could not add record"", e);\n        } finally {\n            if (temporary != null) {\n                temporary.delete();\n            }\n        }\n    }\n']",131,"    public static void upload(String sampleStart, String ileTarget) throws IOException {
        FileInputStream InputFile = null;
        FileOutputStream webStream = null;
        FileChannel createStream = null;
        FileChannel successConnection = null;
        try {
            InputFile = new FileInputStream(sampleStart);
            webStream = new FileOutputStream(ileTarget);
            createStream = InputFile.getChannel();
            successConnection = webStream.getChannel();
            createStream.transferTo(0, createStream.size(), successConnection);
        } finally {
            try {
                createStream.close();
            } finally {
                try {
                    successConnection.close();
                } finally {
                    try {
                        InputFile.close();
                    } finally {
                        webStream.close();
                    }
                }
            }
        }
    }
",1,1,1,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel","copy:8.669766512784091e-08,fileFrom:9.753487326882103e-08,fileTo:5.418604070490057e-08,inputStream:1.9506974653764206e-07,outputStream:-2.1674416281960228e-08,inputChannel:-1.354651017622514e-07,outputChannel:-3.2511624422940344e-07,",7,22,"fileFrom:sampleStart,inputStream:InputFile,fileTo:ileTarget,outputStream:webStream,inputChannel:createStream,outputChannel:successConnection,copy:upload,",Greedy,,
,,,,,,,,,,,,,,,
48,"['19584877', '5414088', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n        String fileName = file.getFileName();\n        String assetsPath = FileFactory.getRealAssetsRootPath();\n        new java.io.File(assetsPath).mkdir();\n        java.io.File workingFile = getAssetIOFile(file);\n        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n        if (destination != null && destination.getInode() > 0) {\n            FileInputStream is = new FileInputStream(workingFile);\n            FileChannel channelFrom = is.getChannel();\n            java.io.File newVersionFile = getAssetIOFile(destination);\n            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n            channelFrom.transferTo(0, channelFrom.size(), channelTo);\n            channelTo.force(false);\n            channelTo.close();\n            channelFrom.close();\n        }\n        if (newDataFile != null) {\n            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n            writeCurrentChannel.truncate(0);\n            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n            writeCurrentChannel.force(false);\n            writeCurrentChannel.close();\n            fromChannel.close();\n            if (UtilMethods.isImage(fileName)) {\n                BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n                int height = img.getHeight();\n                file.setHeight(height);\n                int width = img.getWidth();\n                file.setWidth(width);\n            }\n            String folderPath = workingFile.getParentFile().getAbsolutePath();\n            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n            java.io.File directory = new java.io.File(folderPath);\n            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n            for (java.io.File iofile : files) {\n                try {\n                    iofile.delete();\n                } catch (SecurityException e) {\n                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");\n                } catch (Exception e) {\n                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());\n                }\n            }\n        }\n    }\n']",194,"    public static boolean encodeFiletoStream(String outfilename, String outfilename) {
        boolean  successful = false;
        java.io.InputStream form = null;
        java.io.OutputStream OU = null;
        try {
            form = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfilename)), Base64.ENCODE);
            OU = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfilename));
            byte[] batch = new byte[65536];
            int through = -1;
            while ((through = form.through(batch)) >= 0) {
                OU.write(batch, 0, through);
            }
             successful = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                form.close();
            } catch (Exception exc) {
            }
            try {
                OU.close();
            } catch (Exception exc) {
            }
        }
        return  successful;
    }
",1,1,1,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:1.5549037767493207e-07,infile:-7.256217624830164e-08,outfile:-7.256217624830164e-08,in:8.914781653362771e-07,out:8.292820142663043e-08,buffer:1.5549037767493206e-08,read:4.975692085597826e-07,success:4.6647113302479615e-08,",8,23,"infile:outfilename,in:form,outfile:outfilename,out:OU,encodeFileToFile:encodeFiletoStream,buffer:batch,read:through,success: successful,",Greedy,,
,,,,,,,,,,,,,,,
49,"['22855019', '8801182', '    public static MessageService getMessageService(String fileId) {\n        MessageService ms = null;\n        if (serviceCache == null) init();\n        if (serviceCache.containsKey(fileId)) return serviceCache.get(fileId);\n        Properties p = new Properties();\n        try {\n            URL url = I18nPlugin.getFileURL(fileId);\n            p.load(url.openStream());\n            ms = new MessageService(p);\n        } catch (Exception e) {\n            ms = new MessageService();\n        }\n        serviceCache.put(fileId, ms);\n        return ms;\n    }\n', '    private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {\n        Properties list = new Properties();\n        list.load(new FileInputStream(fileWithListOfImages));\n        long current = 0;\n        long startTime = System.currentTimeMillis();\n        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);\n        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");\n        System.out.println(""Images with the same size as the \'no-image\' image are ignored and not displayed"");\n        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {\n            String urlString = it.next().toString().replace(\'\\\\\', \'/\');\n            if (urlString.contains(""="")) throw new Exception(""Symbol \'=\' found in file names, while it is reserved for denoting \'/\' in flat-file names"");\n        }\n        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {\n            String urlString = it.next().toString().replace(\'\\\\\', \'/\');\n            URL url = new URL(uriPrefix + urlString);\n            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));\n            current++;\n            if (!file.exists()) {\n                try {\n                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);\n                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);\n                    int c;\n                    while ((c = in.read()) != -1) {\n                        out.write(c);\n                    }\n                    out.close();\n                    in.close();\n                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");\n                    System.out.println(""saved"");\n                } catch (Exception e) {\n                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());\n                }\n            } else {\n                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");\n                System.out.println(""already exists"");\n            }\n            if (current / 100 == current / 100.0) {\n                long delta = (System.currentTimeMillis() - startTime);\n                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");\n            }\n        }\n        long delta = (System.currentTimeMillis() - startTime);\n        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");\n    }\n']",109,"    public static MessageService readMessageService(String imageIn) {
        MessageService sm = null;
        if (serviceCache == null) init();
        if (serviceCache.containsKey(imageIn)) return serviceCache.get(imageIn);
        Properties pl = new Properties();
        try {
            URL log = I18nPlugin.getFileURL(imageIn);
            pl.load(log.openStream());
            sm = new MessageService(pl);
        } catch (Exception e) {
            sm = new MessageService();
        }
        serviceCache.put(imageIn, sm);
        return sm;
    }
",0,0,0,-1,"getMessageService,fileId,ms,p,url","getMessageService:-2.9802322387695312e-08,fileId:3.725290298461914e-07,ms:-1.4901161193847656e-07,p:-1.7881393432617188e-07,url:-1.1920928955078125e-07,",5,16,"fileId:imageIn,url:log,ms:sm,p:pl,getMessageService:readMessageService,",Greedy,,
,,,,,,,,,,,,,,,
50,"['8046691', '23677142', '    private void retrieveFile(URL url, RSLink link) {\n        link.setStatus(RSLink.STATUS_DOWNLOADING);\n        HttpURLConnection httpConn = null;\n        DataOutputStream outs = null;\n        BufferedInputStream bins = null;\n        BufferedOutputStream bouts = null;\n        try {\n            String postData = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");\n            httpConn = (HttpURLConnection) url.openConnection();\n            httpConn.setRequestMethod(""POST"");\n            httpConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");\n            httpConn.setRequestProperty(""Content-Length"", """" + Integer.toString(postData.getBytes().length));\n            httpConn.setRequestProperty(""Content-Language"", ""en-US"");\n            httpConn.setDoOutput(true);\n            httpConn.setDoInput(true);\n            outs = new DataOutputStream(httpConn.getOutputStream());\n            outs.writeBytes(postData);\n            outs.flush();\n            Pattern mimePattern = Pattern.compile("".+/html.+"");\n            Matcher matcher = mimePattern.matcher(httpConn.getContentType());\n            if (matcher.find()) {\n                log(""Can not download, maybe all RS slots are busy!"");\n                return;\n            }\n            link.setSize(httpConn.getContentLength());\n            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);\n            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);\n            link.setStatus(RSLink.STATUS_DOWNLOADING);\n            link.setDown(0);\n            byte[] byteBuffer = new byte[4096];\n            int count;\n            while ((count = bins.read(byteBuffer)) != -1) {\n                bouts.write(byteBuffer, 0, count);\n                link.setDown(link.getDown() + count);\n                if (!Main.start.get()) {\n                    link.setStatus(RSLink.STATUS_NOTHING);\n                    return;\n                }\n            }\n            link.setStatus(RSLink.STATUS_DONE);\n        } catch (IOException ex) {\n            log(""I/O Exception!"");\n            link.setStatus(RSLink.STATUS_NOTHING);\n        } finally {\n            try {\n                if (outs != null) outs.close();\n                if (bouts != null) bouts.close();\n                if (bins != null) bins.close();\n            } catch (IOException ex) {\n                JOptionPane.showMessageDialog(null, ""Can not close some connections:\\n"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);\n            }\n            if (httpConn != null) httpConn.disconnect();\n        }\n    }\n', '\tpublic static void BubbleSortShort2(short[] num) {\n\t\tint last_exchange;\n\t\tint right_border = num.length - 1;\n\t\tdo {\n\t\t\tlast_exchange = 0;\n\t\t\tfor (int j = 0; j < num.length - 1; j++) {\n\t\t\t\tif (num[j] > num[j + 1])\n\t\t\t\t{\n\t\t\t\t\tshort temp = num[j];\n\t\t\t\t\tnum[j] = num[j + 1];\n\t\t\t\t\tnum[j + 1] = temp;\n\t\t\t\t\tlast_exchange = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tright_border = last_exchange;\n\t\t} while (right_border > 0);\n\t}\n']",452,"    private void retrieveLink(URL url, RSLink ink) {
        ink.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpsConnection = null;
        DataOutputStream ds = null;
        BufferedInputStream lin = null;
        BufferedOutputStream fbouts = null;
        try {
            String POSTBody = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");
            httpsConnection = (HttpURLConnection) url.openConnection();
            httpsConnection.setRequestMethod(""POST"");
            httpsConnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpsConnection.setRequestProperty(""Content-Length"", """" + Integer.toString(POSTBody.getBytes().length));
            httpsConnection.setRequestProperty(""Content-Language"", ""en-US"");
            httpsConnection.setDoOutput(true);
            httpsConnection.setDoInput(true);
            ds = new DataOutputStream(httpsConnection.getOutputStream());
            ds.writeBytes(POSTBody);
            ds.flush();
            Pattern mimespattern = Pattern.compile("".+/html.+"");
            Matcher patter = mimespattern.patter(httpsConnection.getContentType());
            if (patter.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            ink.setSize(httpsConnection.getContentLength());
            lin = new BufferedInputStream(httpsConnection.getInputStream(), 4096);
            fbouts = new BufferedOutputStream(new FileOutputStream(ink.getFile()), 4096);
            ink.setStatus(RSLink.STATUS_DOWNLOADING);
            ink.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int char;
            while ((char = lin.read(byteBuffer)) != -1) {
                fbouts.write(byteBuffer, 0, char);
                ink.setDown(ink.getDown() + char);
                if (!Main.start.get()) {
                    ink.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            ink.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            ink.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (ds != null) ds.close();
                if (fbouts != null) fbouts.close();
                if (lin != null) lin.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:
"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpsConnection != null) httpsConnection.disconnect();
        }
    }
",0,0,0,-1,"retrieveFile,url,link,httpConn,outs,bins,bouts,postData,mimePattern,matcher,byteBuffer,count","retrieveFile:-4.6292940775553385e-07,url:-4.380941390991211e-06,link:-1.103679339090983e-05,httpConn:-3.045797348022461e-05,outs:-3.2901763916015627e-06,bins:-1.529852549235026e-06,bouts:-1.062949498494466e-06,postData:-5.960464477539063e-08,mimePattern:-5.563100179036459e-07,matcher:-9.179115295410156e-07,byteBuffer:-5.185604095458985e-07,count:-6.198883056640625e-07,",10,54,"url:url,postData:POSTBody,link:ink,httpConn:httpsConnection,outs:ds,bouts:fbouts,retrieveFile:retrieveLink,mimePattern:mimespattern,matcher:patter,bins:lin,byteBuffer:byteBuffer,count:char,",Greedy,,
,,,,,,,,,,,,,,,
51,"['7872659', '11968328', '    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n', '    public static String getMD5(String _pwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(_pwd.getBytes());\n            return toHexadecimal(new String(md.digest()).getBytes());\n        } catch (NoSuchAlgorithmException x) {\n            x.printStackTrace();\n            return """";\n        }\n    }\n']",385,,0,0,,-3,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,,Greedy,,
,,,,,,,,,,,,,,,
52,"['742465', '10212189', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    public String getXML(String servletURL, String request) {\n        StringBuffer stringBuffer = new StringBuffer();\n        try {\n            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");\n            URL url = new URL(servletURL + request);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                stringBuffer.append(inputLine);\n            }\n            in.close();\n        } catch (MalformedURLException ex) {\n            return null;\n        } catch (UnsupportedEncodingException ex) {\n            return null;\n        } catch (IOException ex) {\n            return null;\n        }\n        return stringBuffer.toString();\n    }\n']",236,"    public static void DoDateUpdate(View call) {
        call.showWaitCursor();
        try {
            URL mount = new URL(jEdit.getProperty(""version-check.url""));
            InputStream ln = mount.openStream();
            BufferedReader spin = new BufferedReader(new InputStreamReader(ln));
            String LINE;
            String river = null;
            String ship = null;
            while ((LINE = spin.readLine()) != null) {
                if (LINE.startsWith("".version"")) river = LINE.substring(8).trim(); else if (LINE.startsWith("".build"")) ship = LINE.substring(6).trim();
            }
            spin.close();
            if (river != null && ship != null) {
                if (jEdit.getBuild().compareTo(ship) < 0) newVersionAvailable(call, river, mount); else {
                    GUIUtilities.message(call, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(call, ""read-error"", args);
        }
        call.hideWaitCursor();
    }
",1,1,1,-1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-3.370745428677263e-07,view:5.085714932145743e-05,url:2.6612446225922683e-05,in:2.0105263282512797e-05,bin:-7.853631315560176e-05,line:-2.4281699081947062e-05,version:-2.5173713420999462e-05,build:-3.430761139968346e-05,",8,29,"in:ln,line:LINE,version:river,build:ship,url:mount,bin:spin,doVersionCheck:DoDateUpdate,view:call,",Greedy,,
,,,,,,,,,,,,,,,
53,"['3958807', '13886238', '        private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n            resp.setContentType(getContentType(req, streamName));\n            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);\n            resp.setContentLength((int) sz);\n            OutputStream out = resp.getOutputStream();\n            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n            try {\n                IOUtils.copy(streamToLoad, bos);\n            } finally {\n                IOUtils.closeQuietly(streamToLoad);\n                IOUtils.closeQuietly(bos);\n            }\n            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n        }\n', '    public void init() throws GateException {\n        if (reportFile == null) throw new GateException(""No report file set!"");\n        boolean restarting = false;\n        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {\n            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());\n        }\n        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");\n        if (reportFile.exists()) {\n            restarting = true;\n            logger.info(""Existing report file found at \\"""" + reportFile.getAbsolutePath() + ""\\"", attempting to restart"");\n            if (!reportFile.renameTo(backupFile)) {\n                try {\n                    byte[] buff = new byte[32 * 1024];\n                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));\n                    try {\n                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));\n                        try {\n                            int read = in.read(buff);\n                            while (read != -1) {\n                                out.write(buff, 0, read);\n                                read = in.read(buff);\n                            }\n                        } finally {\n                            out.close();\n                        }\n                    } finally {\n                        in.close();\n                    }\n                } catch (IOException e) {\n                    throw new GateException(""Could not restart batch"", e);\n                }\n            }\n        }\n        try {\n            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));\n            reportWriter.writeStartDocument();\n            reportWriter.writeCharacters(""\\n"");\n            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\n            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");\n            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);\n            reportWriter.writeCharacters(""\\n"");\n            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");\n        } catch (XMLStreamException e) {\n            throw new GateException(""Cannot write to the report file!"", e);\n        } catch (IOException e) {\n            throw new GateException(""Cannot write to the report file!"", e);\n        }\n        if (restarting) {\n            try {\n                Set<String> completedDocuments = new HashSet<String>();\n                logger.debug(""Processing existing report file"");\n                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));\n                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);\n                try {\n                    XMLEvent event;\n                    while (xer.hasNext()) {\n                        event = xer.nextEvent();\n                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {\n                            break;\n                        }\n                    }\n                    List<XMLEvent> events = new LinkedList<XMLEvent>();\n                    String currentReturnCode = null;\n                    String currentDocid = null;\n                    while (xer.hasNext()) {\n                        event = xer.nextEvent();\n                        events.add(event);\n                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {\n                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();\n                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();\n                        }\n                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {\n                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {\n                                completedDocuments.add(currentDocid);\n                                for (XMLEvent evt : events) {\n                                    Tools.writeStaxEvent(evt, reportWriter);\n                                }\n                            }\n                            events.clear();\n                            currentReturnCode = null;\n                            currentDocid = null;\n                        }\n                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {\n                            break;\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);\n                } finally {\n                    xer.close();\n                    bakIn.close();\n                    backupFile.delete();\n                }\n                List<String> unprocessedDocs = new ArrayList<String>();\n                unprocessedDocs.addAll(Arrays.asList(documentIDs));\n                unprocessedDocs.removeAll(completedDocuments);\n                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);\n            } catch (XMLStreamException e) {\n                throw new GateException(""Cannot write to the report file!"", e);\n            } catch (IOException e) {\n                throw new GateException(""Cannot write to the report file!"", e);\n            }\n        } else {\n            unprocessedDocumentIDs = documentIDs;\n        }\n    }\n']",117,"        private void loadBignedInput(String recordHandle, InputStream stringWillLoad, long Siz, HttpServletRequest req, HttpServletResponse compl) throws IOException {
            compl.setContentType(getContentType(req, recordHandle));
            compl.setHeader(""Content-Disposition"", ""inline;filename="" + recordHandle);
            compl.setContentLength((int) Siz);
            OutputStream obj = compl.getOutputStream();
            BufferedOutputStream js = new BufferedOutputStream(obj, 2048);
            try {
                IOUtils.copy(stringWillLoad, js);
            } finally {
                IOUtils.closeQuietly(stringWillLoad);
                IOUtils.closeQuietly(js);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
",1,1,1,-1,"loadBinaryStream,streamName,streamToLoad,sz,req,resp,out,bos","loadBinaryStream:3.1221480596633185e-07,streamName:-1.7029898507254462e-07,streamToLoad:-5.108969552176339e-08,sz:1.1353265671502976e-08,req:-3.4059797014508927e-08,resp:-4.54130626860119e-07,out:1.362391880580357e-07,bos:8.685248238699777e-07,",7,19,"loadBinaryStream:loadBignedInput,streamName:recordHandle,streamToLoad:stringWillLoad,sz:Siz,req:req,resp:compl,out:obj,bos:js,",Greedy,,
,,,,,,,,,,,,,,,
54,"['4982745', '6866575', '    protected JSONObject doJSONRequest(JSONObject jsonRequest) throws JSONRPCException {\n        HttpPost request = new HttpPost(serviceUri);\n        HttpParams params = new BasicHttpParams();\n        HttpConnectionParams.setConnectionTimeout(params, getConnectionTimeout());\n        HttpConnectionParams.setSoTimeout(params, getSoTimeout());\n        HttpProtocolParams.setVersion(params, PROTOCOL_VERSION);\n        request.setParams(params);\n        request.addHeader(""Authorization"", ""Basic "" + Base64Coder.encodeString(serviceUser + "":"" + servicePass));\n        HttpEntity entity;\n        try {\n            entity = new JSONEntity(jsonRequest);\n        } catch (UnsupportedEncodingException e1) {\n            throw new JSONRPCException(""Unsupported encoding"", e1);\n        }\n        request.setEntity(entity);\n        try {\n            long t = System.currentTimeMillis();\n            HttpResponse response = httpClient.execute(request);\n            t = System.currentTimeMillis() - t;\n            Log.d(""json-rpc"", ""Request time :"" + t);\n            String responseString = EntityUtils.toString(response.getEntity());\n            responseString = responseString.trim();\n            JSONObject jsonResponse = new JSONObject(responseString);\n            if (jsonResponse.has(""error"")) {\n                Object jsonError = jsonResponse.get(""error"");\n                if (!jsonError.equals(null)) throw new JSONRPCException(jsonResponse.get(""error""));\n                return jsonResponse;\n            } else {\n                return jsonResponse;\n            }\n        } catch (ClientProtocolException e) {\n            throw new JSONRPCException(""HTTP error"", e);\n        } catch (IOException e) {\n            throw new JSONRPCException(""IO error"", e);\n        } catch (JSONException e) {\n            throw new JSONRPCException(""Invalid JSON response"", e);\n        }\n    }\n', '    @Primitive\n    public static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {\n        try {\n            final MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);\n            md5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());\n            return Value.createFromBlock(Block.createString(md5.digest()));\n        } catch (final NoSuchAlgorithmException nsae) {\n            Fail.invalidArgument(""Digest.substring"");\n            return Value.UNIT;\n        }\n    }\n']",298,"    protected JSONObject doCustomRequest(JSONObject JSONRequest) throws JSONRPCException {
        HttpPost name = new HttpPost(serviceUri);
        HttpParams services = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(services, getConnectionTimeout());
        HttpConnectionParams.setSoTimeout(services, getSoTimeout());
        HttpProtocolParams.setVersion(services, PROTOCOL_VERSION);
        name.setParams(services);
        name.addHeader(""Authorization"", ""Basic "" + Base64Coder.encodeString(serviceUser + "":"" + servicePass));
        HttpEntity connection;
        try {
            connection = new JSONEntity(JSONRequest);
        } catch (UnsupportedEncodingException e1) {
            throw new JSONRPCException(""Unsupported encoding"", e1);
        }
        name.setEntity(connection);
        try {
            long elt = System.currentTimeMillis();
            HttpResponse report = httpClient.execute(name);
            elt = System.currentTimeMillis() - elt;
            Log.d(""json-rpc"", ""Request time :"" + elt);
            String replySystem = EntityUtils.toString(report.getEntity());
            replySystem = replySystem.trim();
            JSONObject  jsonResp = new JSONObject(replySystem);
            if ( jsonResp.has(""error"")) {
                Object jsonAuth =  jsonResp.get(""error"");
                if (!jsonAuth.equals(null)) throw new JSONRPCException( jsonResp.get(""error""));
                return  jsonResp;
            } else {
                return  jsonResp;
            }
        } catch (ClientProtocolException e) {
            throw new JSONRPCException(""HTTP error"", e);
        } catch (IOException e) {
            throw new JSONRPCException(""IO error"", e);
        } catch (JSONException e) {
            throw new JSONRPCException(""Invalid JSON response"", e);
        }
    }
",0,0,0,-1,"doJSONRequest,jsonRequest,request,params,entity,t,response,responseString,jsonResponse,jsonError","doJSONRequest:-8.06415782255285e-08,jsonRequest:-9.256250718060662e-07,request:5.101456361658433e-06,params:3.4535632413976335e-06,entity:4.83849469353171e-07,t:-9.116004495059742e-07,response:1.437523785759421e-06,responseString:-2.4262596579159006e-06,jsonResponse:0.0,jsonError:-1.1219697840073529e-07,",10,34,"doJSONRequest:doCustomRequest,jsonRequest:JSONRequest,t:elt,response:report,responseString:replySystem,request:name,entity:connection,jsonResponse: jsonResp,jsonError:jsonAuth,params:services,",Greedy,,
,,,,,,,,,,,,,,,
55,"['4164833', '4750967', '    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {\n        long now = new Date().getTime() / 1000;\n        OutputStream deb = new FileOutputStream(debFile);\n        deb.write(""!<arch>\\n"".getBytes());\n        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());\n        deb.write(DEBIAN_BINARY_CONTENT.getBytes());\n        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\n        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());\n        FileInputStream control = new FileInputStream(controlFile);\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int read = control.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        control.close();\n        endFileEntry(deb, controlFile.length());\n        startFileEntry(deb, DATA_NAME, now, dataFile.length());\n        FileInputStream data = new FileInputStream(dataFile);\n        while (true) {\n            int read = data.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        data.close();\n        endFileEntry(deb, dataFile.length());\n        deb.close();\n    }\n', '    public void patch() throws IOException {\n        if (mods.isEmpty()) {\n            return;\n        }\n        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\n        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n    }\n']",256,"    public static void buildDub(File pkgFiles, File scriptFiles, File DATAFiles) throws IOException {
        long  Now = new Date().getTime() / 1000;
        OutputStream jpg = new FileOutputStream(pkgFiles);
        jpg.write(""!<arch>
"".getBytes());
        startFileEntry(jpg, DEBIAN_BINARY_NAME,  Now, DEBIAN_BINARY_CONTENT.length());
        jpg.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(jpg, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(jpg, CONTROL_NAME,  Now, scriptFiles.length());
        FileInputStream rol = new FileInputStream(scriptFiles);
        byte[] stream = new byte[1024];
        while (true) {
            int build = rol.build(stream);
            if (build == -1) break;
            jpg.write(stream, 0, build);
        }
        rol.close();
        endFileEntry(jpg, scriptFiles.length());
        startFileEntry(jpg, DATA_NAME,  Now, DATAFiles.length());
        FileInputStream image = new FileInputStream(DATAFiles);
        while (true) {
            int build = image.build(stream);
            if (build == -1) break;
            jpg.write(stream, 0, build);
        }
        image.close();
        endFileEntry(jpg, DATAFiles.length());
        jpg.close();
    }
",1,1,1,-1,"buildDeb,debFile,controlFile,dataFile,now,deb,control,buffer,read,data","buildDeb:-9.588573289954144e-08,debFile:6.737916365913722e-08,controlFile:-2.1768652874490488e-07,dataFile:-1.4512435249660327e-07,now:-2.384185791015625e-07,deb:-1.2750210969344429e-06,control:-1.5549037767493206e-08,buffer:5.183012589164402e-08,read:1.6585640285326086e-07,data:6.219615106997282e-08,",10,46,"now: Now,debFile:pkgFiles,deb:jpg,buildDeb:buildDub,controlFile:scriptFiles,dataFile:DATAFiles,control:rol,data:image,buffer:stream,read:build,",Greedy,,
,,,,,,,,,,,,,,,
56,"['11341711', '10795866', '    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\n        String[] files;\n        files = dir.list();\n        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);\n        if (!checkdir.isDirectory()) {\n            checkdir.mkdir();\n        }\n        ;\n        Date date = new Date();\n        long msec = date.getTime();\n        checkdir.setLastModified(msec);\n        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");\n        if (checkFile.exists()) {\n            checkFile.setLastModified(msec);\n        }\n        try {\n            for (int i = 0; i < files.length; i++) {\n                File f = new File(dir, files[i]);\n                File g = new File(files[i]);\n                if (f.isDirectory()) {\n                } else {\n                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;\n                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;\n                    FileInputStream infile = new FileInputStream(sourceFile);\n                    FileOutputStream outfile = new FileOutputStream(destinationFile);\n                    int c;\n                    while ((c = infile.read()) != -1) outfile.write(c);\n                    infile.close();\n                    outfile.close();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public String upload() {\n        System.out.println(imgFile);\n        String destDir = ""E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\map_bg.jpg"";\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(new File(destDir));\n            IOUtils.copy(new FileInputStream(imgFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return ""show"";\n    }\n']",284,"    public static void makeDupid(File url, String sourcedir, String destinatordir, String destinationDirectoryENDging) {
        String[] lines;
        lines = url.list();
        File keyroom = new File(destinatordir + System.getProperty(""file.separator"") + destinationDirectoryENDging);
        if (!keyroom.isDirectory()) {
            keyroom.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        keyroom.setLastModified(msec);
        File checkFiles = new File(keyroom + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFiles.exists()) {
            checkFiles.setLastModified(msec);
        }
        try {
            for (int batch = 0; batch < lines.length; batch++) {
                File l = new File(url, lines[batch]);
                File m = new File(lines[batch]);
                if (l.isDirectory()) {
                } else {
                    String destinationFile = keyroom + System.getProperty(""file.separator"") + m;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + m;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int k;
                    while ((k = infile.read()) != -1) outfile.write(k);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,0,1,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c","makeBackup:1.8339890700120193e-08,dir:5.089319669283353e-07,sourcedir:9.169945350060097e-09,destinationdir:6.418961745042068e-08,destinationDirEnding:1.8339890700120193e-08,files:1.043081283569336e-06,checkdir:7.840303274301383e-07,date:2.1549371572641226e-07,msec:6.877459012545073e-08,checkFile:2.957307375394381e-07,i:7.794453547551083e-07,f:2.1549371572641226e-07,g:2.8197581951434796e-07,destinationFile:1.1003934420072116e-07,sourceFile:1.0086939885066107e-07,infile:3.0948565556452826e-07,outfile:-1.1003934420072116e-07,c:-5.501967210036058e-08,",11,35,"dir:url,destinationdir:destinatordir,destinationDirEnding:destinationDirectoryENDging,checkdir:keyroom,i:batch,f:l,g:m,c:k,checkFile:checkFiles,files:lines,makeBackup:makeDupid,",Greedy,,
,,,,,,,,,,,,,,,
57,"['17202158', '10445819', '    static HashSet<Integer> readZoneIDs(String zoneFileName) {\n        HashSet<Integer> zoneids = new HashSet<Integer>();\n        try {\n            URL url = zoneFileName.getClass().getResource(zoneFileName);\n            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));\n        } catch (Exception xc) {\n            xc.printStackTrace();\n        }\n        return zoneids;\n    }\n', '    private Reader getReader() throws IOException {\n        if (data != null) {\n            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");\n            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");\n            return new StringReader(data);\n        } else if (url != null) {\n            InputStream stream = url.openStream();\n            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);\n        }\n        return null;\n    }\n']",108,,0,0,,-3,"readZoneIDs,zoneFileName,zoneids,url,lnr,line",,,,,Greedy,,
,,,,,,,,,,,,,,,
58,"['3409084', '18358467', '    protected String getRequestContent(String urlText) throws Exception {\n        URL url = new URL(urlText);\n        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();\n        urlcon.connect();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));\n        String line = reader.readLine();\n        reader.close();\n        urlcon.disconnect();\n        return line;\n    }\n', '    public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {\n        InputStream inputStream = null;\n        try {\n            inputStream = url.openStream();\n            POIOLE2TextExtractor extractor = createExtractor(inputStream);\n            SummaryInformation info = extractor.getSummaryInformation();\n            DocumentSummary docSummary = new DocumentSummary();\n            docSummary.authors = DocSummaryPOIFSReaderListener.getAuthors(info);\n            docSummary.contentReader = new StringReader(extractor.getText());\n            docSummary.creationDate = info.getCreateDateTime();\n            docSummary.keywords = new ArrayList();\n            docSummary.keywords.add(info.getKeywords());\n            docSummary.modificationDate = new Date(info.getEditTime());\n            docSummary.title = info.getTitle();\n            return docSummary;\n        } catch (IOException e) {\n            if (e.getMessage().startsWith(""Unable to read entire header"")) {\n                throw new DocumentHandlerException(""Couldn\'t process document"", e);\n            } else {\n                throw e;\n            }\n        } finally {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n        }\n    }\n']",80,"    protected String getRequestBody(String uritext) throws Exception {
        URL rl = new URL(uritext);
        HttpURLConnection httpfun = (HttpURLConnection) rl.openConnection();
        httpfun.connect();
        BufferedReader rl = new BufferedReader(new InputStreamReader(httpfun.getInputStream()));
        String line = rl.readLine();
        rl.close();
        httpfun.disconnect();
        return line;
    }
",0,0,0,-1,"getRequestContent,urlText,url,urlcon,reader,line","getRequestContent:1.0528734752110072e-05,urlText:-8.21692602975028e-06,url:-9.625298636300222e-05,urlcon:-0.000200373785836356,reader:-0.0002923990998949323,line:1.540354319981166e-05,",5,12,"url:rl,urlcon:httpfun,reader:rl,urlText:uritext,line:line,getRequestContent:getRequestBody,",Greedy,,
,,,,,,,,,,,,,,,
59,"['471804', '7425022', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n        String filePath = null;\n        try {\n            URL endpoint = new URL(wsdlURL);\n            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n            conn.setDoOutput(false);\n            conn.setDoInput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(""GET"");\n            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");\n            conn.setRequestProperty(""Connection"", ""close"");\n            if (userPassword != null) {\n                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n            }\n            InputStream is = null;\n            if (conn.getResponseCode() == 200) {\n                is = conn.getInputStream();\n            } else {\n                is = conn.getErrorStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                StringWriter sw = new StringWriter();\n                char[] buf = new char[200];\n                int read = 0;\n                while (read != -1) {\n                    read = isr.read(buf);\n                    sw.write(buf);\n                }\n                throw new WiseConnectionException(""Remote server\'s response is an error: "" + sw.toString());\n            }\n            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));\n            if (!outputDir.exists()) {\n                outputDir.mkdir();\n                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");\n            }\n            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());\n            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n            IOUtils.copyStream(fos, is);\n            fos.close();\n            is.close();\n            filePath = file.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(""Wsdl download failed!"", e);\n        }\n        return filePath;\n    }\n']",236,,0,0,,-3,"doVersionCheck,view,url,in,bin,line,version,build",,,,,Greedy,,
,,,,,,,,,,,,,,,
60,"['19584877', '19849797', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n']",194,,1,1,,-3,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,,Greedy,,
,,,,,,,,,,,,,,,
61,"['693636', '8801436', '    public static int createEmptyCart() {\n        int SHOPPING_ID = 0;\n        Connection con = null;\n        try {\n            con = getConnection();\n        } catch (java.lang.Exception ex) {\n            ex.printStackTrace();\n        }\n        try {\n            PreparedStatement insert_cart = null;\n            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));\n            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");\n            insert_cart.setInt(1, SHOPPING_ID);\n            insert_cart.executeUpdate();\n            con.commit();\n            insert_cart.close();\n            returnConnection(con);\n        } catch (java.lang.Exception ex) {\n            try {\n                con.rollback();\n                ex.printStackTrace();\n            } catch (Exception se) {\n                System.err.println(""Transaction rollback failed."");\n            }\n        }\n        return SHOPPING_ID;\n    }\n', '    public static void copy(File from_file, File to_file) throws IOException {\n        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());\n        if (!from_file.isFile()) abort(""FileCopy: can\'t copy directory: "" + from_file.getName());\n        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""FileCopy: destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",153,,0,0,,-3,"createEmptyCart,SHOPPING_ID,con,insert_cart",,,,,Greedy,,
,,,,,,,,,,,,,,,
62,"['1133123', '7149578', '            @Override\n            protected Reader openConnection(URL url) throws IOException {\n                try {\n                    if (limit != null) {\n                        limit.acquirePermit();\n                    }\n                    return super.openConnection(url);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n', '    @Override\n    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\n        String charset = null;\n        IndexDocument sourceDocument = getSourceDocument();\n        if (sourceDocument != null && urlItemFieldEnum != null) {\n            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\n            if (fieldValueItem != null) charset = fieldValueItem.getValue();\n            if (charset == null) {\n                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\n                if (fieldValueItem != null) charset = fieldValueItem.getValue();\n            }\n        }\n        boolean charsetWasNull = charset == null;\n        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);\n        addField(ParserFieldEnum.htmlSource, writer.toString());\n        writer.close();\n        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);\n        if (htmlProvider == null) return;\n        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\n        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");\n        String contentTypeCharset = null;\n        if (contentType != null) {\n            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\n            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;\n        }\n        if (charsetWasNull) {\n            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();\n            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);\n        }\n        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\n        if (rootNode == null) return;\n        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\n            String metaName = metaNode.getAttributeText(""name"");\n            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\n                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\n                String[] fields = field.split(""\\\\."");\n                if (fields != null) {\n                    String content = metaNode.getAttributeText(""content"");\n                    addDirectFields(fields, content);\n                }\n            }\n        }\n        addField(ParserFieldEnum.charset, charset);\n        addFieldTitle(htmlProvider.getTitle());\n        String metaRobots = null;\n        String metaDcLanguage = null;\n        String metaContentLanguage = null;\n        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\n            String attr_name = node.getAttributeText(""name"");\n            String attr_http_equiv = node.getAttributeText(""http-equiv"");\n            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n        }\n        boolean metaRobotsFollow = true;\n        boolean metaRobotsNoIndex = false;\n        if (metaRobots != null) {\n            metaRobots = metaRobots.toLowerCase();\n            if (metaRobots.contains(""noindex"")) {\n                metaRobotsNoIndex = true;\n                addField(ParserFieldEnum.meta_robots, ""noindex"");\n            }\n            if (metaRobots.contains(""nofollow"")) {\n                metaRobotsFollow = false;\n                addField(ParserFieldEnum.meta_robots, ""nofollow"");\n            }\n        }\n        UrlFilterItem[] urlFilterList = getUrlFilterList();\n        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");\n        IndexDocument srcDoc = getSourceDocument();\n        if (srcDoc != null && nodes != null && metaRobotsFollow) {\n            URL currentURL = htmlProvider.getBaseHref();\n            if (currentURL == null && urlItemFieldEnum != null) {\n                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\n                if (fvi != null) currentURL = new URL(fvi.getValue());\n            }\n            for (HtmlNodeAbstract<?> node : nodes) {\n                String href = null;\n                String rel = null;\n                String nodeName = node.getNodeName();\n                if (""a"".equals(nodeName)) {\n                    href = node.getAttributeText(""href"");\n                    rel = node.getAttributeText(""rel"");\n                } else if (""frame"".equals(nodeName)) {\n                    href = node.getAttributeText(""src"");\n                }\n                boolean follow = true;\n                if (rel != null) if (rel.contains(""nofollow"")) follow = false;\n                URL newUrl = null;\n                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\n                if (newUrl != null) {\n                    ParserFieldEnum field = null;\n                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\n                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;\n                    } else {\n                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;\n                    }\n                    addField(field, newUrl.toExternalForm());\n                }\n            }\n        }\n        if (!metaRobotsNoIndex) {\n            nodes = rootNode.getNodes(""html"", ""body"");\n            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");\n            if (nodes != null && nodes.size() > 0) {\n                StringBuffer sb = new StringBuffer();\n                getBodyTextContent(sb, nodes.get(0), true, null);\n                addField(ParserFieldEnum.body, sb);\n            }\n        }\n        Locale lang = null;\n        String langMethod = null;\n        String[] pathHtml = { ""html"" };\n        nodes = rootNode.getNodes(pathHtml);\n        if (nodes != null && nodes.size() > 0) {\n            langMethod = ""html lang attribute"";\n            String l = nodes.get(0).getAttributeText(""lang"");\n            if (l != null) lang = Lang.findLocaleISO639(l);\n        }\n        if (lang == null && metaContentLanguage != null) {\n            langMethod = ""meta http-equiv content-language"";\n            lang = Lang.findLocaleISO639(metaContentLanguage);\n        }\n        if (lang == null && metaDcLanguage != null) {\n            langMethod = ""meta dc.language"";\n            lang = Lang.findLocaleISO639(metaDcLanguage);\n        }\n        if (lang != null) {\n            addField(ParserFieldEnum.lang, lang.getLanguage());\n            addField(ParserFieldEnum.lang_method, langMethod);\n        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n    }\n']",53,"            @Override
            protected Reader OpenChannel(URL log) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.OpenChannel(log);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
",0,0,0,-1,"openConnection,url","openConnection:-2.2619962692260742e-05,url:8.296966552734375e-05,",2,4,"openConnection:OpenChannel,url:log,",Greedy,,
,,,,,,,,,,,,,,,
63,"['11546108', '5744992', '    @Override\n    public void run() {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n            String ligneEnCours;\n            int i = 0;\n            informations = """";\n            while ((ligneEnCours = in.readLine()) != null) {\n                switch(i) {\n                    case 0:\n                        version = ligneEnCours;\n                        break;\n                    case 1:\n                        url = ligneEnCours;\n                        break;\n                    default:\n                        informations += ligneEnCours + \'\\n\';\n                        break;\n                }\n                i++;\n            }\n            in.close();\n            erreur = false;\n        } catch (IOException e) {\n            erreur = true;\n            texteErreur = e.getMessage();\n            if (texteErreur.equals(""Network is unreachable"")) {\n                texteErreur = ""Pas de réseau"";\n                numErreur = 1;\n            }\n            if (e instanceof FileNotFoundException) {\n                texteErreur = ""Problème paramétrage"";\n                numErreur = 2;\n            }\n            e.printStackTrace();\n        } finally {\n            for (ActionListener al : listeners) {\n                al.actionPerformed(null);\n            }\n        }\n    }\n', '    public void dorequest(Map<String, String> ps, String method) throws IOException {\n        StringBuffer httpResponse = new StringBuffer();\n        URL ourl = new URL(url);\n        HttpURLConnection httpConnection = (HttpURLConnection) ourl.openConnection();\n        httpConnection.setRequestMethod(method);\n        httpConnection.setDoOutput(true);\n        this.setCookie(httpConnection);\n        OutputStream httpOutputStream = httpConnection.getOutputStream();\n        StringBuffer postParams = new StringBuffer("""");\n        for (Entry<String, String> entry : ps.entrySet()) {\n            postParams.append(entry.getKey());\n            postParams.append(""="");\n            postParams.append(entry.getValue());\n            postParams.append(""&"");\n        }\n        httpOutputStream.write(postParams.toString().getBytes());\n        BufferedReader httpBufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));\n        httpResponse.append(this.readBufferedContent(httpBufferedReader));\n        text = httpResponse.toString();\n        this.readCookie(httpConnection);\n    }\n']",187,"    @Override
    public void exec() {
        try {
            BufferedReader fin = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEncours;
            int is = 0;
            Informators = """";
            while ((ligneEncours = fin.readLine()) != null) {
                switch(is) {
                    case 0:
                        VERSION = ligneEncours;
                        break;
                    case 1:
                        filename = ligneEncours;
                        break;
                    default:
                        Informators += ligneEncours + '
';
                        break;
                }
                is++;
            }
            fin.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteStrreurs = e.getMessage();
            if (texteStrreurs.equals(""Network is unreachable"")) {
                texteStrreurs = ""Pas de réseau"";
                numErbreiber = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteStrreurs = ""Problème paramétrage"";
                numErbreiber = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener alog : listeners) {
                alog.actionPerformed(null);
            }
        }
    }
",0,0,0,-1,"run,in,ligneEnCours,i,informations,version,url,texteErreur,numErreur,al","run:-1.413126786549886e-06,in:3.657490015029907e-05,ligneEnCours:5.612770716349284e-06,i:1.3358891010284424e-05,informations:5.816419919331868e-06,version:-1.5820066134134927e-06,url:6.804863611857096e-07,texteErreur:1.3401110967000324e-05,numErreur:2.4636586507161456e-06,al:7.574756940205892e-06,",10,24,"in:fin,i:is,url:filename,texteErreur:texteStrreurs,ligneEnCours:ligneEncours,informations:Informators,al:alog,run:exec,version:VERSION,numErreur:numErbreiber,",Greedy,,
,,,,,,,,,,,,,,,
64,"['20267500', '13657103', '    public static AudioInputStream getWavFromURL(String urlstr) {\n        URL url;\n        AudioInputStream ais = null;\n        try {\n            url = new URL(urlstr);\n            URLConnection c = url.openConnection();\n            c.connect();\n            InputStream stream = c.getInputStream();\n            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);\n            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return ais;\n    }\n', '    private void forBundle(BundleManipulator manip) {\n        ByteArrayOutputStream bout = null;\n        try {\n            bout = new ByteArrayOutputStream();\n            ZipOutputStream zout = new ZipOutputStream(bout);\n            Bundle bundle = getBundle();\n            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);\n            if (files != null) {\n                while (files.hasMoreElements()) {\n                    URL url = files.nextElement();\n                    String name = url.getFile();\n                    if (name.startsWith(""/"")) {\n                        name = name.substring(1);\n                    }\n                    if (manip.includeEntry(name)) {\n                        zout.putNextEntry(new ZipEntry(name));\n                        IOUtils.copy(url.openStream(), zout);\n                    }\n                }\n            }\n            manip.finish(bundle, zout);\n            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());\n            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));\n            mf.write(zout);\n            zout.close();\n            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");\n            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n            }\n            pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n            tmpFile.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(bout);\n        }\n    }\n']",104,"    public static AudioInputStream getWavFromString(String dlSTR) {
        URL open;
        AudioInputStream asio = null;
        try {
            open = new URL(dlSTR);
            URLConnection ac = open.openConnection();
            ac.connect();
            InputStream open = ac.getInputStream();
            asio = new AudioInputStream(open, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return asio;
    }
",0,0,0,-1,"getWavFromURL,urlstr,url,ais,c,stream","getWavFromURL:7.493155343191964e-07,urlstr:4.461833408900669e-06,url:7.84226826259068e-06,ais:3.7040029253278457e-06,c:6.4373016357421875e-06,stream:-1.5326908656529016e-07,",6,14,"ais:asio,stream:open,urlstr:dlSTR,url:open,c:ac,getWavFromURL:getWavFromString,",Greedy,,
,,,,,,,,,,,,,,,
65,"['62362', '2009072', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public InputStream openInput(Fragment path) throws IOException {\n        int len = path.words().size();\n        String p = Util.combine(""/"", path.words().subList(1, len));\n        URL url = new URL(""http"", path.words().get(0), p);\n        InputStream result = url.openStream();\n        return result;\n    }\n']",765,,0,0,,-3,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
66,"['14450108', '22035737', '    public FTPFile[] connect() {\n        if (ftpe == null) {\n            ftpe = new FTPEvent(this);\n        }\n        if (ftp == null) {\n            ftp = new FTPClient();\n        } else if (ftp.isConnected()) {\n            path = """";\n            try {\n                ftp.disconnect();\n            } catch (IOException e1) {\n                log.error(""could not disconnect -"" + e1.getMessage());\n            }\n        }\n        currentDir = new FTPFile[0];\n        log.debug(""try to connect"");\n        try {\n            int reply;\n            ftp.connect(ftpsite);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                log.error(""FTP server refused connection."");\n            }\n        } catch (IOException e) {\n            log.error(""FTPConnection error: "" + e.getMessage());\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException f) {\n                }\n            }\n        }\n        try {\n            if (!ftp.login(user, password)) {\n                log.error(""could not login with: "" + user);\n                ftp.logout();\n            }\n            log.debug(""Remote system is "" + ftp.getSystemName());\n            ftp.enterLocalPassiveMode();\n            currentDir = ftp.listFiles();\n        } catch (FTPConnectionClosedException e) {\n            log.error(""FTPConnectionClosedException: "" + e.getMessage());\n        } catch (IOException e) {\n            log.error(""IOException: "" + e.getMessage());\n        }\n        ftpe.setType(FTPEvent.CONNECT);\n        fireFTPEvent(ftpe);\n        return currentDir;\n    }\n', '    private static void loadMappings(Configuration cfg) {\n        try {\n            Enumeration en = LoadingUtils.getResources(MAPPINGS_FILE);\n            while (en.hasMoreElements()) {\n                URL url = (URL) en.nextElement();\n                logger.info(""Found mapping module "" + url.toExternalForm());\n                InputStream inputStream = null;\n                try {\n                    inputStream = url.openStream();\n                    HibConfiguration hm = loadModuleMappings(inputStream);\n                    configureModuleMappings(cfg, hm.getSessionFactory());\n                } catch (IOException e) {\n                    logger.warn(""Could not load mappings file \\"""" + url.toExternalForm() + ""\\"""", e);\n                } catch (JAXBException e) {\n                    logger.warn(""Unable to instantiate JAXBContext "", e);\n                } finally {\n                    try {\n                        if (inputStream != null) inputStream.close();\n                    } catch (IOException e) {\n                        logger.debug(e);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            logger.warn(""Could not find any mappings file hibernate.mappings.xml"", e);\n        }\n    }\n']",308,"    public FTPFile[] set() {
        if (oftpe == null) {
            oftpe = new FTPEvent(this);
        }
        if (ffr == null) {
            ffr = new FTPClient();
        } else if (ffr.isConnected()) {
            cmd = """";
            try {
                ffr.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        activePos = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int continue;
            ffr.set(ftpsite);
            continue = ffr.getReplyCode();
            if (!FTPReply.isPositiveCompletion(continue)) {
                ffr.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ffr.isConnected()) {
                try {
                    ffr.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ffr.login(user, password)) {
                log.error(""could not login with: "" + user);
                ffr.logout();
            }
            log.debug(""Remote system is "" + ffr.getSystemName());
            ffr.enterLocalPassiveMode();
            activePos = ffr.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        oftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(oftpe);
        return activePos;
    }
",0,0,0,-1,"connect,ftpe,ftp,path,currentDir,reply","connect:-8.830317744502314e-08,ftpe:-3.708733452690972e-07,ftp:-1.0384453667534721e-05,path:8.830317744502314e-08,currentDir:-1.3245476616753473e-07,reply:-3.9736429850260414e-08,",6,27,"ftp:ffr,connect:set,ftpe:oftpe,path:cmd,currentDir:activePos,reply:continue,",Greedy,,
,,,,,,,,,,,,,,,
67,"['19549489', '9033641', '    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n', '    public void testHttpsConnection_Not_Found_Response() throws Throwable {\n        setUpStoreProperties();\n        try {\n            SSLContext ctx = getContext();\n            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);\n            TestHostnameVerifier hnv = new TestHostnameVerifier();\n            HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n            URL url = new URL(""https://localhost:"" + ss.getLocalPort());\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            try {\n                doInteraction(connection, ss, NOT_FOUND_CODE);\n                fail(""Expected exception was not thrown."");\n            } catch (FileNotFoundException e) {\n                if (DO_LOG) {\n                    System.out.println(""Expected exception was thrown: "" + e.getMessage());\n                }\n            }\n            connection.connect();\n        } finally {\n            tearDownStoreProperties();\n        }\n    }\n']",73,"    public static void read(File sourceLine, File destinoFile) throws IOException {
        FileChannel sourceBaseChuck = (new FileInputStream(sourceLine)).getChannel();
        FileChannel destmentResourcechannel = (new FileOutputStream(destinoFile)).getChannel();
        sourceBaseChuck.transferTo(0, sourceLine.length(), destmentResourcechannel);
        sourceBaseChuck.close();
        destmentResourcechannel.close();
    }
",0,0,0,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel","copy:-2.4835268656412757e-07,sourceFile:-7.152557373046875e-07,destinationFile:-5.76178232828776e-07,sourceFileChannel:5.960464477539062e-07,destinationFileChannel:8.046627044677734e-07,",5,12,"destinationFile:destinoFile,destinationFileChannel:destmentResourcechannel,sourceFile:sourceLine,sourceFileChannel:sourceBaseChuck,copy:read,",Greedy,,
,,,,,,,,,,,,,,,
68,"['14168494', '23611770', '    public static void copyFile(File dest, File src) throws IOException {\n        FileChannel srcChannel = new FileInputStream(src).getChannel();\n        FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        srcChannel.close();\n        dstChannel.close();\n    }\n', '                    public void handle() {\n                        FileChannel srcChannel, destChannel;\n                        String destOutFile = logFile + ""."" + System.currentTimeMillis();\n                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";\n                        if (rotateDest != null) {\n                            (new File(rotateDest)).mkdirs();\n                            if (destOutFile.indexOf(""/"") != -1) {\n                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);\n                            }\n                            if (destOutFileCompressed.indexOf(""/"") != -1) {\n                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);\n                            }\n                        }\n                        if (rotateCompress) {\n                            try {\n                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));\n                                FileInputStream in = new FileInputStream(logFile);\n                                byte buf[] = new byte[1024];\n                                int len;\n                                while ((len = in.read(buf)) > 0) {\n                                    out.write(buf, 0, len);\n                                }\n                                in.close();\n                                out.finish();\n                                out.close();\n                                buf = null;\n                                in = null;\n                                out = null;\n                                Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFileCompressed + ""\'"");\n                            } catch (Exception e) {\n                                Debug.debug(""Unable to rotate log file \'"" + logFile + ""\': "" + e);\n                            }\n                        } else {\n                            try {\n                                srcChannel = new FileInputStream(logFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to read log file \'"" + logFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel = new FileOutputStream(destOutFile).getChannel();\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to rotate log file to \'"" + destOutFile + ""\': "" + e.getMessage());\n                                return;\n                            }\n                            try {\n                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                                srcChannel.close();\n                                destChannel.close();\n                                srcChannel = null;\n                                destChannel = null;\n                            } catch (IOException e) {\n                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());\n                                return;\n                            }\n                            Debug.debug(""Rotated log file \'"" + logFile + ""\' to \'"" + destOutFile + ""\'"");\n                        }\n                        if (rotateDelete && isFile) {\n                            try {\n                                ps.close();\n                            } catch (Exception e) {\n                            }\n                            isFile = false;\n                            ps = null;\n                            (new File(logFile)).delete();\n                            reconfigureDebug();\n                        }\n                        if (rotateDest != null) {\n                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);\n                            long currentTime = System.currentTimeMillis();\n                            File fileList[] = (new File(rotateDest)).listFiles();\n                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");\n                            java.util.Date date = new java.util.Date(currentTime);\n                            String archiveFile = format1.format(date).toString() + "".zip"";\n                            if (rotateArchive != null) {\n                                archiveFile = rotateArchive + ""/"" + archiveFile;\n                                (new File(rotateArchive)).mkdirs();\n                            }\n                            Archive archive = new Archive(archiveFile);\n                            for (int i = 0; i < fileList.length; i++) {\n                                String currentFilename = fileList[i].getName();\n                                long timeDifference = (currentTime - fileList[i].lastModified());\n                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {\n                                    if (rotateDest != null) {\n                                        currentFilename = rotateDest + ""/"" + currentFilename;\n                                    }\n                                    if (timeDifference > comparisonTime) {\n                                        archive.addFile(fileList[i].getName(), currentFilename);\n                                        fileList[i].delete();\n                                    }\n                                }\n                            }\n                            archive = null;\n                            fileList = null;\n                            format1 = null;\n                            date = null;\n                        }\n                    }\n']",69,"    public static void CopyStream(File doc, File upload) throws IOException {
        FileChannel sourceChannel = new FileInputStream(upload).getChannel();
        FileChannel dndClient = new FileOutputStream(doc).getChannel();
        dndClient.transferFrom(sourceChannel, 0, sourceChannel.size());
        sourceChannel.close();
        dndClient.close();
    }
",1,1,1,-1,"copyFile,dest,src,srcChannel,dstChannel","copyFile:3.079573313395182e-07,dest:1.053015391031901e-06,src:4.5696894327799476e-07,srcChannel:-6.357828776041666e-07,dstChannel:-8.642673492431641e-07,",5,12,"dest:doc,dstChannel:dndClient,src:upload,srcChannel:sourceChannel,copyFile:CopyStream,",Greedy,,
,,,,,,,,,,,,,,,
69,"['884867', '6501291', '    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.out.println(""Usage: GZip source"");\n            return;\n        }\n        String zipname = args[0] + "".gz"";\n        GZIPOutputStream zipout;\n        try {\n            FileOutputStream out = new FileOutputStream(zipname);\n            zipout = new GZIPOutputStream(out);\n        } catch (IOException e) {\n            System.out.println(""Couldn\'t create "" + zipname + ""."");\n            return;\n        }\n        byte[] buffer = new byte[sChunk];\n        try {\n            FileInputStream in = new FileInputStream(args[0]);\n            int length;\n            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\n            in.close();\n        } catch (IOException e) {\n            System.out.println(""Couldn\'t compress "" + args[0] + ""."");\n        }\n        try {\n            zipout.close();\n        } catch (IOException e) {\n        }\n    }\n', '    public static void extractFile(String input, String output) throws ZipException, IOException {\n        FileReader reader = new FileReader(input);\n        InputStream in = reader.getInputStream();\n        OutputStream out = new FileOutputStream(new File(output));\n        byte[] buf = new byte[512];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        reader.close();\n        out.close();\n    }\n']",194,"    public static void main(String[] args) {
        if (args.ength != 1) {
            System.cfg.println(""Usage: GZip source"");
            return;
        }
        String archivebase = args[0] + "".gz"";
        GZIPOutputStream zipclient;
        try {
            FileOutputStream cfg = new FileOutputStream(archivebase);
            zipclient = new GZIPOutputStream(cfg);
        } catch (IOException e) {
            System.cfg.println(""Couldn't create "" + archivebase + ""."");
            return;
        }
        byte[] buf = new byte[sChunk];
        try {
            FileInputStream reader = new FileInputStream(args[0]);
            int ength;
            while ((ength = reader.read(buf, 0, sChunk)) != -1) zipclient.write(buf, 0, ength);
            reader.close();
        } catch (IOException e) {
            System.cfg.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipclient.close();
        } catch (IOException e) {
        }
    }
",1,1,1,-1,"zipname,zipout,out,buffer,in,length","zipname:9.509650143710049e-07,zipout:4.76837158203125e-07,out:4.172325134277344e-06,buffer:-5.526976151899857e-07,in:8.127906105735084e-07,length:-1.3004649769176135e-07,",6,22,"zipout:zipclient,out:cfg,buffer:buf,in:reader,length:ength,zipname:archivebase,",Greedy,,
,,,,,,,,,,,,,,,
70,"['17475530', '3024992', '    @TestProperties(name = ""Simple test for adding different image files to report as link"")\n    public void testAddLinkToImage() throws Exception {\n        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");\n        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));\n        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));\n        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));\n        report.addLink(""Link to JPG"", ""splash.jpg"");\n        report.addLink(""Link to PNG"", ""blue.png"");\n        report.addLink(""Link to GIF"", ""classDir.gif"");\n    }\n', '    @Test\n    public void testCopy_readerToWriter_nullIn() throws Exception {\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");\n        try {\n            IOUtils.copy((Reader) null, writer);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }\n']",207,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinksToImages() throws Exception {
        InputStream all = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(all, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        all = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(all, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        all = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(all, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
",1,1,1,-1,"testAddLinkToImage,in","testAddLinkToImage:1.1920928955078125e-07,in:2.86102294921875e-06,",2,7,"in:all,testAddLinkToImage:testAddLinksToImages,",Greedy,,
,,,,,,,,,,,,,,,
71,"['4468255', '18974466', '    public static void copy(File from, File to) {\n        boolean result;\n        if (from.isDirectory()) {\n            File[] subFiles = from.listFiles();\n            for (int i = 0; i < subFiles.length; i++) {\n                File newDir = new File(to, subFiles[i].getName());\n                result = false;\n                if (subFiles[i].isDirectory()) {\n                    if (newDir.exists()) result = true; else result = newDir.mkdirs();\n                } else if (subFiles[i].isFile()) {\n                    try {\n                        result = newDir.createNewFile();\n                    } catch (IOException e) {\n                        log.error(""unable to create new file: "" + newDir, e);\n                        result = false;\n                    }\n                }\n                if (result) copy(subFiles[i], newDir);\n            }\n        } else if (from.isFile()) {\n            FileInputStream in = null;\n            FileOutputStream out = null;\n            try {\n                in = new FileInputStream(from);\n                out = new FileOutputStream(to);\n                int fileLength = (int) from.length();\n                char charBuff[] = new char[fileLength];\n                int len;\n                int oneChar;\n                while ((oneChar = in.read()) != -1) {\n                    out.write(oneChar);\n                }\n            } catch (FileNotFoundException e) {\n                log.error(""File not found!"", e);\n            } catch (IOException e) {\n                log.error(""Unable to read from file!"", e);\n            } finally {\n                try {\n                    if (in != null) in.close();\n                    if (out != null) out.close();\n                } catch (IOException e1) {\n                    log.error(""Error closing file reader/writer"", e1);\n                }\n            }\n        }\n    }\n', '    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n']",344,"    public static void copy(File url, File title) {
        boolean result;
        if (url.isDirectory()) {
            File[] newItems = url.listFiles();
            for (int ami = 0; ami < newItems.length; ami++) {
                File newFile = new File(title, newItems[ami].getName());
                result = false;
                if (newItems[ami].isDirectory()) {
                    if (newFile.exists()) result = true; else result = newFile.mkdirs();
                } else if (newItems[ami].isFile()) {
                    try {
                        result = newFile.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newFile, e);
                        result = false;
                    }
                }
                if (result) copy(newItems[ami], newFile);
            }
        } else if (url.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(url);
                out = new FileOutputStream(title);
                int fileLength = (int) url.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",1,1,0,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:-5.0193385074013155e-08,from:1.0247816119277685e-06,to:3.764503880550987e-07,result:3.074344835783306e-07,subFiles:4.140954268606085e-07,i:2.0495632238555373e-07,newDir:1.2548346268503289e-08,in:5.437616716351425e-07,out:3.032517014888295e-07,fileLength:1.6731128358004385e-08,charBuff:1.8822519402754933e-08,len:1.045695522375274e-08,oneChar:5.64675582082648e-08,",5,31,"from:url,to:title,i:ami,subFiles:newItems,newDir:newFile,",Greedy,,
,,,,,,,,,,,,,,,
72,"['22993368', '13783549', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    private static void copy(String sourceName, String destName) throws IOException {\n        File source = new File(sourceName);\n        File dest = new File(destName);\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n']",194,"    public static boolean decodeStringTofile(String outfolder, String Outfilename) {
        boolean  failure = false;
        java.io.InputStream form = null;
        java.io.OutputStream OU = null;
        try {
            form = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfolder)), Base64.DECODE);
            OU = new java.io.BufferedOutputStream(new java.io.FileOutputStream(Outfilename));
            byte[] batch = new byte[65536];
            int through = -1;
            while ((through = form.through(batch)) >= 0) {
                OU.write(batch, 0, through);
            }
             failure = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                form.close();
            } catch (Exception exc) {
            }
            try {
                OU.close();
            } catch (Exception exc) {
            }
        }
        return  failure;
    }
",1,1,1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:2.254610476286515e-07,infile:1.0366025178328804e-08,outfile:-5.183012589164402e-08,in:7.774518883746603e-07,out:8.292820142663043e-08,buffer:-6.219615106997282e-08,read:1.6585640285326086e-07,success:1.5549037767493206e-08,",8,23,"infile:outfolder,in:form,outfile:Outfilename,out:OU,decodeFileToFile:decodeStringTofile,buffer:batch,read:through,success: failure,",Greedy,,
,,,,,,,,,,,,,,,
73,"['14473781', '10158738', '        @Override\n        protected String doInBackground(Void... params) {\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpContext localContext = new BasicHttpContext();\n            HttpPost httpPost = new HttpPost(urlFormated);\n            try {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n                for (int index = 0; index < POSTparamList.size(); index++) {\n                    if (POSTparamList.get(index).getName().equalsIgnoreCase(""image"")) {\n                        entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n                    } else {\n                        entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));\n                    }\n                }\n                httpPost.setEntity(entity);\n                HttpResponse response = httpClient.execute(httpPost, localContext);\n                return processAnswer(response);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n', '    public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);\n                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;\n                int row;\n                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf(\'*\') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);\n                boolean use = determineRecognitionUse(root, surface);\n                bumpAllRowsDown(stmt, language, tag, row);\n                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values (\'"" + language + ""\', "" + row + "", \'"" + root + ""\', \'"" + surface + ""\', \'"" + tag + ""\', "";\n                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";\n                stmt.executeUpdate(sql);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }\n']",202,"        @Override
        protected String doAsAsync(Void... config) {
            HttpClient httpContext = new DefaultHttpClient();
            HttpContext sessionContext = new BasicHttpContext();
            HttpPost httpsPre = new HttpPost(urlFormated);
            try {
                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
                for (int index = 0; index < POSTparamList.size(); index++) {
                    if (POSTparamList.get(index).getName().equalsIgnoreCase(""image"")) {
                        entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));
                    } else {
                        entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));
                    }
                }
                httpsPre.setEntity(entity);
                HttpResponse context = httpContext.execute(httpsPre, sessionContext);
                return processAnswer(context);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
",0,0,0,-1,"doInBackground,params,httpClient,localContext,httpPost,entity,index,response","doInBackground:7.45317210321841e-06,params:6.219615106997282e-08,httpClient:-2.2271405095639434e-05,localContext:-9.821808856466541e-06,httpPost:3.918357517408288e-06,entity:-2.4650407874065895e-05,index:-6.19680985160496e-05,response:-3.6281088124150815e-06,",6,11,"index:index,entity:entity,httpPost:httpsPre,httpClient:httpContext,localContext:sessionContext,doInBackground:doAsAsync,params:config,response:context,",Greedy,,
,,,,,,,,,,,,,,,
74,"['17627195', '7468827', '    public Document getContentAsDocument() {\n        synchronized (this.url) {\n            URLConnection connection = this.url.openConnection();\n            if (doReload(connection)) {\n                InputSource inputSource = new InputSource(connection.getInputStream());\n                DocumentBuilderFactory factory = new DocumentBuilderFactoryImpl();\n                this.document = factory.newDocumentBuilder().parse(inputSource);\n            }\n            return this.document;\n        }\n    }\n', '        public void run() {\n            try {\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(""GET"");\n                con.setDoInput(true);\n                byte[] encodedPassword = (username + "":"" + password).getBytes();\n                BASE64Encoder encoder = new BASE64Encoder();\n                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));\n                BufferedInputStream in = new BufferedInputStream(con.getInputStream());\n                FileOutputStream fos = new FileOutputStream(toFile);\n                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);\n                byte[] data = new byte[1024];\n                int x = 0;\n                while ((x = in.read(data, 0, 1024)) >= 0) {\n                    bout.write(data, 0, x);\n                    lastIteraction = System.currentTimeMillis();\n                }\n                bout.flush();\n                bout.close();\n                fos.flush();\n                fos.close();\n                in.close();\n                con.disconnect();\n                finish = true;\n            } catch (Exception e) {\n                this.e = e;\n            }\n        }\n']",77,"    public Document getContentasHTML() {
        synchronized (this.url) {
            URLConnection statement = this.url.openConnection();
            if (doReload(statement)) {
                InputSource outputStream = new InputSource(statement.getInputStream());
                DocumentBuilderFactory Fitter = new DocumentBuilderFactoryImpl();
                this.dom = Fitter.newDocumentBuilder().parse(outputStream);
            }
            return this.dom;
        }
    }
",0,0,0,-1,"getContentAsDocument,connection,inputSource,factory,document","getContentAsDocument:-2.384185791015625e-08,connection:-1.430511474609375e-07,inputSource:-4.76837158203125e-08,factory:-2.384185791015625e-08,document:-9.5367431640625e-08,",5,10,"inputSource:outputStream,factory:Fitter,document:dom,connection:statement,getContentAsDocument:getContentasHTML,",Greedy,,
,,,,,,,,,,,,,,,
75,"['16851955', '18238468', '    @Test\n    public void testTrainingBackprop() throws IOException {\n        File temp = File.createTempFile(""fannj_"", "".tmp"");\n        temp.deleteOnExit();\n        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));\n        List<Layer> layers = new ArrayList<Layer>();\n        layers.add(Layer.create(2));\n        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));\n        Fann fann = new Fann(layers);\n        Trainer trainer = new Trainer(fann);\n        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);\n        float desiredError = .001f;\n        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);\n        assertTrue("""" + mse, mse <= desiredError);\n    }\n', '    @Test\n    public void testLoadSource() throws IOException {\n        ArticleMetadata metadata = new ArticleMetadata();\n        metadata.setId(""http://arxiv.org/abs/math/0205003v1"");\n        InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n        Assert.assertNotNull(inputStream);\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(inputStream, writer, ""utf8"");\n        String contents = writer.toString();\n        Assert.assertTrue(contents.contains(""A strengthening of the Nyman""));\n        inputStream.close();\n    }\n']",190,"    @Test
    public void testTestingbackward() throws IOException {
        File zip = File.createTempFile(""fannj_"", "".tmp"");
        zip.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(zip));
        List<Layer> lowers = new ArrayList<Layer>();
        lowers.add(Layer.create(2));
        lowers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        lowers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        lowers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fmanann = new Fann(lowers);
        Trainer formacer = new Trainer(fmanann);
        formacer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float DesiredException = .001f;
        float cmese = formacer.train(zip.getPath(), 500000, 1000, DesiredException);
        assertTrue("""" + cmese, cmese <= DesiredException);
    }
",1,1,1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse","testTrainingBackprop:1.625581221147017e-08,temp:1.1379068548029119e-06,layers:6.827441128817471e-07,fann:-5.418604070490057e-08,trainer:2.92604619806463e-07,desiredError:-1.3004649769176135e-07,mse:-1.625581221147017e-07,",7,22,"temp:zip,trainer:formacer,desiredError:DesiredException,mse:cmese,fann:fmanann,layers:lowers,testTrainingBackprop:testTestingbackward,",Greedy,,
,,,,,,,,,,,,,,,
76,"['2009072', '4389475', '    public InputStream openInput(Fragment path) throws IOException {\n        int len = path.words().size();\n        String p = Util.combine(""/"", path.words().subList(1, len));\n        URL url = new URL(""http"", path.words().get(0), p);\n        InputStream result = url.openStream();\n        return result;\n    }\n', '    @Override\n    public URLConnection openConnection(URL url) throws IOException {\n        if (!url.getProtocol().equals(""file"")) {\n            String name = url.getFile();\n            File f = new File(cacheFolder, ((name.charAt(0) == \'/\') ? name.substring(1) : name).replace(\'/\', File.separatorChar));\n            if (!f.exists()) {\n                File f2 = new File(f.getParentFile(), f.getName() + ""-not_found"");\n                if (!f2.exists()) {\n                    try {\n                        f.getParentFile().mkdirs();\n                        downloadFile(url, f);\n                    } catch (IOException e) {\n                        f.delete();\n                        throw e;\n                    }\n                }\n            }\n            return f.toURI().toURL().openConnection();\n        }\n        return super.openConnection(url);\n    }\n']",82,,0,0,,-3,"openInput,path,len,p,url,result",,,,,Greedy,,
,,,,,,,,,,,,,,,
77,"['7006052', '23370621', '    public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n        File destFile = new File(dest);\n        InputStream in = new FileInputStream(new File(src));\n        OutputStream out = new FileOutputStream(destFile);\n        byte buf[] = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n', '    private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {\n        InputStream in = downloadData(s3key);\n        if (in == null) {\n            throw new IOException(""No data found"");\n        }\n        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));\n        File temp = File.createTempFile(""dirsync"", null);\n        FileOutputStream fout = new FileOutputStream(temp);\n        try {\n            IOUtils.copy(in, fout);\n            if (target.exists()) {\n                target.delete();\n            }\n            IOUtils.closeQuietly(fout);\n            IOUtils.closeQuietly(in);\n            FileUtils.moveFile(temp, target);\n        } catch (IOException e) {\n            fetchStream(in);\n            throw e;\n        } finally {\n            IOUtils.closeQuietly(fout);\n            IOUtils.closeQuietly(in);\n        }\n    }\n']",101,"    public static void copyfileFrom(String url, String dest) throws FileNotFoundException, IOException {
        File DestDir = new File(dest);
        InputStream ai = new FileInputStream(new File(url));
        OutputStream client = new FileOutputStream(DestDir);
        byte br[] = new byte[1024];
        int str;
        while ((str = ai.read(br)) > 0) client.write(br, 0, str);
        ai.close();
        client.close();
    }
",1,1,1,-1,"copyFileTo,src,dest,destFile,in,out,buf,len","copyFileTo:4.548775522332442e-07,src:2.509669253700658e-07,dest:1.8822519402754934e-07,destFile:-2.0077354029605262e-07,in:7.717232955129522e-07,out:3.5762786865234375e-07,buf:2.258702328330592e-07,len:-1.694026746247944e-07,",7,17,"src:url,in:ai,out:client,buf:br,len:str,dest:dest,destFile:DestDir,copyFileTo:copyfileFrom,",Greedy,,
,,,,,,,,,,,,,,,
78,"['9275622', '255765', '    private boolean copyFile(File _file1, File _file2) {\n        FileInputStream fis;\n        FileOutputStream fos;\n        try {\n            fis = new FileInputStream(_file1);\n            fos = new FileOutputStream(_file2);\n            FileChannel canalFuente = fis.getChannel();\n            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n            fis.close();\n            fos.close();\n            return true;\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n        return false;\n    }\n', '    private static void main(String[] args) {\n        try {\n            File f = new File(""test.txt"");\n            if (f.exists()) {\n                throw new IOException(f + "" already exists.  I don\'t want to overwrite it."");\n            }\n            StraightStreamReader in;\n            char[] cbuf = new char[0x1000];\n            int read;\n            int totRead;\n            FileOutputStream out = new FileOutputStream(f);\n            for (int i = 0x00; i < 0x100; i++) {\n                out.write(i);\n            }\n            out.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            for (int i = 0x00; i < 0x100; i++) {\n                read = in.read();\n                if (read != i) {\n                    System.err.println(""Error: "" + i + "" read as "" + read);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = in.read(cbuf);\n            if (totRead != 0x100) {\n                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i] != i) {\n                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = 0;\n            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n                totRead += read;\n            }\n            if (totRead != 0x100) {\n                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i] != i) {\n                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = 0;\n            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n                totRead += read;\n            }\n            if (totRead != 0x100) {\n                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i + 0x123] != i) {\n                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = 0;\n            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n                totRead += read;\n            }\n            if (totRead != 0x100) {\n                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i + 0x123] != i) {\n                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);\n                }\n            }\n            in.close();\n            f.delete();\n        } catch (IOException x) {\n            System.err.println(x.getMessage());\n        }\n    }\n']",98,"    private boolean  duplicateStream(File _link2, File _FileTwo) {
        FileInputStream kios;
        FileOutputStream hose;
        try {
            kios = new FileInputStream(_link2);
            hose = new FileOutputStream(_FileTwo);
            FileChannel canalUteree = kios.getChannel();
            canalUteree.transferTo(0, canalUteree.size(), hose.getChannel());
            kios.close();
            hose.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
",1,1,1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente","copyFile:2.7567148208618164e-07,_file1:2.980232238769531e-07,_file2:1.6391277313232422e-07,fis:1.1026859283447266e-06,fos:5.066394805908203e-07,canalFuente:2.2351741790771484e-08,",6,16,"_file1:_link2,fis:kios,_file2:_FileTwo,fos:hose,canalFuente:canalUteree,copyFile: duplicateStream,",Greedy,,
,,,,,,,,,,,,,,,
79,"['9857412', '13368520', '    @Override\n    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        long transferredBytesNum = 0;\n        long elapsedTime = 0;\n        Properties opts = PropertiesUtils.deserializeProperties(options);\n        String server = opts.getProperty(TRANSFER_OPTION_SERVER);\n        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);\n        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);\n        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);\n        if (transferMetaData) {\n            int idx = filePath.lastIndexOf(PATH_SEPARATOR);\n            if (idx != -1) {\n                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;\n                filePath = filePath.substring(0, idx);\n                filePath = filePath + PATH_SEPARATOR + fileName;\n            } else {\n                filePath += META_DATA_FILE_SUFIX;\n            }\n        }\n        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");\n        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));\n        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);\n        OutputStream os = urlc.getOutputStream();\n        ByteArrayInputStream bis = new ByteArrayInputStream(data);\n        byte[] buffer = new byte[1024];\n        int br;\n        while ((br = bis.read(buffer)) > 0) {\n            os.write(buffer, 0, br);\n            if (!transferMetaData) {\n                transferredBytesNum += br;\n                elapsedTime = System.currentTimeMillis() - startTime;\n                fireOnProgressEvent(transferredBytesNum, elapsedTime);\n            }\n        }\n        bis.close();\n        os.close();\n    }\n', '    public void sendTextFile(String filename) throws IOException {\n        Checker.checkEmpty(filename, ""filename"");\n        URL url = _getFile(filename);\n        PrintWriter out = getWriter();\n        Streams.copy(new InputStreamReader(url.openStream()), out);\n        out.close();\n    }\n']",330,"    @Override
    public void exportFile(byte[] DATA, byte[] currency, boolean transfermetaData) throws Throwable {
        long launchPath = System.currentTimeMillis();
        long transferredbytesnum = 0;
        long lapseTimeout = 0;
        Properties  oppt = PropertiesUtils.deserializeProperties(currency);
        String localhost =  oppt.getProperty(TRANSFER_OPTION_SERVER);
        String login =  oppt.getProperty(TRANSFER_OPTION_USERNAME);
        String resource =  oppt.getProperty(TRANSFER_OPTION_PASSWORD);
        String FilePATH =  oppt.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transfermetaData) {
            int IDmx = FilePATH.lastIndexOf(PATH_SEPARATOR);
            if (IDmx != -1) {
                String  fileData = FilePATH.substring(IDmx + 1) + META_DATA_FILE_SUFIX;
                FilePATH = FilePATH.substring(0, IDmx);
                FilePATH = FilePATH + PATH_SEPARATOR +  fileData;
            } else {
                FilePATH += META_DATA_FILE_SUFIX;
            }
        }
        URL http = new URL(PROTOCOL_PREFIX + login + "":"" + resource + ""@"" + localhost + FilePATH + "";type=i"");
        URLConnection urlcp = http.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlcp.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlcp.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlcp.getOutputStream();
        ByteArrayInputStream rison = new ByteArrayInputStream(DATA);
        byte[] bar = new byte[1024];
        int buf;
        while ((buf = rison.read(bar)) > 0) {
            os.write(bar, 0, buf);
            if (!transfermetaData) {
                transferredbytesnum += buf;
                lapseTimeout = System.currentTimeMillis() - launchPath;
                fireOnProgressEvent(transferredbytesnum, lapseTimeout);
            }
        }
        rison.close();
        os.close();
    }
",0,0,0,-1,"writeData,data,options,transferMetaData,startTime,transferredBytesNum,elapsedTime,opts,server,username,password,filePath,idx,fileName,url,urlc,os,bis,buffer,br","writeData:6.253602074795082e-08,data:9.771253241867316e-08,options:1.328890440893955e-07,transferMetaData:-3.5176511670722333e-07,startTime:-1.7979105965035862e-07,transferredBytesNum:-3.9280438032306607e-07,elapsedTime:-3.634906205974641e-07,opts:-2.3451007780481557e-07,server:-3.9085012967469266e-08,username:1.5634005186987706e-08,password:-4.299351426421619e-08,filePath:-2.075414188572618e-06,idx:-8.598702852843238e-08,fileName:5.86275194512039e-08,url:-4.6511165431288426e-07,urlc:-2.6343298740074286e-06,os:-4.397063958840292e-07,bis:-2.0519631807921362e-07,buffer:-4.22118140048668e-07,br:-3.0486310114626027e-07,",19,58,"server:localhost,username:login,password:resource,filePath:FilePATH,url:http,urlc:urlcp,idx:IDmx,fileName: fileData,options:currency,opts: oppt,startTime:launchPath,writeData:exportFile,data:DATA,transferMetaData:transfermetaData,transferredBytesNum:transferredbytesnum,elapsedTime:lapseTimeout,bis:rison,os:os,buffer:bar,br:buf,",Greedy,,
,,,,,,,,,,,,,,,
80,"['12537270', '8665321', '    public Vector parse(String link) {\n        addMessage(""Parsing: "" + link);\n        links.removeAllElements();\n        URLConnection conn = null;\n        Reader rd = null;\n        EditorKit kit = new HTMLEditorKit();\n        Document doc = kit.createDefaultDocument();\n        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);\n        URL url = null;\n        try {\n            url = new URL(link);\n        } catch (MalformedURLException err) {\n            System.out.println(""Malformed URL"");\n            return links;\n        }\n        try {\n            conn = new URL(link).openConnection();\n            rd = new InputStreamReader(conn.getInputStream());\n        } catch (Exception err) {\n            err.printStackTrace();\n            return links;\n        }\n        try {\n            kit.read(rd, doc, 0);\n            ElementIterator it = new ElementIterator(doc);\n            javax.swing.text.Element elem;\n            while ((elem = it.next()) != null) {\n                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);\n                if (s != null) {\n                    if (s.toString().indexOf(""script"") >= 0) continue;\n                    String lnk = """";\n                    try {\n                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();\n                    } catch (Exception err) {\n                        continue;\n                    }\n                    int j = 0;\n                    if ((j = lnk.indexOf(\'#\')) >= 0) lnk = lnk.substring(0, j);\n                    URL urlLink = new URL(url, lnk);\n                    if (!url.getHost().equals(urlLink.getHost())) continue;\n                    String str = urlLink.toString();\n                    if (!str.startsWith(""http"")) continue;\n                    if (str.endsWith("".pdf"")) {\n                        continue;\n                    }\n                    for (int i = 0; i < leaveSuffix.length; i++) {\n                        if ((str.endsWith(leaveSuffix[i]))) continue;\n                    }\n                    boolean skip = false;\n                    for (int i = 0; i < suffix.length; i++) {\n                        if ((str.endsWith(suffix[i]))) skip = true;\n                    }\n                    if (!skip) {\n                        try {\n                            conn = urlLink.openConnection();\n                        } catch (Exception err) {\n                        }\n                        String contentType = null;\n                        if (contentType == null) contentType = conn.getContentType();\n                        if (contentType.equals(""application/pdf"")) {\n                            continue;\n                        } else if (!contentType.equals(""text/html"")) {\n                            continue;\n                        }\n                    }\n                    if (!links.contains(urlLink.toString())) {\n                        links.addElement(urlLink.toString());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return links;\n    }\n', '    public Vector<String> getNetworkServersIPs(String netaddress) {\n        Vector<String> result = new Vector<String>();\n        boolean serverline = false;\n        String line;\n        String[] splitline;\n        try {\n            URL url = new URL(netaddress);\n            URLConnection connection = url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            while ((line = reader.readLine()) != null) {\n                if ((serverline) && line.startsWith("";"")) {\n                    serverline = false;\n                }\n                if (serverline) {\n                    splitline = line.split("":"");\n                    result.add(splitline[1]);\n                }\n                if (line.startsWith(""!SERVERS"")) {\n                    serverline = true;\n                }\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n']",553,"    public Vector load(String line) {
        addMessage(""Parsing: "" + line);
        links.removeAllElements();
        URLConnection err = null;
        Reader rx = null;
        EditorKit tk = new HTMLEditorKit();
        Document file = tk.createDefaultDocument();
        file.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL addr = null;
        try {
            addr = new URL(line);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            err = new URL(line).openConnection();
            rx = new InputStreamReader(err.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            tk.read(rx, file, 0);
            ElementIterator li = new ElementIterator(file);
            javax.swing.text.Element seem;
            while ((seem = li.next()) != null) {
                SimpleAttributeSet gs = (SimpleAttributeSet) seem.getAttributes().getAttribute(HTML.Tag.A);
                if (gs != null) {
                    if (gs.toString().indexOf(""script"") >= 0) continue;
                    String linek = """";
                    try {
                        linek = gs.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int jl = 0;
                    if ((jl = linek.indexOf('#')) >= 0) linek = linek.substring(0, jl);
                    URL sslLink = new URL(addr, linek);
                    if (!addr.getHost().equals(sslLink.getHost())) continue;
                    String txt = sslLink.toString();
                    if (!txt.startsWith(""http"")) continue;
                    if (txt.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int и = 0; и < leaveSuffix.length; и++) {
                        if ((txt.endsWith(leaveSuffix[и]))) continue;
                    }
                    boolean skip = false;
                    for (int и = 0; и < gsuffix.length; и++) {
                        if ((txt.endsWith(suffix[и]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            err = sslLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = err.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(sslLink.toString())) {
                        links.addElement(sslLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
",0,0,0,-1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip","parse:-8.381903171539307e-08,link:-2.6211142539978027e-05,conn:-2.3939646780490875e-05,rd:-5.202367901802063e-06,kit:-1.4442019164562225e-05,doc:-1.895800232887268e-05,url:-1.5020370483398438e-05,it:-8.847564458847046e-07,elem:-4.4871121644973755e-06,s:-1.1473894119262695e-06,lnk:7.214024662971497e-06,j:-8.046627044677734e-07,urlLink:-6.688758730888367e-06,str:-5.741603672504425e-06,i:-6.22868537902832e-06,skip:-6.09084963798523e-07,",15,61,"it:li,elem:seem,i:и,s:gs,link:line,conn:err,rd:rx,lnk:linek,j:jl,str:txt,kit:tk,doc:file,url:addr,parse:load,urlLink:sslLink,skip:skip,",Greedy,,
,,,,,,,,,,,,,,,
81,"['3024987', '22441244', '    @Test\n    public void testCopy_readerToOutputStream_Encoding() throws Exception {\n        InputStream in = new ByteArrayInputStream(inData);\n        in = new YellOnCloseInputStreamTest(in);\n        Reader reader = new InputStreamReader(in, ""US-ASCII"");\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n        IOUtils.copy(reader, out, ""UTF16"");\n        byte[] bytes = baout.toByteArray();\n        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");\n        assertTrue(""Content differs"", Arrays.equals(inData, bytes));\n    }\n', '    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n        try {\n            if (charset == null) {\n                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n            }\n            if ((body == null) || body.trim().equals("""")) {\n                body = "" "";\n            }\n            Email email = null;\n            if (isHtml) {\n                email = new HtmlEmail();\n            } else {\n                email = new MultiPartEmail();\n            }\n            email.setCharset(charset);\n            Users user = getUser(hsession, repositoryName);\n            Identity identity = getIdentity(hsession, ideIdint, user);\n            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n            if (_from != null) {\n                email.setFrom(_from.getAddress(), _from.getPersonal());\n            }\n            if (_returnPath != null) {\n                email.addHeader(""Return-Path"", _returnPath.getAddress());\n                email.addHeader(""Errors-To"", _returnPath.getAddress());\n                email.addHeader(""X-Errors-To"", _returnPath.getAddress());\n            }\n            if (_replyTo != null) {\n                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n            }\n            if ((_to != null) && (_to.length > 0)) {\n                HashSet aux = new HashSet(_to.length);\n                Collections.addAll(aux, _to);\n                email.setTo(aux);\n            }\n            if ((_cc != null) && (_cc.length > 0)) {\n                HashSet aux = new HashSet(_cc.length);\n                Collections.addAll(aux, _cc);\n                email.setCc(aux);\n            }\n            if ((_bcc != null) && (_bcc.length > 0)) {\n                HashSet aux = new HashSet(_bcc.length);\n                Collections.addAll(aux, _bcc);\n                email.setBcc(aux);\n            }\n            email.setSubject(subject);\n            Date now = new Date();\n            email.setSentDate(now);\n            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            if ((attachments != null) && (attachments.size() > 0)) {\n                for (int i = 0; i < attachments.size(); i++) {\n                    ByteArrayInputStream bais = null;\n                    FileOutputStream fos = null;\n                    try {\n                        MailPartObj obj = (MailPartObj) attachments.get(i);\n                        File file = new File(dir, obj.getName());\n                        bais = new ByteArrayInputStream(obj.getAttachent());\n                        fos = new FileOutputStream(file);\n                        IOUtils.copy(bais, fos);\n                        EmailAttachment attachment = new EmailAttachment();\n                        attachment.setPath(file.getPath());\n                        attachment.setDisposition(EmailAttachment.ATTACHMENT);\n                        attachment.setDescription(""File Attachment: "" + file.getName());\n                        attachment.setName(file.getName());\n                        if (email instanceof MultiPartEmail) {\n                            ((MultiPartEmail) email).attach(attachment);\n                        }\n                    } catch (Exception ex) {\n                    } finally {\n                        IOUtils.closeQuietly(bais);\n                        IOUtils.closeQuietly(fos);\n                    }\n                }\n            }\n            String mid = getId();\n            if (headers != null) {\n                Header xheader;\n                Enumeration xe = headers.getAllHeaders();\n                for (; xe.hasMoreElements(); ) {\n                    xheader = (Header) xe.nextElement();\n                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    }\n                }\n            } else {\n                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");\n                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");\n            }\n            if (priority != null) {\n                if (priority.equals(""high"")) {\n                    email.addHeader(""Importance"", priority);\n                    email.addHeader(""X-priority"", ""1"");\n                } else if (priority.equals(""low"")) {\n                    email.addHeader(""Importance"", priority);\n                    email.addHeader(""X-priority"", ""5"");\n                }\n            }\n            if (email instanceof HtmlEmail) {\n                ((HtmlEmail) email).setHtmlMsg(body);\n            } else {\n                email.setMsg(body);\n            }\n            email.setMailSession(session);\n            email.buildMimeMessage();\n            MimeMessage mime = email.getMimeMessage();\n            int size = MessageUtilities.getMessageSize(mime);\n            if (!controlQuota(hsession, user, size)) {\n                throw new MailException(""ErrorMessages.mail.quota.exceded"");\n            }\n            messageable.saveSentMessage(mid, mime, user);\n            Thread thread = new Thread(new SendMessageThread(email));\n            thread.start();\n        } catch (MailException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new MailException(e);\n        } catch (java.lang.OutOfMemoryError ex) {\n            System.gc();\n            throw new MailException(ex);\n        } catch (Throwable e) {\n            throw new MailException(e);\n        } finally {\n            GeneralOperations.closeHibernateSession(hsession);\n        }\n    }\n']",113,"    @Test
    public void testCopy_readerToOutputStream_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out, ""UTF16"");
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
",1,1,1,-1,"testCopy_readerToOutputStream_Encoding,in,reader,baout,out,bytes","testCopy_readerToOutputStream_Encoding:2.0116567611694336e-07,in:5.662441253662109e-07,reader:5.21540641784668e-07,baout:4.917383193969727e-07,out:6.705522537231445e-07,bytes:8.046627044677734e-07,",0,0,"in:in,bytes:bytes,reader:reader,baout:baout,out:out,testCopy_readerToOutputStream_Encoding:testCopy_readerToOutputStream_Encoding,",Greedy,,
,,,,,,,,,,,,,,,
82,"['8000624', '13362846', '    private void CopyTo(File dest) throws IOException {\n        FileReader in = null;\n        FileWriter out = null;\n        int c;\n        try {\n            in = new FileReader(image);\n            out = new FileWriter(dest);\n            while ((c = in.read()) != -1) out.write(c);\n        } finally {\n            if (in != null) try {\n                in.close();\n            } catch (Exception e) {\n            }\n            if (out != null) try {\n                out.close();\n            } catch (Exception e) {\n            }\n        }\n    }\n', '    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n        if (contenuFichier != null) {\n            SupportDocument support = fichierElectronique.getSupport();\n            support.setFichierElectronique(fichierElectronique);\n            FicheDocument ficheDocument = support.getFicheDocument();\n            String nomFichier = contenuFichier.getNomFichier();\n            String extension = FilenameUtils.getExtension(nomFichier);\n            if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n                }\n            }\n            if (fichierElectronique.getId() == null) {\n                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n                    if (idIgid != null) {\n                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n                    }\n                }\n            }\n            InputStream inputStream = contenuFichier.getInputStream();\n            OutputStream outputStream = fichierElectronique.getOutputStream();\n            try {\n                IOUtils.copy(inputStream, outputStream);\n            } finally {\n                try {\n                    inputStream.close();\n                } finally {\n                    outputStream.close();\n                }\n            }\n            String typeMime = contenuFichier.getContentType();\n            long tailleFichier = contenuFichier.getTailleFichier();\n            Date dateDerniereModification = new Date();\n            fichierElectronique.setNom(nomFichier);\n            fichierElectronique.setTypeMime(extension);\n            creerFormatSiNecessaire(typeMime, extension);\n            fichierElectronique.setTaille(tailleFichier);\n            fichierElectronique.setDateDerniereModification(dateDerniereModification);\n            fichierElectronique.setSoumetteur(utilisateurCourant);\n            if (extension.endsWith(""msg"")) {\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n            } else if (extension.endsWith(""eml"")) {\n                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n            } else {\n                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n            }\n        }\n    }\n']",113,,1,1,,-3,"CopyTo,dest,in,out,c",,,,,Greedy,,
,,,,,,,,,,,,,,,
83,"['9802073', '22752444', '    public void testAutoCommit() throws Exception {\n        Connection con = getConnectionOverrideProperties(new Properties());\n        try {\n            Statement stmt = con.createStatement();\n            assertEquals(0, stmt.executeUpdate(""create table #testAutoCommit (i int)""));\n            con.setAutoCommit(false);\n            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (0)""));\n            con.setAutoCommit(false);\n            con.rollback();\n            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (1)""));\n            con.setAutoCommit(true);\n            con.setAutoCommit(false);\n            con.rollback();\n            con.setAutoCommit(true);\n            ResultSet rs = stmt.executeQuery(""select i from #testAutoCommit"");\n            assertTrue(rs.next());\n            assertEquals(1, rs.getInt(1));\n            assertFalse(rs.next());\n            rs.close();\n            stmt.close();\n        } finally {\n            con.close();\n        }\n    }\n', '    public synchronized String encrypt(String plainText) {\n        String hash = null;\n        try {\n            MessageDigest md = null;\n            try {\n                md = MessageDigest.getInstance(""SHA"");\n            } catch (NoSuchAlgorithmException e) {\n                throw new NoSuchAlgorithmException();\n            }\n            try {\n                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));\n            } catch (UnsupportedEncodingException e) {\n                throw new UnsupportedEncodingException();\n            }\n            byte raw[] = md.digest();\n            hash = (new BASE64Encoder()).encode(raw);\n        } catch (NoSuchAlgorithmException e) {\n            MessageLog.writeErrorMessage(e, this);\n        } catch (UnsupportedEncodingException e) {\n            MessageLog.writeErrorMessage(e, this);\n        }\n        return Util.stripChars(hash);\n    }\n']",178,"    public void testAutoCommits() throws Exception {
        Connection const = getConnectionOverrideProperties(new Properties());
        try {
            Statement Starm = const.createStatement();
            assertEquals(0, Starm.executeUpdate(""create table #testAutoCommit (i int)""));
            const.setAutoCommit(false);
            assertEquals(1, Starm.executeUpdate(""insert into #testAutoCommit (i) values (0)""));
            const.setAutoCommit(false);
            const.rollback();
            assertEquals(1, Starm.executeUpdate(""insert into #testAutoCommit (i) values (1)""));
            const.setAutoCommit(true);
            const.setAutoCommit(false);
            const.rollback();
            const.setAutoCommit(true);
            ResultSet acks = Starm.executeQuery(""select i from #testAutoCommit"");
            assertTrue(acks.next());
            assertEquals(1, acks.getInt(1));
            assertFalse(acks.next());
            acks.close();
            Starm.close();
        } finally {
            const.close();
        }
    }
",0,0,0,-1,"testAutoCommit,con,stmt,rs","testAutoCommit:-4.578720439564098e-07,con:5.67869706587358e-05,stmt:2.4790113622492008e-05,rs:3.4679066051136362e-06,",4,22,"con:const,stmt:Starm,testAutoCommit:testAutoCommits,rs:acks,",Greedy,,
,,,,,,,,,,,,,,,
84,"['18339787', '8932510', '    private void reload() {\n        if (xml != null) {\n            try {\n                String currentDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());\n                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {\n                    return;\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        XPath xpath = null;\n        try {\n            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n            URLConnection conn = null;\n            URL url = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");\n            conn = url.openConnection();\n            xml = docBuilder.parse(conn.getInputStream());\n            xpath = XPathFactory.newInstance().newXPath();\n            exchangeRateDate = xpath.evaluate(""/Envelope/Cube/Cube/@time"", xml);\n            xpath = XPathFactory.newInstance().newXPath();\n            NodeList currenciesNode = (NodeList) xpath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);\n            currencies = new String[currenciesNode.getLength()];\n            for (int i = 0; i < currencies.length; i++) {\n                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(""currency"").getTextContent();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        InputStream is = null;\n        InputStream page = null;\n        OutputStream os = null;\n        String rootUrl = null;\n        try {\n            boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n            if (!isMultipart) {\n                request.setAttribute(""error"", ""Form isn\'t a multipart form"");\n                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");\n                rd.forward(request, response);\n            }\n            ServletFileUpload upload = new ServletFileUpload();\n            String webUrl = null;\n            FileItemIterator iter = upload.getItemIterator(request);\n            while (iter.hasNext()) {\n                FileItemStream item = iter.next();\n                String name = item.getFieldName();\n                if (name.equals(""webpage"")) {\n                    is = item.openStream();\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    IOUtils.copy(is, baos);\n                    page = new ByteArrayInputStream(baos.toByteArray());\n                } else if (name.equals(""weburl"")) {\n                    InputStream wpIs = null;\n                    try {\n                        webUrl = Streams.asString(item.openStream());\n                        URL u = new URL(webUrl);\n                        wpIs = new BufferedInputStream(u.openStream());\n                        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                        IOUtils.copy(wpIs, baos);\n                        page = new ByteArrayInputStream(baos.toByteArray());\n                    } finally {\n                        IOUtils.closeQuietly(wpIs);\n                    }\n                } else if (name.equals(""rooturl"")) {\n                    rootUrl = Streams.asString(item.openStream());\n                }\n            }\n            if (page == null) {\n                request.setAttribute(""error"", ""Form doesn\'t have an html file"");\n                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");\n                rd.forward(request, response);\n            }\n            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\n            os = new BufferedOutputStream(response.getOutputStream());\n            os.write(delegate.getMailer());\n            os.flush();\n        } catch (Exception e) {\n            streamException(request, response, e);\n        } finally {\n            IOUtils.closeQuietly(page);\n            IOUtils.closeQuietly(is);\n            IOUtils.closeQuietly(os);\n        }\n    }\n']",245,"    private void overload() {
        if (mail != null) {
            try {
                String  currentTime = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if ( currentTime.equalsIgnoreCase(exchangerateMessage)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath xpath = null;
        try {
            DocumentBuilderFactory docPathFactor = DocumentBuilderFactory.newInstance();
            DocumentBuilder DocumentBuild = docPathFactor.newDocumentBuilder();
            URLConnection opens = null;
            URL sl = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            opens = sl.openConnection();
            mail = DocumentBuild.parse(opens.getInputStream());
            xpath = XPathFactory.newInstance().newXPath();
            exchangerateMessage = xpath.evaluate(""/Envelope/Cube/Cube/@time"", mail);
            xpath = XPathFactory.newInstance().newXPath();
            NodeList curriesChan = (NodeList) xpath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", mail, XPathConstants.NODESET);
            constpora = new String[curriesChan.getLength()];
            for (int ki = 0; ki < constpora.length; ki++) {
                constpora[ki] = curriesChan.item(ki).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"reload,currentDate,xpath,docBuilderFactory,docBuilder,conn,url,xml,exchangeRateDate,currenciesNode,currencies,i","reload:8.414773380055146e-08,currentDate:3.856771132525276e-07,xpath:2.243939568014706e-06,docBuilderFactory:7.503172930549173e-07,docBuilder:4.067140467026654e-07,conn:-1.7776208765366499e-06,url:2.328087301815257e-06,xml:7.012311150045955e-07,exchangeRateDate:-9.116004495059742e-08,currenciesNode:-6.41626470229205e-07,currencies:-5.890341366038603e-07,i:-3.0854169060202206e-06,",11,29,"xpath:xpath,xml:mail,currenciesNode:curriesChan,currencies:constpora,i:ki,currentDate: currentTime,exchangeRateDate:exchangerateMessage,docBuilder:DocumentBuild,conn:opens,docBuilderFactory:docPathFactor,url:sl,reload:overload,",Greedy,,
,,,,,,,,,,,,,,,
85,"['2982747', '15166511', '    public FileParse(String fileStr, String type) throws MalformedURLException, IOException {\n        this.inFile = fileStr;\n        this.type = type;\n        System.out.println(""File str "" + fileStr);\n        if (fileStr.indexOf(""http://"") == 0) {\n            URL url = new URL(fileStr);\n            urlconn = url.openConnection();\n            inStream = urlconn.getInputStream();\n            bufReader = new BufferedReader(new InputStreamReader(inStream));\n        } else if (type.equals(""File"")) {\n            File inFile = new File(fileStr);\n            size = inFile.length();\n            inStream = new FileInputStream(inFile);\n            bufReader = new BufferedReader(new InputStreamReader(inStream));\n        } else if (type.equals(""URL"")) {\n            URL url = new URL(fileStr);\n            urlconn = url.openConnection();\n            inStream = urlconn.getInputStream();\n            bufReader = new BufferedReader(new InputStreamReader(inStream));\n        } else if (type.equals(""URLZip"")) {\n            URL url = new URL(fileStr);\n            inStream = new GZIPInputStream(url.openStream(), 16384);\n            InputStreamReader zis = new InputStreamReader(inStream);\n            bufReader = new BufferedReader(zis, 16384);\n        } else {\n            System.out.println(""Unknown FileParse inType "" + type);\n        }\n    }\n', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n']",254,"    public FileParse(String FILESTR, String scope) throws MalformedURLException, IOException {
        this.inUser = FILESTR;
        this.scope = scope;
        System.out.println(""File str "" + FILESTR);
        if (FILESTR.indexOf(""http://"") == 0) {
            URL mail = new URL(FILESTR);
            urldb = mail.openConnection();
            actView = urldb.getInputStream();
            funcReader = new BufferedReader(new InputStreamReader(actView));
        } else if (scope.equals(""File"")) {
            File inUser = new File(FILESTR);
            max = inUser.length();
            actView = new FileInputStream(inUser);
            funcReader = new BufferedReader(new InputStreamReader(actView));
        } else if (scope.equals(""URL"")) {
            URL mail = new URL(FILESTR);
            urldb = mail.openConnection();
            actView = urldb.getInputStream();
            funcReader = new BufferedReader(new InputStreamReader(actView));
        } else if (scope.equals(""URLZip"")) {
            URL mail = new URL(FILESTR);
            actView = new GZIPInputStream(mail.openStream(), 16384);
            InputStreamReader jis = new InputStreamReader(actView);
            funcReader = new BufferedReader(jis, 16384);
        } else {
            System.out.println(""Unknown FileParse inType "" + scope);
        }
    }
",0,0,0,-1,"fileStr,type,inFile,url,urlconn,inStream,bufReader,size,zis","fileStr:2.0460648970170457e-05,type:6.75158067183061e-06,inFile:2.9910694469105112e-06,url:1.1785463853315873e-05,urlconn:4.616650668057528e-06,inStream:6.350603970614347e-06,bufReader:-1.712278886274858e-06,size:8.398836309259589e-08,zis:1.625581221147017e-08,",9,44,"fileStr:FILESTR,url:mail,inStream:actView,bufReader:funcReader,type:scope,zis:jis,inFile:inUser,urlconn:urldb,size:max,",Greedy,,
,,,,,,,,,,,,,,,
86,"['4468255', '7149578', '    public static void copy(File from, File to) {\n        boolean result;\n        if (from.isDirectory()) {\n            File[] subFiles = from.listFiles();\n            for (int i = 0; i < subFiles.length; i++) {\n                File newDir = new File(to, subFiles[i].getName());\n                result = false;\n                if (subFiles[i].isDirectory()) {\n                    if (newDir.exists()) result = true; else result = newDir.mkdirs();\n                } else if (subFiles[i].isFile()) {\n                    try {\n                        result = newDir.createNewFile();\n                    } catch (IOException e) {\n                        log.error(""unable to create new file: "" + newDir, e);\n                        result = false;\n                    }\n                }\n                if (result) copy(subFiles[i], newDir);\n            }\n        } else if (from.isFile()) {\n            FileInputStream in = null;\n            FileOutputStream out = null;\n            try {\n                in = new FileInputStream(from);\n                out = new FileOutputStream(to);\n                int fileLength = (int) from.length();\n                char charBuff[] = new char[fileLength];\n                int len;\n                int oneChar;\n                while ((oneChar = in.read()) != -1) {\n                    out.write(oneChar);\n                }\n            } catch (FileNotFoundException e) {\n                log.error(""File not found!"", e);\n            } catch (IOException e) {\n                log.error(""Unable to read from file!"", e);\n            } finally {\n                try {\n                    if (in != null) in.close();\n                    if (out != null) out.close();\n                } catch (IOException e1) {\n                    log.error(""Error closing file reader/writer"", e1);\n                }\n            }\n        }\n    }\n', '    @Override\n    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\n        String charset = null;\n        IndexDocument sourceDocument = getSourceDocument();\n        if (sourceDocument != null && urlItemFieldEnum != null) {\n            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\n            if (fieldValueItem != null) charset = fieldValueItem.getValue();\n            if (charset == null) {\n                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\n                if (fieldValueItem != null) charset = fieldValueItem.getValue();\n            }\n        }\n        boolean charsetWasNull = charset == null;\n        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);\n        addField(ParserFieldEnum.htmlSource, writer.toString());\n        writer.close();\n        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);\n        if (htmlProvider == null) return;\n        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\n        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");\n        String contentTypeCharset = null;\n        if (contentType != null) {\n            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\n            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;\n        }\n        if (charsetWasNull) {\n            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();\n            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);\n        }\n        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\n        if (rootNode == null) return;\n        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\n            String metaName = metaNode.getAttributeText(""name"");\n            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\n                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\n                String[] fields = field.split(""\\\\."");\n                if (fields != null) {\n                    String content = metaNode.getAttributeText(""content"");\n                    addDirectFields(fields, content);\n                }\n            }\n        }\n        addField(ParserFieldEnum.charset, charset);\n        addFieldTitle(htmlProvider.getTitle());\n        String metaRobots = null;\n        String metaDcLanguage = null;\n        String metaContentLanguage = null;\n        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\n            String attr_name = node.getAttributeText(""name"");\n            String attr_http_equiv = node.getAttributeText(""http-equiv"");\n            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n        }\n        boolean metaRobotsFollow = true;\n        boolean metaRobotsNoIndex = false;\n        if (metaRobots != null) {\n            metaRobots = metaRobots.toLowerCase();\n            if (metaRobots.contains(""noindex"")) {\n                metaRobotsNoIndex = true;\n                addField(ParserFieldEnum.meta_robots, ""noindex"");\n            }\n            if (metaRobots.contains(""nofollow"")) {\n                metaRobotsFollow = false;\n                addField(ParserFieldEnum.meta_robots, ""nofollow"");\n            }\n        }\n        UrlFilterItem[] urlFilterList = getUrlFilterList();\n        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");\n        IndexDocument srcDoc = getSourceDocument();\n        if (srcDoc != null && nodes != null && metaRobotsFollow) {\n            URL currentURL = htmlProvider.getBaseHref();\n            if (currentURL == null && urlItemFieldEnum != null) {\n                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\n                if (fvi != null) currentURL = new URL(fvi.getValue());\n            }\n            for (HtmlNodeAbstract<?> node : nodes) {\n                String href = null;\n                String rel = null;\n                String nodeName = node.getNodeName();\n                if (""a"".equals(nodeName)) {\n                    href = node.getAttributeText(""href"");\n                    rel = node.getAttributeText(""rel"");\n                } else if (""frame"".equals(nodeName)) {\n                    href = node.getAttributeText(""src"");\n                }\n                boolean follow = true;\n                if (rel != null) if (rel.contains(""nofollow"")) follow = false;\n                URL newUrl = null;\n                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\n                if (newUrl != null) {\n                    ParserFieldEnum field = null;\n                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\n                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;\n                    } else {\n                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;\n                    }\n                    addField(field, newUrl.toExternalForm());\n                }\n            }\n        }\n        if (!metaRobotsNoIndex) {\n            nodes = rootNode.getNodes(""html"", ""body"");\n            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");\n            if (nodes != null && nodes.size() > 0) {\n                StringBuffer sb = new StringBuffer();\n                getBodyTextContent(sb, nodes.get(0), true, null);\n                addField(ParserFieldEnum.body, sb);\n            }\n        }\n        Locale lang = null;\n        String langMethod = null;\n        String[] pathHtml = { ""html"" };\n        nodes = rootNode.getNodes(pathHtml);\n        if (nodes != null && nodes.size() > 0) {\n            langMethod = ""html lang attribute"";\n            String l = nodes.get(0).getAttributeText(""lang"");\n            if (l != null) lang = Lang.findLocaleISO639(l);\n        }\n        if (lang == null && metaContentLanguage != null) {\n            langMethod = ""meta http-equiv content-language"";\n            lang = Lang.findLocaleISO639(metaContentLanguage);\n        }\n        if (lang == null && metaDcLanguage != null) {\n            langMethod = ""meta dc.language"";\n            lang = Lang.findLocaleISO639(metaDcLanguage);\n        }\n        if (lang != null) {\n            addField(ParserFieldEnum.lang, lang.getLanguage());\n            addField(ParserFieldEnum.lang_method, langMethod);\n        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n    }\n']",344,,1,1,,-3,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar",,,,,Greedy,,
,,,,,,,,,,,,,,,
87,"['9109613', '20920051', '    public static void fileCopy(String from_name, String to_name) throws IOException {\n        File fromFile = new File(from_name);\n        File toFile = new File(to_name);\n        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);\n        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);\n        if (!fromFile.isFile()) abort(""can\'t copy directory: "" + from_name);\n        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) abort(""destination directory doesn\'t exist: "" + parent);\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n', '    public static void copyTo(File source, File dest) {\n        if (source.isHidden()) ; else if (source.isDirectory()) {\n            File temp = new File(dest.getPath() + ""/"" + source.getName());\n            temp.mkdir();\n            for (File sel : source.listFiles()) copyTo(sel, temp);\n        } else {\n            try {\n                File tempDest = new File(dest.getPath() + ""/"" + source.getName());\n                tempDest.createNewFile();\n                FileChannel sourceCh = new FileInputStream(source).getChannel();\n                FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n                sourceCh.transferTo(0, sourceCh.size(), destCh);\n                sourceCh.close();\n                destCh.close();\n            } catch (IOException ex) {\n                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n    }\n']",346,"    public static void doUpload(String from_client, String into_code) throws IOException {
        File entryName = new File(from_client);
        File ToFile = new File(into_code);
        if (entryName.equals(ToFile)) abort(""cannot copy on itself: "" + from_client);
        if (!entryName.exists()) abort(""no such currentSourcepartName file: "" + from_client);
        if (!entryName.isFile()) abort(""can't copy directory: "" + from_client);
        if (!entryName.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_client);
        if (ToFile.isDirectory()) ToFile = new File(ToFile, entryName.getName());
        if (ToFile.exists()) {
            if (!ToFile.canWrite()) abort(""destination file is unwriteable: "" + into_code);
        } else {
            String this = ToFile.getParent();
            if (this == null) abort(""destination directory doesn't exist: "" + this);
            File directory = new File(this);
            if (!directory.exists()) abort(""destination directory doesn't exist: "" + this);
            if (directory.isFile()) abort(""destination is not a directory: "" + this);
            if (!directory.canWrite()) abort(""destination directory is unwriteable: "" + this);
        }
        FileInputStream entry = null;
        FileOutputStream title = null;
        try {
            entry = new FileInputStream(entryName);
            title = new FileOutputStream(ToFile);
            byte[] entry = new byte[4096];
            int Bytes_write;
            while ((Bytes_write = entry.read(entry)) != -1) title.write(entry, 0, Bytes_write);
        } finally {
            if (entry != null) try {
                entry.close();
            } catch (IOException e) {
                ;
            }
            if (title != null) try {
                title.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",1,1,1,-1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read","fileCopy:1.3495391269899764e-08,from_name:-4.453479119066922e-07,to_name:-2.0243086904849647e-07,fromFile:-6.140403027804393e-07,toFile:-5.668064333357901e-07,parent:-7.24252664817954e-07,dir:-4.4984637566332544e-08,from:0.0,to:2.2492318783166275e-08,buffer:-1.14710825794148e-07,bytes_read:-2.024308690484965e-08,",11,53,"fileCopy:doUpload,from_name:from_client,to_name:into_code,from:entry,to:title,fromFile:entryName,toFile:ToFile,dir:directory,buffer:entry,bytes_read:Bytes_write,parent:this,",Greedy,,
,,,,,,,,,,,,,,,
88,"['20128728', '13516684', '    void copyFile(File src, File dst) throws IOException {\n        FileChannel inChannel = new FileInputStream(src).getChannel();\n        FileChannel outChannel = new FileOutputStream(dst).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n', '    void run(PseudolocalizerArguments arguments) throws IOException {\n        List<String> fileNames = arguments.getFileNames();\n        PseudolocalizationPipeline pipeline = arguments.getPipeline();\n        if (arguments.isInteractive()) {\n            runStdin(pipeline);\n            return;\n        }\n        if (fileNames.size() == 0) {\n            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\n            writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n            return;\n        }\n        String suffix = arguments.getVariant();\n        if (suffix == null) {\n            suffix = ""_pseudo"";\n        } else {\n            suffix = ""_"" + suffix;\n        }\n        for (String fileName : fileNames) {\n            File file = new File(fileName);\n            if (!file.exists()) {\n                System.err.println(""File "" + fileName + "" not found"");\n                continue;\n            }\n            int lastDot = fileName.lastIndexOf(\'.\');\n            String extension;\n            String outFileName;\n            if (lastDot >= 0) {\n                extension = fileName.substring(lastDot + 1);\n                outFileName = fileName.substring(0, lastDot) + suffix + ""."" + extension;\n            } else {\n                extension = """";\n                outFileName = fileName + suffix;\n            }\n            System.out.println(""Processing "" + fileName + "" into "" + outFileName);\n            String fileType = arguments.getType();\n            if (fileType == null) {\n                fileType = extension;\n            }\n            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\n            InputStream inputStream = new FileInputStream(file);\n            List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n            OutputStream outputStream = new FileOutputStream(new File(outFileName));\n            writeMessages(msgCat, processedMessages, outputStream);\n        }\n    }\n']",85,"    void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",1,1,1,-1,"copyFile,src,dst,inChannel,outChannel","copyFile:2.6396342686244416e-07,src:7.833753313337053e-07,dst:5.960464477539062e-07,inChannel:2.980232238769531e-07,outChannel:-4.76837158203125e-07,",0,0,"src:src,inChannel:inChannel,dst:dst,outChannel:outChannel,copyFile:copyFile,",Greedy,,
,,,,,,,,,,,,,,,
89,"['6421904', '20920051', '    public DataRecord addRecord(InputStream input) throws DataStoreException {\n        File temporary = null;\n        try {\n            temporary = newTemporaryFile();\n            DataIdentifier tempId = new DataIdentifier(temporary.getName());\n            usesIdentifier(tempId);\n            long length = 0;\n            MessageDigest digest = MessageDigest.getInstance(DIGEST);\n            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n            try {\n                length = IOUtils.copyLarge(input, output);\n            } finally {\n                output.close();\n            }\n            DataIdentifier identifier = new DataIdentifier(digest.digest());\n            File file;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                file = getFile(identifier);\n                if (!file.exists()) {\n                    File parent = file.getParentFile();\n                    parent.mkdirs();\n                    if (temporary.renameTo(file)) {\n                        temporary = null;\n                    } else {\n                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n                    }\n                }\n                if (file.length() != length) {\n                    if (!file.isFile()) {\n                        throw new IOException(""Not a file: "" + file);\n                    }\n                    throw new IOException(DIGEST + "" collision: "" + file);\n                }\n            }\n            inUse.remove(tempId);\n            return new FileDataRecord(identifier, file);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + "" not available"", e);\n        } catch (IOException e) {\n            throw new DataStoreException(""Could not add record"", e);\n        } finally {\n            if (temporary != null) {\n                temporary.delete();\n            }\n        }\n    }\n', '    public static void copyTo(File source, File dest) {\n        if (source.isHidden()) ; else if (source.isDirectory()) {\n            File temp = new File(dest.getPath() + ""/"" + source.getName());\n            temp.mkdir();\n            for (File sel : source.listFiles()) copyTo(sel, temp);\n        } else {\n            try {\n                File tempDest = new File(dest.getPath() + ""/"" + source.getName());\n                tempDest.createNewFile();\n                FileChannel sourceCh = new FileInputStream(source).getChannel();\n                FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n                sourceCh.transferTo(0, sourceCh.size(), destCh);\n                sourceCh.close();\n                destCh.close();\n            } catch (IOException ex) {\n                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n    }\n']",342,,1,1,,-3,"addRecord,input,temporary,tempId,length,digest,output,file,parent,now",,,,,Greedy,,
,,,,,,,,,,,,,,,
90,"['838844', '17996547', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public static File copyFile(File fileToCopy, File copiedFile) {\n        BufferedInputStream in = null;\n        BufferedOutputStream outWriter = null;\n        if (!copiedFile.exists()) {\n            try {\n                copiedFile.createNewFile();\n            } catch (IOException e1) {\n                e1.printStackTrace();\n                return null;\n            }\n        }\n        try {\n            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\n            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\n            int c;\n            while ((c = in.read()) != -1) outWriter.write(c);\n            in.close();\n            outWriter.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return copiedFile;\n    }\n']",765,"    public void compprocess(File url, File test) throws IOException {
        InputStream reader = new BufferedInputStream(new FileInputStream(url));
        DcmParser d = pfact.newDcmParser(reader);
        Dataset aws = fact.newDataset();
        d.setDcmHandler(aws.getDcmHandler());
        try {
            FileFormat format = d.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            d.parseDcmFile(format, Tags.PixelData);
            if (aws.contains(Tags.StudyInstanceUID) || aws.contains(Tags.SeriesInstanceUID) || aws.contains(Tags.SOPInstanceUID) || aws.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not compprocess"");
                return;
            }
            boolean haspixelData = d.getReadTag() == Tags.PixelData;
            boolean  invalidicate = haspixelData && aws.getInt(Tags.BitsAllocated, 0) == 12;
            int pxls = d.getReadLength();
            if (haspixelData) {
                if ( invalidicate) {
                    aws.putUS(Tags.BitsAllocated, 16);
                    pxls = pxls * 4 / 3;
                }
                if (pxls != (aws.getInt(Tags.BitsAllocated, 0) >>> 3) * aws.getInt(Tags.Rows, 0) * aws.getInt(Tags.Columns, 0) * aws.getInt(Tags.NumberOfFrames, 1) * aws.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + src + "": mismatch pixel data length!"" + "" => do not compprocess"");
                    return;
                }
            }
            aws.putUI(Tags.StudyInstanceUID, uid(studyUID));
            aws.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            aws.putUI(Tags.SOPInstanceUID, uid(instUID));
            aws.putUI(Tags.SOPClassUID, classUID);
            if (!aws.contains(Tags.NumberOfSamples)) {
                aws.putUS(Tags.NumberOfSamples, 1);
            }
            if (!aws.contains(Tags.PhotometricInterpretation)) {
                aws.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                aws.setFileMetaInfo(fact.newFileMetaInfo(aws, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(test));
            try {
            } finally {
                aws.writeFile(out, encodeParam());
                if (haspixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxls + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxls);
                    out.write((byte) (pxls >> 8));
                    out.write((byte) (pxls >> 16));
                    out.write((byte) (pxls >> 24));
                }
                if ( invalidicate) {
                    int b2, b3;
                    for (; pxls > 0; pxls -= 3) {
                        out.write(reader.read());
                        b2 = reader.read();
                        b3 = reader.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxls > 0; --pxls) {
                        out.write(reader.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            reader.close();
        }
    }
",1,1,0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-1.2439230213994565e-07,src:5.183012589164402e-08,dest:1.5030736508576767e-07,in:-1.4512435249660327e-07,p:-2.099120098611583e-07,ds:-4.0427498195482336e-07,format:-4.6647113302479615e-08,hasPixelData:-8.811121401579483e-08,inflate:1.1661778325619904e-08,pxlen:-1.1791353640349014e-07,out:6.841576617697012e-07,",9,67,"src:url,in:reader,p:d,ds:aws,convert:compprocess,dest:test,pxlen:pxls,hasPixelData:haspixelData,inflate: invalidicate,",Greedy,,
,,,,,,,,,,,,,,,
91,"['15745420', '12171364', '    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {\n        String ext = G_File.getExtensao(address);\n        if (ext.equals(""jsp"")) {\n            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);\n        }\n        File temp = new File(localFileName + "".tmp"");\n        if (temp.exists()) temp.delete();\n        OutputStream out = null;\n        URLConnection conn = null;\n        InputStream in = null;\n        try {\n            try {\n                URL url = new URL(address);\n                conn = url.openConnection();\n                in = conn.getInputStream();\n            } catch (FileNotFoundException e2) {\n                throw new UrlNotFoundException();\n            }\n            out = new BufferedOutputStream(new FileOutputStream(temp));\n            byte[] buffer = new byte[1024];\n            int numRead;\n            long numWritten = 0;\n            while ((numRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, numRead);\n                numWritten += numRead;\n            }\n        } catch (UrlNotFoundException exception) {\n            throw exception;\n        } catch (Exception exception) {\n            throw exception;\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException ioe) {\n            }\n        }\n        File oldArq = new File(localFileName);\n        if (oldArq.exists()) {\n            oldArq.delete();\n        }\n        oldArq = null;\n        File nomeFinal = new File(localFileName);\n        temp.renameTo(nomeFinal);\n    }\n', '    private static FrameworkFactory getFrameworkFactory() throws Exception {\n        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");\n        if (url != null) {\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            try {\n                for (String s = br.readLine(); s != null; s = br.readLine()) {\n                    s = s.trim();\n                    if ((s.length() > 0) && (s.charAt(0) != \'#\')) {\n                        return (FrameworkFactory) Class.forName(s).newInstance();\n                    }\n                }\n            } finally {\n                if (br != null) br.close();\n            }\n        }\n        throw new Exception(""Could not find framework factory."");\n    }\n']",301,"    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String word = G_File.getExtensao(address);
        if (word.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);
        }
        File prefix = new File(localFileName + "".tmp"");
        if (prefix.exists()) prefix.delete();
        OutputStream output = null;
        URLConnection client = null;
        InputStream client = null;
        try {
            try {
                URL google = new URL(address);
                client = google.openConnection();
                client = client.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            output = new BufferedOutputStream(new FileOutputStream(prefix));
            byte[] sample = new byte[1024];
            int NUMLength;
            long NumWrit = 0;
            while ((NUMLength = client.read(sample)) != -1) {
                output.write(sample, 0, NUMLength);
                NumWrit += NUMLength;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (client != null) {
                    client.close();
                }
                if (output != null) {
                    output.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldLaqs = new File(localFileName);
        if (oldLaqs.exists()) {
            oldLaqs.delete();
        }
        oldLaqs = null;
        File nomeWall = new File(localFileName);
        prefix.renameTo(nomeWall);
    }
",0,0,0,-1,"download,address,localFileName,ext,temp,out,conn,in,url,buffer,numRead,numWritten,oldArq,nomeFinal","download:-1.0189802750297215e-05,address:-0.00010743866796078889,localFileName:2.0213749097741168e-07,ext:-2.7086423790973164e-05,temp:-0.0001083703144736912,out:-6.136039028997007e-05,conn:-7.385792939559273e-07,in:-6.22285448986551e-05,url:-4.6950319538945735e-05,buffer:1.0340110115382981e-06,numRead:2.2188476894212805e-05,numWritten:6.699043771494989e-06,oldArq:1.8607015195100203e-06,nomeFinal:-6.219615106997283e-07,",11,37,"download:download,address:address,localFileName:localFileName,in:client,ext:word,temp:prefix,out:output,conn:client,url:google,buffer:sample,numRead:NUMLength,nomeFinal:nomeWall,oldArq:oldLaqs,numWritten:NumWrit,",Greedy,,
,,,,,,,,,,,,,,,
92,"['8515891', '20519261', '    protected String readUrl(String svnUrl) throws IOException {\n        URL url = new URL(svnUrl);\n        URLConnection uc = url.openConnection();\n        if (url.getProtocol().equals(""https"")) {\n            String userPassword = user + "":"" + password;\n            String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());\n            uc.setRequestProperty(""Authorization"", ""Basic "" + encoding);\n        }\n        InputStream is = null;\n        String in = null;\n        try {\n            is = uc.getInputStream();\n            in = read(is);\n        } finally {\n            try {\n                is.close();\n            } catch (Exception e) {\n            }\n        }\n        return in;\n    }\n', '    public String readReferenceText(final String ident) throws NoContentException {\n        try {\n            String name = getFilename(ident);\n            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(""/""), name);\n            InputStream in = url.openStream();\n            InputStreamReader isr = new InputStreamReader(in, ""UTF-8"");\n            BufferedReader br = new BufferedReader(isr);\n            StringBuffer buffer = new StringBuffer();\n            String line = br.readLine();\n            while (null != line) {\n                buffer.append(line + ""\\n"");\n                line = br.readLine();\n            }\n            return buffer.toString();\n        } catch (MalformedURLException muEx) {\n            logError(muEx);\n        } catch (UnsupportedEncodingException ueEx) {\n            logError(ueEx);\n        } catch (IOException ioEx) {\n            logError(ioEx);\n        }\n        throw new NoContentException(""Unable to find or read reference text."");\n    }\n']",136,"    protected String readUrl(String svnUrl) throws IOException {
        URL url = new URL(svnUrl);
        URLConnection uc = url.openConnection();
        if (url.getProtocol().equals(""https"")) {
            String  userAuth = user + "":"" + password;
            String cryption = new sun.misc.BASE64Encoder().encode( userAuth.getBytes());
            uc.setRequestProperty(""Authorization"", ""Basic "" + cryption);
        }
        InputStream ís = null;
        String in = null;
        try {
            ís = uc.getInputStream();
            in = read(ís);
        } finally {
            try {
                ís.close();
            } catch (Exception e) {
            }
        }
        return in;
    }
",0,0,1,1,"readUrl,svnUrl,url,uc,userPassword,encoding,is,in","readUrl:-0.005718687176704407,svnUrl:-0.02271975874900818,url:-0.025793445110321046,uc:-0.02630859911441803,userPassword:-0.002970528602600098,encoding:0.005302339792251587,is:-0.02368077039718628,in:-0.0017008781433105469,",3,8,"userPassword: userAuth,encoding:cryption,is:ís,",Greedy,,
,,,,,,,,,,,,,,,
93,"['19810820', '9033639', '    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {\n        FileChannel inputChannel = null;\n        FileChannel outputChannel = null;\n        long length = 0;\n        try {\n            inputChannel = new FileInputStream(src).getChannel();\n            length = inputChannel.size();\n            outputChannel = new FileOutputStream(dst).getChannel();\n            long total = 0;\n            while (total < length) {\n                total += inputChannel.transferTo(0, length, outputChannel);\n            }\n            if (preserveModificationTime) {\n                dst.setLastModified(src.lastModified());\n            }\n        } finally {\n            if (inputChannel != null) {\n                inputChannel.close();\n            }\n            if (outputChannel != null) {\n                outputChannel.close();\n            }\n        }\n    }\n', '    public void testHttpsConnection() throws Throwable {\n        setUpStoreProperties();\n        try {\n            SSLContext ctx = getContext();\n            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);\n            TestHostnameVerifier hnv = new TestHostnameVerifier();\n            HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n            URL url = new URL(""https://localhost:"" + ss.getLocalPort());\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);\n            checkConnectionStateParameters(connection, peerSocket);\n            connection.connect();\n        } finally {\n            tearDownStoreProperties();\n        }\n    }\n']",143,"    public static void  copyFilesFile(File dest, File  dth, boolean preserveModificationsTim) throws IOException {
        FileChannel inputGray = null;
        FileChannel displaychannel = null;
        long HH = 0;
        try {
            inputGray = new FileInputStream(dest).getChannel();
            HH = inputGray.size();
            displaychannel = new FileOutputStream( dth).getChannel();
            long bar = 0;
            while (bar < HH) {
                bar += inputGray.transferTo(0, HH, displaychannel);
            }
            if (preserveModificationsTim) {
                 dth.setLastModified(dest.lastModified());
            }
        } finally {
            if (inputGray != null) {
                inputGray.close();
            }
            if (displaychannel != null) {
                displaychannel.close();
            }
        }
    }
",0,0,0,-1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total","copyFileChannel:-8.830317744502314e-08,src:-5.960464477539062e-07,dst:-2.1192762586805554e-07,preserveModificationTime:3.5321270978009257e-07,inputChannel:1.8013848198784722e-06,outputChannel:1.2583202785915798e-06,length:1.1302806712962962e-06,total:7.02010260687934e-07,",8,27,"src:dest,inputChannel:inputGray,dst: dth,outputChannel:displaychannel,copyFileChannel: copyFilesFile,preserveModificationTime:preserveModificationsTim,length:HH,total:bar,",Greedy,,
,,,,,,,,,,,,,,,
94,"['8062076', '12306305', '    public void updateUser(User portalUserBean, AuthSession authSession) {\n        DatabaseAdapter dbDyn = null;\n        PreparedStatement ps = null;\n        try {\n            dbDyn = DatabaseAdapter.getInstance();\n            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";\n            switch(dbDyn.getFamaly()) {\n                case DatabaseManager.MYSQL_FAMALY:\n                    String idList = authSession.getGrantedCompanyId();\n                    sql += "" ("" + idList + "") "";\n                    break;\n                default:\n                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";\n                    break;\n            }\n            ps = dbDyn.prepareStatement(sql);\n            int num = 1;\n            ps.setString(num++, portalUserBean.getFirstName());\n            ps.setString(num++, portalUserBean.getMiddleName());\n            ps.setString(num++, portalUserBean.getLastName());\n            ps.setString(num++, portalUserBean.getAddress());\n            ps.setString(num++, portalUserBean.getPhone());\n            ps.setString(num++, portalUserBean.getEmail());\n            ps.setLong(num++, portalUserBean.getUserId());\n            switch(dbDyn.getFamaly()) {\n                case DatabaseManager.MYSQL_FAMALY:\n                    break;\n                default:\n                    ps.setString(num++, authSession.getUserLogin());\n                    break;\n            }\n            int i1 = ps.executeUpdate();\n            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);\n            dbDyn.commit();\n        } catch (Exception e) {\n            try {\n                if (dbDyn != null) {\n                    dbDyn.rollback();\n                }\n            } catch (Exception e001) {\n            }\n            String es = ""Error update of portal user"";\n            log.error(es, e);\n            throw new IllegalStateException(es, e);\n        } finally {\n            DatabaseManager.close(dbDyn, ps);\n            dbDyn = null;\n            ps = null;\n        }\n    }\n', '    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n        if (destFile.exists() && destFile.isDirectory()) {\n            throw new IOException(""Destination \'"" + destFile + ""\' exists but is a directory"");\n        }\n        FileChannel input = new FileInputStream(srcFile).getChannel();\n        try {\n            FileChannel output = new FileOutputStream(destFile).getChannel();\n            try {\n                output.transferFrom(input, 0, input.size());\n            } finally {\n                IOUtil.closeQuietly(output);\n            }\n        } finally {\n            IOUtil.closeQuietly(input);\n        }\n        if (srcFile.length() != destFile.length()) {\n            throw new IOException(""Failed to copy full contents from \'"" + srcFile + ""\' to \'"" + destFile + ""\'"");\n        }\n        if (preserveFileDate) {\n            destFile.setLastModified(srcFile.lastModified());\n        }\n    }\n']",340,"    public void UPDATEUser(User portalUserbean, AuthSession selectState) {
        DatabaseAdapter dbCreateily = null;
        PreparedStatement pers = null;
        try {
            dbCreateily = DatabaseAdapter.getInstance();
            String pr = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbCreateily.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String infolist = selectState.getGrantedCompanyId();
                    pr += "" ("" + infolist + "") "";
                    break;
                default:
                    pr += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            pers = dbCreateily.prepareStatement(pr);
            int multi = 1;
            pers.setString(multi++, portalUserbean.getFirstName());
            pers.setString(multi++, portalUserbean.getMiddleName());
            pers.setString(multi++, portalUserbean.getLastName());
            pers.setString(multi++, portalUserbean.getAddress());
            pers.setString(multi++, portalUserbean.getPhone());
            pers.setString(multi++, portalUserbean.getEmail());
            pers.setLong(multi++, portalUserbean.getUserId());
            switch(dbCreateily.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    pers.setString(multi++, selectState.getUserLogin());
                    break;
            }
            int I2 = pers.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + I2);
            dbCreateily.commit();
        } catch (Exception e) {
            try {
                if (dbCreateily != null) {
                    dbCreateily.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbCreateily, pers);
            dbCreateily = null;
            pers = null;
        }
    }
",0,0,0,-1,"updateUser,portalUserBean,authSession,dbDyn,ps,sql,idList,num,i1","updateUser:3.2977415965153623e-06,portalUserBean:0.00012757227971003606,authSession:2.2286405930152308e-05,dbDyn:-1.2975472670335037e-05,ps:0.00019073486328125,sql:7.734848902775691e-06,idList:5.3621255434476416e-06,num:-0.00032614630002241867,i1:1.7697994525615986e-06,",9,52,"sql:pr,idList:infolist,dbDyn:dbCreateily,ps:pers,updateUser:UPDATEUser,portalUserBean:portalUserbean,authSession:selectState,i1:I2,num:multi,",Greedy,,
,,,,,,,,,,,,,,,
95,"['8216539', '21827619', '    protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n        InputStream input = null;\n        StringWriter sw = new StringWriter();\n        try {\n            if (testURL != null) {\n                input = testURL.openStream();\n            } else {\n                input = new FileInputStream(filePath);\n            }\n            IOUtils.copy(input, sw, encoding);\n        } finally {\n            if (input != null) {\n                input.close();\n            }\n        }\n        return sw.toString();\n    }\n', '    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n']",111,"    protected String getFileTextAsString(String filepath, String enode) throws IOException {
        URL testedUrl = Thread.currentThread().getContextClassLoader().getResource(filepath);
        InputStream url = null;
        StringWriter su = new StringWriter();
        try {
            if (testedUrl != null) {
                url = testedUrl.openStream();
            } else {
                url = new FileInputStream(filepath);
            }
            IOUtils.copy(url, su, enode);
        } finally {
            if (url != null) {
                url.close();
            }
        }
        return su.toString();
    }
",0,0,0,-1,"getFileContentAsString,filePath,encoding,testURL,input,sw","getFileContentAsString:-3.6855538686116534e-06,filePath:-3.128250439961751e-05,encoding:-1.0364585452609592e-05,testURL:-1.7911195755004883e-05,input:-3.8504600524902344e-05,sw:-2.2083520889282227e-05,",6,18,"filePath:filepath,testURL:testedUrl,getFileContentAsString:getFileTextAsString,encoding:enode,input:url,sw:su,",Greedy,,
,,,,,,,,,,,,,,,
96,"['19738435', '23677142', '    public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {\n        parseURL = url;\n        URLConnection connection = url.openConnection();\n        if (charset == null) {\n            charset = Charset.forName(""UTF-8"");\n        }\n        Reader reader = new InputStreamReader(connection.getInputStream(), charset);\n        return internalParse(reader, target);\n    }\n', '\tpublic static void BubbleSortShort2(short[] num) {\n\t\tint last_exchange;\n\t\tint right_border = num.length - 1;\n\t\tdo {\n\t\t\tlast_exchange = 0;\n\t\t\tfor (int j = 0; j < num.length - 1; j++) {\n\t\t\t\tif (num[j] > num[j + 1])\n\t\t\t\t{\n\t\t\t\t\tshort temp = num[j];\n\t\t\t\t\tnum[j] = num[j + 1];\n\t\t\t\t\tnum[j + 1] = temp;\n\t\t\t\t\tlast_exchange = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tright_border = last_exchange;\n\t\t} while (right_border > 0);\n\t}\n']",70,"    public Resource load(URL github, IRDFContainer path) throws RDFException, IOException {
        parseUrl = github;
        URLConnection client = github.openConnection();
        if (cheresset == null) {
            cheresset = Charset.forName(""UTF-8"");
        }
        Reader ner = new InputStreamReader(client.getInputStream(), cheresset);
        return internalParse(ner, path);
    }
",0,0,0,-1,"parse,url,target,parseURL,connection,charset,reader","parse:5.449567522321428e-07,url:-5.191990307399205e-05,target:1.7029898507254463e-06,parseURL:6.98225838797433e-07,connection:-6.965228489467075e-06,charset:-6.948198590959821e-06,reader:-1.141003199986049e-06,",7,14,"connection:client,charset:cheresset,reader:ner,url:github,parse:load,target:path,parseURL:parseUrl,",Greedy,,
,,,,,,,,,,,,,,,
97,"['2668853', '19096138', '    public static boolean decodeFileToFile(final String infile, final String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            final byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (final java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (final Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (final Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void main(String[] args) {\n        String logFileName = args[0];\n        int extractLineEvery = new Integer(args[1]).intValue();\n        String filterToken = ""P0"";\n        if (args.length > 2) {\n            filterToken = args[2];\n        }\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(logFileName));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));\n            String readLine;\n            int x = 0;\n            while ((readLine = br.readLine()) != null) {\n                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n                    bw.write(readLine + ""\\n"");\n                }\n            }\n            bw.flush();\n            bw.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n']",200,"    public static boolean decodeFileToPage(final String outFile, final String listfp) {
        boolean response = false;
        java.io.InputStream form = null;
        java.io.OutputStream writer = null;
        try {
            form = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outFile)), Base64.DECODE);
            writer = new java.io.BufferedOutputStream(new java.io.FileOutputStream(listfp));
            final byte[] batch = new byte[65536];
            int through = -1;
            while ((through = form.through(batch)) >= 0) {
                writer.write(batch, 0, through);
            }
            response = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                form.close();
            } catch (final Exception exc) {
            }
            try {
                writer.close();
            } catch (final Exception exc) {
            }
        }
        return response;
    }
",1,1,1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:2.2286954133406928e-07,infile:1.5549037767493207e-07,outfile:1.0366025178328804e-08,in:1.0366025178328804e-06,out:3.1098075534986414e-07,buffer:3.4207883088485053e-07,read:7.256217624830162e-07,success:1.2439230213994565e-07,",8,23,"infile:outFile,in:form,outfile:listfp,out:writer,decodeFileToFile:decodeFileToPage,buffer:batch,read:through,success:response,",Greedy,,
,,,,,,,,,,,,,,,
98,"['5237257', '20100809', '    private void download(String fileName) {\n        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });\n        if (filePath != null) {\n            InputStream in = null;\n            OutputStream out = null;\n            try {\n                in = this.getClass().getResourceAsStream(""/"" + fileName);\n                out = new FileOutputStream(filePath);\n                IOUtils.copy(in, out);\n            } catch (IOException ioe) {\n                Activator.showExceptionDialog(ioe);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n            }\n        }\n    }\n', '    public static void copy(File srcPath, File dstPath) throws IOException {\n        if (srcPath.isDirectory()) {\n            if (!dstPath.exists()) {\n                boolean result = dstPath.mkdir();\n                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);\n            }\n            String[] files = srcPath.list();\n            for (String file : files) {\n                copy(new File(srcPath, file), new File(dstPath, file));\n            }\n        } else {\n            if (srcPath.exists()) {\n                FileChannel in = null;\n                FileChannel out = null;\n                try {\n                    in = new FileInputStream(srcPath).getChannel();\n                    out = new FileOutputStream(dstPath).getChannel();\n                    long size = in.size();\n                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n                    out.write(buf);\n                } finally {\n                    if (in != null) in.close();\n                    if (out != null) out.close();\n                }\n            }\n        }\n    }\n']",160,"    private void  zip(String FileTime) {
        String languageName = Activator.showSaveDialog(FileTime, new String[] { "".xls"" });
        if (languageName != null) {
            InputStream or = null;
            OutputStream gt = null;
            try {
                or = this.getClass().getResourceAsStream(""/"" + FileTime);
                gt = new FileOutputStream(languageName);
                IOUtils.copy(or, gt);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (or != null) {
                    try {
                        or.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (gt != null) {
                    try {
                        gt.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
",1,1,1,-1,"download,fileName,filePath,in,out","download:4.558002247529871e-07,fileName:9.466620052562041e-07,filePath:5.048864028033088e-07,in:2.7698629042681525e-06,out:4.312571357278263e-06,",5,17,"fileName:FileTime,filePath:languageName,in:or,out:gt,download: zip,",Greedy,,
,,,,,,,,,,,,,,,
99,"['15896098', '22479286', '    public String getSHA256Checksum(String source) {\n        String checksum = """";\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA-256"");\n            md.update(source.getBytes());\n            byte[] byteData = md.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < byteData.length; i++) {\n                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n            }\n            System.out.println(""Hex format : "" + sb.toString());\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < byteData.length; i++) {\n                String hex = Integer.toHexString(0xff & byteData[i]);\n                if (hex.length() == 1) {\n                    hexString.append(\'0\');\n                }\n                hexString.append(hex);\n            }\n            checksum = hexString.toString();\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return checksum;\n    }\n', '    public String md5(String plainText) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(""MD5"");\n        md.update(plainText.getBytes());\n        byte[] digest = md.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < digest.length; i++) {\n            plainText = Integer.toHexString(0xFF & digest[i]);\n            if (plainText.length() < 2) {\n                plainText = ""0"" + plainText;\n            }\n            hexString.append(plainText);\n        }\n        return hexString.toString();\n    }\n']",228,"    public String getSHA256Checksums(String path) {
        String csume = """";
        try {
            MessageDigest Cmd = MessageDigest.getInstance(""SHA-256"");
            Cmd.update(path.getBytes());
            byte[] channelParts = Cmd.digest();
            StringBuffer mb = new StringBuffer();
            for (int ind = 0; ind < channelParts.length; ind++) {
                mb.append(Integer.toString((channelParts[ind] & 0xff) + 0x100, 16).substring(1));
            }
            System.out.println(""Hex format : "" + mb.toString());
            StringBuffer shortResource = new StringBuffer();
            for (int ind = 0; ind < channelParts.length; ind++) {
                String dump = Integer.toHexString(0xff & channelParts[ind]);
                if (dump.length() == 1) {
                    shortResource.append('0');
                }
                shortResource.append(dump);
            }
            csume = shortResource.toString();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        return csume;
    }
",1,1,1,-1,"getSHA256Checksum,source,checksum,md,byteData,sb,i,hexString,hex","getSHA256Checksum:7.133930921554565e-07,source:6.183981895446777e-07,checksum:-4.3585896492004395e-07,md:-2.4531036615371704e-06,byteData:1.7415732145309448e-06,sb:-9.499490261077881e-07,i:-1.1995434761047363e-05,hexString:-3.5762786865234375e-07,hex:-1.3522803783416748e-06,",9,32,"byteData:channelParts,i:ind,md:Cmd,sb:mb,source:path,checksum:csume,getSHA256Checksum:getSHA256Checksums,hex:dump,hexString:shortResource,",Greedy,,
,,,,,,,,,,,,,,,
100,"['22264586', '16719805', '    private static void copyFiles(String strPath, String dstPath) throws Exception {\n        File src = new File(strPath);\n        File dest = new File(dstPath);\n        if (src.isDirectory()) {\n            dest.mkdirs();\n            String list[] = src.list();\n            for (int i = 0; i < list.length; i++) {\n                String dest1 = dest.getAbsolutePath() + ""\\\\"" + list[i];\n                String src1 = src.getAbsolutePath() + ""\\\\"" + list[i];\n                copyFiles(src1, dest1);\n            }\n        } else {\n            FileChannel sourceChannel = new FileInputStream(src).getChannel();\n            FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n            sourceChannel.close();\n            targetChannel.close();\n        }\n    }\n', '    public static void copyFile(File from, File to) throws IOException {\n        if (from.isDirectory()) {\n            if (!to.exists()) {\n                to.mkdir();\n            }\n            File[] children = from.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {\n                    continue;\n                }\n                if (children[i].isDirectory()) {\n                    File f = new File(to, children[i].getName());\n                    copyFile(children[i], f);\n                } else {\n                    copyFile(children[i], to);\n                }\n            }\n        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {\n            if (to.isDirectory()) {\n                to = new File(to, from.getName());\n            }\n            FileInputStream in = new FileInputStream(from);\n            FileOutputStream out = new FileOutputStream(to);\n            byte[] buf = new byte[32678];\n            int read;\n            while ((read = in.read(buf)) > -1) {\n                out.write(buf, 0, read);\n            }\n            closeStream(in);\n            closeStream(out);\n        }\n    }\n']",174,"    private static void transferChildren(String StrName, String dstUrl) throws Exception {
        File ssl = new File(StrName);
        File mt = new File(dstUrl);
        if (ssl.isDirectory()) {
            mt.mkdirs();
            String batch[] = ssl.batch();
            for (int uri = 0; uri < batch.length; uri++) {
                String port01 = mt.getAbsolutePath() + ""\\"" + batch[uri];
                String source2 = ssl.getAbsolutePath() + ""\\"" + batch[uri];
                transferChildren(source2, port01);
            }
        } else {
            FileChannel targetConnection = new FileInputStream(ssl).getChannel();
            FileChannel Targetchannel = new FileOutputStream(mt).getChannel();
            targetConnection.transferTo(0, targetConnection.size(), Targetchannel);
            targetConnection.close();
            Targetchannel.close();
        }
    }
",1,1,1,-1,"copyFiles,strPath,dstPath,src,dest,list,i,dest1,src1,sourceChannel,targetChannel","copyFiles:1.854366726345486e-07,strPath:2.6490953233506943e-08,dstPath:-7.947285970052083e-08,src:5.298190646701389e-07,dest:1.4570024278428818e-07,list:-2.980232238769531e-07,i:-1.158979203965929e-07,dest1:3.9736429850260414e-08,src1:5.960464477539063e-08,sourceChannel:1.4570024278428818e-07,targetChannel:-8.940696716308594e-08,",11,36,"strPath:StrName,src:ssl,i:uri,dstPath:dstUrl,dest:mt,copyFiles:transferChildren,list:batch,dest1:port01,src1:source2,sourceChannel:targetConnection,targetChannel:Targetchannel,",Greedy,,
,,,,,,,,,,,,,,,
101,"['15799935', '18489832', '    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n        if (part.getBody() != null) {\n            long attachmentId = localAttachment.mId;\n            InputStream in = part.getBody().getInputStream();\n            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n            if (!saveIn.exists()) {\n                saveIn.mkdirs();\n            }\n            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n            saveAs.createNewFile();\n            FileOutputStream out = new FileOutputStream(saveAs);\n            long copySize = IOUtils.copy(in, out);\n            in.close();\n            out.close();\n            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n            localAttachment.mSize = copySize;\n            localAttachment.mContentUri = contentUriString;\n            ContentValues cv = new ContentValues();\n            cv.put(AttachmentColumns.SIZE, copySize);\n            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n            context.getContentResolver().update(uri, cv, null, null);\n        }\n    }\n', '    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n        URLConnection urlConnection = url.openConnection();\n        File tmpFile = null;\n        try {\n            tmpFile = File.createTempFile(""remoteLib_"", null);\n            InputStream in = null;\n            FileOutputStream out = null;\n            try {\n                in = urlConnection.getInputStream();\n                out = new FileOutputStream(tmpFile);\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n                if (in != null) {\n                    in.close();\n                }\n            }\n            unzip(tmpFile, destDir);\n        } finally {\n            if (tmpFile != null) {\n                tmpFile.delete();\n            }\n        }\n        URL localURL = destDir.toURI().toURL();\n        return localURL;\n    }\n']",227,"    public static void saveAttachableFile(Context response, Part connection, Attachment localAttachention, long amountInt) throws MessagingException, IOException {
        if (connection.getBody() != null) {
            long AttociationById = localAttachention.mId;
            InputStream as = connection.getBody().getInputStream();
            File aveOut = AttachmentProvider.getAttachmentDirectory(response, amountInt);
            if (!aveOut.exists()) {
                aveOut.mkdirs();
            }
            File submitIn = AttachmentProvider.getAttachmentFilename(response, amountInt, AttociationById);
            submitIn.createNewFile();
            FileOutputStream null = new FileOutputStream(submitIn);
            long likeCount = IOUtils.copy(as, null);
            as.close();
            null.close();
            String contentUrisNumber = AttachmentProvider.getAttachmentUri(amountInt, AttociationById).toString();
            localAttachention.moLength = likeCount;
            localAttachention.mContentPri = contentUrisNumber;
            ContentValues qu = new ContentValues();
            qu.put(AttachmentColumns.SIZE, likeCount);
            qu.put(AttachmentColumns.CONTENT_URI, contentUrisNumber);
            Uri iri = ContentUris.withAppendedId(Attachment.CONTENT_URI, AttociationById);
            response.getContentResolver().update(iri, qu, null, null);
        }
    }
",1,1,1,-1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri","saveAttachmentBody:2.2027803503948708e-08,context:6.012294603430707e-07,part:3.0709349590799084e-07,localAttachment:2.954317175823709e-07,accountId:5.908634351647418e-07,attachmentId:3.628108812415081e-07,in:3.5374060921047046e-07,saveIn:3.1098075534986414e-07,saveAs:4.781329113504161e-07,out:5.519908407460088e-07,copySize:-1.0884326437245244e-07,contentUriString:2.0602475041928497e-07,mSize:2.2027803503948708e-08,mContentUri:1.0366025178328804e-08,cv:2.332355665123981e-07,uri:5.442163218622622e-08,",16,46,"context:response,accountId:amountInt,attachmentId:AttociationById,saveAs:submitIn,saveIn:aveOut,uri:iri,in:as,contentUriString:contentUrisNumber,part:connection,localAttachment:localAttachention,out:null,copySize:likeCount,saveAttachmentBody:saveAttachableFile,cv:qu,mContentUri:mContentPri,mSize:moLength,",Greedy,,
,,,,,,,,,,,,,,,
102,"['22801734', '5989666', '    private static void setup() throws Exception {\n        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");\n        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");\n        File f = File.createTempFile(""tempabca"", ""bdfafad"");\n        f.delete();\n        f.mkdir();\n        String parent = f.getAbsolutePath() + ""/"";\n        byte[] buf = new byte[1024];\n        ZipInputStream zipinputstream = null;\n        ZipEntry zipentry;\n        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));\n        zipentry = zipinputstream.getNextEntry();\n        while (zipentry != null) {\n            String entryName = zipentry.getName();\n            if (entryName.startsWith(""native"")) {\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(parent + entryName);\n                if (zipentry.isDirectory()) {\n                    newFile.mkdirs();\n                    zipentry = zipinputstream.getNextEntry();\n                    continue;\n                }\n                fileoutputstream = new FileOutputStream(newFile);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n            }\n            zipentry = zipinputstream.getNextEntry();\n        }\n        zipinputstream.close();\n        String arch = """";\n        boolean x64 = false;\n        for (String key : keys) {\n            String property = System.getProperty(key);\n            if (property != null) {\n                x64 = (property.indexOf(""64"") >= 0);\n            }\n        }\n        if (JPTrayIcon.isUnix()) {\n            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";\n        }\n        if (JPTrayIcon.isWindows()) {\n            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));\n            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";\n        }\n        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";\n        System.out.println(""Using native/"" + arch + ""/"");\n        addLibraryPath(parent + ""native/"" + arch + ""/"");\n    }\n', '    private String postXml(String url, String soapAction, String xml) {\n        try {\n            URLConnection conn = new URL(url).openConnection();\n            if (conn instanceof HttpURLConnection) {\n                HttpURLConnection hConn = (HttpURLConnection) conn;\n                hConn.setRequestMethod(""POST"");\n            }\n            conn.setConnectTimeout(this.connectionTimeout);\n            conn.setReadTimeout(this.connectionTimeout);\n            conn.setRequestProperty(""Content-Type"", ""text/xml; charset=utf-8"");\n            conn.setRequestProperty(""Accept"", ""application/soap+xml, text/*"");\n            if (soapAction != null) {\n                conn.setRequestProperty(""SOAPAction"", soapAction);\n            }\n            conn.setDoOutput(true);\n            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\n            out.write(xml);\n            out.close();\n            BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder buf = new StringBuilder();\n            String str;\n            while ((str = resp.readLine()) != null) {\n                buf.append(str);\n            }\n            return buf.toString();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n']",441,"    private static void load() throws Exception {
        String module = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File sessionFile = new File(URLDecoder.decode(module, ""UTF-8"") + ""/Hanasu.jar"");
        if (!sessionFile.exists()) sessionFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File out = File.createTempFile(""tempabca"", ""bdfafad"");
        out.delete();
        out.mkdir();
        String fp = out.getAbsolutePath() + ""/"";
        byte[] bed = new byte[1024];
        ZipInputStream  zipinputfield = null;
        ZipEntry Zipfield;
         zipinputfield = new ZipInputStream(new FileInputStream(sessionFile));
        Zipfield =  zipinputfield.getNextEntry();
        while (Zipfield != null) {
            String channelname = Zipfield.getName();
            if (channelname.startsWith(""native"")) {
                int nan;
                FileOutputStream fileconnectionconsole;
                File newFILE = new File(fp + channelname);
                if (Zipfield.isDirectory()) {
                    newFILE.mkdirs();
                    Zipfield =  zipinputfield.getNextEntry();
                    continue;
                }
                fileconnectionconsole = new FileOutputStream(newFILE);
                while ((nan =  zipinputfield.read(bed, 0, 1024)) > -1) fileconnectionconsole.write(bed, 0, nan);
                fileconnectionconsole.close();
                 zipinputfield.closeEntry();
            }
            Zipfield =  zipinputfield.getNextEntry();
        }
         zipinputfield.close();
        String ARCH = """";
        boolean mxox = false;
        for (String row : keys) {
            String print = System.getProperty(row);
            if (print != null) {
                mxox = (print.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (mxox) ARCH = ""linux-amd64""; else ARCH = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (mxox && !System.getProperty(""sun.arch.data.model"").equals(""32"")) ARCH = ""win64-amd64""; else ARCH = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) ARCH = ""macosx-universal"";
        System.out.println(""Using native/"" + ARCH + ""/"");
        addLibraryPath(fp + ""native/"" + ARCH + ""/"");
    }
",0,0,0,-1,"setup,path,jarFile,f,parent,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,arch,key,property,x64","setup:-4.037734000913558e-08,path:-4.1530978295110887e-07,jarFile:-4.92219002016129e-07,f:-8.383104878087198e-07,parent:-2.826413800639491e-07,buf:-3.4032329436271423e-07,zipinputstream:-2.1534581338205645e-07,zipentry:-2.0323261137931576e-06,entryName:-5.595145686980217e-07,n:-3.7493244294197327e-07,fileoutputstream:1.3074567241053426e-07,newFile:-9.229106287802419e-08,arch:-7.690921906502016e-07,key:-9.61365238312752e-08,property:-1.0959563716765373e-07,x64:-1.7689120384954637e-07,",16,62,"path:module,jarFile:sessionFile,n:nan,f:out,buf:bed,zipinputstream: zipinputfield,fileoutputstream:fileconnectionconsole,parent:fp,entryName:channelname,newFile:newFILE,arch:ARCH,x64:mxox,setup:load,zipentry:Zipfield,property:print,key:row,",Greedy,,
,,,,,,,,,,,,,,,
103,"['2518655', '16215393', '    public static void main(String[] args) throws FileNotFoundException {\n        if (args.length < 2) throw new IllegalArgumentException();\n        String fnOut = args[args.length - 1];\n        PrintWriter writer = new PrintWriter(fnOut);\n        for (int i = 0; i < args.length - 1; i++) {\n            File fInput = new File(args[i]);\n            Scanner in = new Scanner(fInput);\n            while (in.hasNext()) {\n                writer.println(in.nextLine());\n            }\n        }\n        writer.close();\n    }\n', '    public void importSequences() {\n        names = new ArrayList<String>();\n        sequences = new ArrayList<String>();\n        try {\n            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();\n            ImportHelper helper = new ImportHelper(new InputStreamReader(is));\n            int ch = helper.read();\n            while (ch != \'>\') {\n                ch = helper.read();\n            }\n            do {\n                String line = helper.readLine();\n                StringTokenizer tokenizer = new StringTokenizer(line, "" \\t"");\n                String name = tokenizer.nextToken();\n                StringBuffer seq = new StringBuffer();\n                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);\n                ch = helper.getLastDelimiter();\n                names.add(name);\n                sequences.add(seq.toString());\n            } while (ch == \'>\');\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (EOFException e) {\n        } catch (IOException e) {\n        }\n    }\n']",118,,0,0,,-3,"fnOut,writer,i,fInput,in",,,,,Greedy,,
,,,,,,,,,,,,,,,
104,"['1421557', '5414088', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n        String fileName = file.getFileName();\n        String assetsPath = FileFactory.getRealAssetsRootPath();\n        new java.io.File(assetsPath).mkdir();\n        java.io.File workingFile = getAssetIOFile(file);\n        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n        if (destination != null && destination.getInode() > 0) {\n            FileInputStream is = new FileInputStream(workingFile);\n            FileChannel channelFrom = is.getChannel();\n            java.io.File newVersionFile = getAssetIOFile(destination);\n            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n            channelFrom.transferTo(0, channelFrom.size(), channelTo);\n            channelTo.force(false);\n            channelTo.close();\n            channelFrom.close();\n        }\n        if (newDataFile != null) {\n            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n            writeCurrentChannel.truncate(0);\n            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n            writeCurrentChannel.force(false);\n            writeCurrentChannel.close();\n            fromChannel.close();\n            if (UtilMethods.isImage(fileName)) {\n                BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n                int height = img.getHeight();\n                file.setHeight(height);\n                int width = img.getWidth();\n                file.setWidth(width);\n            }\n            String folderPath = workingFile.getParentFile().getAbsolutePath();\n            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n            java.io.File directory = new java.io.File(folderPath);\n            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n            for (java.io.File iofile : files) {\n                try {\n                    iofile.delete();\n                } catch (SecurityException e) {\n                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");\n                } catch (Exception e) {\n                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());\n                }\n            }\n        }\n    }\n']",194,"    public static boolean encodeFiletoStream(String outfilename, String outfilename) {
        boolean  successful = false;
        java.io.InputStream form = null;
        java.io.OutputStream OU = null;
        try {
            form = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfilename)), Base64.ENCODE);
            OU = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfilename));
            byte[] batch = new byte[65536];
            int through = -1;
            while ((through = form.through(batch)) >= 0) {
                OU.write(batch, 0, through);
            }
             successful = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                form.close();
            } catch (Exception exc) {
            }
            try {
                OU.close();
            } catch (Exception exc) {
            }
        }
        return  successful;
    }
",1,1,1,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:1.5549037767493207e-07,infile:-7.256217624830164e-08,outfile:-7.256217624830164e-08,in:8.914781653362771e-07,out:8.292820142663043e-08,buffer:1.5549037767493206e-08,read:4.975692085597826e-07,success:4.6647113302479615e-08,",8,23,"infile:outfilename,in:form,outfile:outfilename,out:OU,encodeFileToFile:encodeFiletoStream,buffer:batch,read:through,success: successful,",Greedy,,
,,,,,,,,,,,,,,,
105,"['22320592', '13891080', '    private static void loadDefaultPreferences() {\n        try {\n            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.defaults.properties"");\n            preferences.load(url.openStream());\n        } catch (FileNotFoundException e) {\n            log.error(""Default preferences file not found"");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static void copyFile(File srcFile, File destFile) throws IOException {\n        logger.debug(""copyFile(srcFile={}, destFile={}) - start"", srcFile, destFile);\n        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();\n        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();\n        try {\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n']",60,"    private static void loadDefaultPreSettings() {
        try {
            URL log = ClassLoader.getSystemResource(""OpenDarkRoom.defaults.properties"");
            preferences.load(log.openStream());
        } catch (FileNotFoundException e) {
            log.error(""Default preferences file not found"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0,0,0,-1,"loadDefaultPreferences,url","loadDefaultPreferences:5.76178232828776e-06,url:5.8531761169433594e-05,",2,3,"url:log,loadDefaultPreferences:loadDefaultPreSettings,",Greedy,,
,,,,,,,,,,,,,,,
106,"['5436973', '20920051', '    public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {\n        String pageDump = null;\n        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);\n        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpGet httpget = new HttpGet(url);\n        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpResponse response = execute(httpget);\n        HttpEntity entity = response.getEntity();\n        pageDump = IOUtils.toString(entity.getContent(), ""UTF-8"");\n        return pageDump;\n    }\n', '    public static void copyTo(File source, File dest) {\n        if (source.isHidden()) ; else if (source.isDirectory()) {\n            File temp = new File(dest.getPath() + ""/"" + source.getName());\n            temp.mkdir();\n            for (File sel : source.listFiles()) copyTo(sel, temp);\n        } else {\n            try {\n                File tempDest = new File(dest.getPath() + ""/"" + source.getName());\n                tempDest.createNewFile();\n                FileChannel sourceCh = new FileInputStream(source).getChannel();\n                FileChannel destCh = new FileOutputStream(tempDest).getChannel();\n                sourceCh.transferTo(0, sourceCh.size(), destCh);\n                sourceCh.close();\n                destCh.close();\n            } catch (IOException ex) {\n                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);\n            }\n        }\n    }\n']",135,"    public String httpToStringUuid(String name) throws IllegalStateException, IOException, HTTPException, InterruptedException, URISyntaxException {
        String pageStash = null;
        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);
        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpGet ttpcreate = new HttpGet(name);
        ttpcreate.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpResponse attribute = execute(ttpcreate);
        HttpEntity image = attribute.getEntity();
        pageStash = IOUtils.toString(image.getContent(), ""UTF-8"");
        return pageStash;
    }
",0,0,1,1,"httpToStringStupid,url,IOException,HttpException,InterruptedException,URISyntaxException,pageDump,httpget,response,entity","httpToStringStupid:1.0518466725068935e-06,url:3.997017355526195e-06,IOException:-1.9634471220128676e-07,HttpException:3.5762786865234375e-07,InterruptedException:7.362926707548254e-07,URISyntaxException:1.7530777875114888e-07,pageDump:6.584560169893153e-06,httpget:2.776875215418199e-06,response:1.5286838307100185e-06,entity:1.3323391185087315e-06,",7,14,"httpget:ttpcreate,pageDump:pageStash,entity:image,url:name,response:attribute,httpToStringStupid:httpToStringUuid,IOException:IOException,HttpException:HTTPException,",Greedy,,
,,,,,,,,,,,,,,,
107,"['19494842', '7166270', '    private void callService() {\n        try {\n            URL url = new URL(baseUrl + servicePath + attributes);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            StringBuffer buf = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                buf.append(inputLine);\n            }\n            in.close();\n            answer = buf.toString();\n        } catch (MalformedURLException e) {\n            answer = ""Malformed Url:"" + e.getMessage();\n            return;\n        } catch (IOException e) {\n            answer = ""I/O exception: "" + e.getMessage();\n            return;\n        }\n    }\n', '    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {\n        URLConnection urlConn = serverURL.openConnection();\n        urlConn.setDoInput(true);\n        urlConn.setDoOutput(true);\n        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");\n        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());\n        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;\n        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");\n        wr.write(content);\n        wr.flush();\n        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n        StringBuffer response = new StringBuffer();\n        String str;\n        while (null != ((str = input.readLine()))) {\n            response.append(str);\n        }\n        wr.close();\n        input.close();\n        return response.toString();\n    }\n']",127,"    private void callQuery() {
        try {
            URL client = new URL(baseUrl + servicePath + attributes);
            BufferedReader sum = new BufferedReader(new InputStreamReader(client.openStream()));
            String inputline;
            StringBuffer vec = new StringBuffer();
            while ((inputline = sum.readLine()) != null) {
                vec.append(inputline);
            }
            sum.close();
            username = vec.toString();
        } catch (MalformedURLException e) {
            username = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            username = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
",1,1,1,-1,"callService,url,in,inputLine,buf,answer","callService:-1.4007091522216797e-05,url:-2.3047129313151043e-05,in:-7.200241088867188e-05,inputLine:-5.152225494384766e-05,buf:1.6260147094726563e-05,answer:-6.647109985351563e-05,",6,15,"url:client,in:sum,answer:username,buf:vec,inputLine:inputline,callService:callQuery,",Greedy,,
,,,,,,,,,,,,,,,
108,"['339517', '1508161', '    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n        URL url = getClass().getResource(name);\n        InputStream in = url.openStream();\n        try {\n            return ClassFile.read(in);\n        } finally {\n            in.close();\n        }\n    }\n', '    public void conMail(MailObject mail) throws NetworkException, ContentException {\n        HttpClient client = HttpConfig.newInstance();\n        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + ""&"" + HttpConfig.BBS_MAIL_N_PARAM_NAME + ""="" + mail.getNumber();\n        HttpGet get = new HttpGet(url);\n        try {\n            HttpResponse response = client.execute(get);\n            HttpEntity entity = response.getEntity();\n            if (HTTPUtil.isXmlContentType(response)) {\n                Document doc = XmlOperator.readDocument(entity.getContent());\n                BBSBodyParseHelper.parseMailContent(doc, mail);\n            } else {\n                String msg = BBSBodyParseHelper.parseFailMsg(entity);\n                throw new ContentException(msg);\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n']",55,"    ClassFile getClassFile(String path) throws IOException, ConstantPoolException {
        URL mount = getClass().getResource(path);
        InputStream bin = mount.openStream();
        try {
            return ClassFile.read(bin);
        } finally {
            bin.close();
        }
    }
",0,0,0,-1,"getClassFile,name,url,in","getClassFile:-1.4901161193847656e-08,name:-8.940696716308594e-08,url:-2.980232238769531e-07,in:-5.811452865600586e-07,",3,7,"name:path,url:mount,in:bin,getClassFile:getClassFile,",Greedy,,
,,,,,,,,,,,,,,,
109,"['22441244', '7087108', '    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n        try {\n            if (charset == null) {\n                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n            }\n            if ((body == null) || body.trim().equals("""")) {\n                body = "" "";\n            }\n            Email email = null;\n            if (isHtml) {\n                email = new HtmlEmail();\n            } else {\n                email = new MultiPartEmail();\n            }\n            email.setCharset(charset);\n            Users user = getUser(hsession, repositoryName);\n            Identity identity = getIdentity(hsession, ideIdint, user);\n            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n            if (_from != null) {\n                email.setFrom(_from.getAddress(), _from.getPersonal());\n            }\n            if (_returnPath != null) {\n                email.addHeader(""Return-Path"", _returnPath.getAddress());\n                email.addHeader(""Errors-To"", _returnPath.getAddress());\n                email.addHeader(""X-Errors-To"", _returnPath.getAddress());\n            }\n            if (_replyTo != null) {\n                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n            }\n            if ((_to != null) && (_to.length > 0)) {\n                HashSet aux = new HashSet(_to.length);\n                Collections.addAll(aux, _to);\n                email.setTo(aux);\n            }\n            if ((_cc != null) && (_cc.length > 0)) {\n                HashSet aux = new HashSet(_cc.length);\n                Collections.addAll(aux, _cc);\n                email.setCc(aux);\n            }\n            if ((_bcc != null) && (_bcc.length > 0)) {\n                HashSet aux = new HashSet(_bcc.length);\n                Collections.addAll(aux, _bcc);\n                email.setBcc(aux);\n            }\n            email.setSubject(subject);\n            Date now = new Date();\n            email.setSentDate(now);\n            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            if ((attachments != null) && (attachments.size() > 0)) {\n                for (int i = 0; i < attachments.size(); i++) {\n                    ByteArrayInputStream bais = null;\n                    FileOutputStream fos = null;\n                    try {\n                        MailPartObj obj = (MailPartObj) attachments.get(i);\n                        File file = new File(dir, obj.getName());\n                        bais = new ByteArrayInputStream(obj.getAttachent());\n                        fos = new FileOutputStream(file);\n                        IOUtils.copy(bais, fos);\n                        EmailAttachment attachment = new EmailAttachment();\n                        attachment.setPath(file.getPath());\n                        attachment.setDisposition(EmailAttachment.ATTACHMENT);\n                        attachment.setDescription(""File Attachment: "" + file.getName());\n                        attachment.setName(file.getName());\n                        if (email instanceof MultiPartEmail) {\n                            ((MultiPartEmail) email).attach(attachment);\n                        }\n                    } catch (Exception ex) {\n                    } finally {\n                        IOUtils.closeQuietly(bais);\n                        IOUtils.closeQuietly(fos);\n                    }\n                }\n            }\n            String mid = getId();\n            if (headers != null) {\n                Header xheader;\n                Enumeration xe = headers.getAllHeaders();\n                for (; xe.hasMoreElements(); ) {\n                    xheader = (Header) xe.nextElement();\n                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    }\n                }\n            } else {\n                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");\n                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");\n            }\n            if (priority != null) {\n                if (priority.equals(""high"")) {\n                    email.addHeader(""Importance"", priority);\n                    email.addHeader(""X-priority"", ""1"");\n                } else if (priority.equals(""low"")) {\n                    email.addHeader(""Importance"", priority);\n                    email.addHeader(""X-priority"", ""5"");\n                }\n            }\n            if (email instanceof HtmlEmail) {\n                ((HtmlEmail) email).setHtmlMsg(body);\n            } else {\n                email.setMsg(body);\n            }\n            email.setMailSession(session);\n            email.buildMimeMessage();\n            MimeMessage mime = email.getMimeMessage();\n            int size = MessageUtilities.getMessageSize(mime);\n            if (!controlQuota(hsession, user, size)) {\n                throw new MailException(""ErrorMessages.mail.quota.exceded"");\n            }\n            messageable.saveSentMessage(mid, mime, user);\n            Thread thread = new Thread(new SendMessageThread(email));\n            thread.start();\n        } catch (MailException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new MailException(e);\n        } catch (java.lang.OutOfMemoryError ex) {\n            System.gc();\n            throw new MailException(ex);\n        } catch (Throwable e) {\n            throw new MailException(e);\n        } finally {\n            GeneralOperations.closeHibernateSession(hsession);\n        }\n    }\n', '    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n        File file = new File(path);\n        if (file.exists()) {\n            FileInputStream in = new FileInputStream(file);\n            IOUtils.copyLarge(in, response.getOutputStream());\n            in.close();\n        }\n    }\n']",1169,,1,1,,-3,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,,Greedy,,
,,,,,,,,,,,,,,,
110,"['20735941', '14450108', '    protected File getFile() throws IOException {\n        File home = new File(System.getProperty(""user.dir""));\n        String fileName = String.format(""%s.txt"", getFilePrefix());\n        File file = new File(home, fileName);\n        if (file.exists()) {\n            return file;\n        } else {\n            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);\n            if (url == null) {\n                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));\n            } else {\n                InputStream in = url.openStream();\n                try {\n                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n                    try {\n                        IOUtils.copy(in, out);\n                    } finally {\n                        out.close();\n                    }\n                } finally {\n                    in.close();\n                }\n                return file;\n            }\n        }\n    }\n', '    public FTPFile[] connect() {\n        if (ftpe == null) {\n            ftpe = new FTPEvent(this);\n        }\n        if (ftp == null) {\n            ftp = new FTPClient();\n        } else if (ftp.isConnected()) {\n            path = """";\n            try {\n                ftp.disconnect();\n            } catch (IOException e1) {\n                log.error(""could not disconnect -"" + e1.getMessage());\n            }\n        }\n        currentDir = new FTPFile[0];\n        log.debug(""try to connect"");\n        try {\n            int reply;\n            ftp.connect(ftpsite);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                log.error(""FTP server refused connection."");\n            }\n        } catch (IOException e) {\n            log.error(""FTPConnection error: "" + e.getMessage());\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException f) {\n                }\n            }\n        }\n        try {\n            if (!ftp.login(user, password)) {\n                log.error(""could not login with: "" + user);\n                ftp.logout();\n            }\n            log.debug(""Remote system is "" + ftp.getSystemName());\n            ftp.enterLocalPassiveMode();\n            currentDir = ftp.listFiles();\n        } catch (FTPConnectionClosedException e) {\n            log.error(""FTPConnectionClosedException: "" + e.getMessage());\n        } catch (IOException e) {\n            log.error(""IOException: "" + e.getMessage());\n        }\n        ftpe.setType(FTPEvent.CONNECT);\n        fireFTPEvent(ftpe);\n        return currentDir;\n    }\n']",163,"    protected File getFile() throws IOException {
        File localhost = new File(System.getProperty(""user.dir""));
        String filenamename = String.format(""%s.txt"", getFilePrefix());
        File fp = new File(localhost, filenamename);
        if (fp.exists()) {
            return fp;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + filenamename);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", filenamename));
            } else {
                InputStream mc = url.openStream();
                try {
                    BufferedOutputStream Out = new BufferedOutputStream(new FileOutputStream(fp));
                    try {
                        IOUtils.copy(mc, Out);
                    } finally {
                        Out.close();
                    }
                } finally {
                    mc.close();
                }
                return fp;
            }
        }
    }
",0,0,0,-1,"getFile,home,fileName,file,url,in,out","getFile:-6.811959402901785e-08,home:0.0,fileName:-1.5894571940104166e-07,file:-1.9868214925130207e-07,url:-6.811959402901785e-07,in:-2.2138868059430802e-07,out:-3.0653817313058033e-07,",5,17,"getFile:getFile,fileName:filenamename,file:fp,in:mc,home:localhost,url:url,out:Out,",Greedy,,
,,,,,,,,,,,,,,,
111,"['886783', '12171364', '    private static void doGet(LNISoapServlet lni, String itemHandle, String packager, String output, String endpoint) throws java.rmi.RemoteException, ProtocolException, IOException, FileNotFoundException {\n        String itemURI = doLookup(lni, itemHandle, null);\n        URL url = LNIClientUtils.makeDAVURL(endpoint, itemURI, packager);\n        System.err.println(""DEBUG: GET from URL: "" + url.toString());\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(""GET"");\n        conn.setDoInput(true);\n        fixBasicAuth(url, conn);\n        conn.connect();\n        int status = conn.getResponseCode();\n        if (status < 200 || status >= 300) {\n            die(status, ""HTTP error, status="" + String.valueOf(status) + "", message="" + conn.getResponseMessage());\n        }\n        InputStream in = conn.getInputStream();\n        OutputStream out = new FileOutputStream(output);\n        copyStream(in, out);\n        in.close();\n        out.close();\n        System.err.println(""DEBUG: Created local file "" + output);\n        System.err.println(""RESULT: Status="" + String.valueOf(conn.getResponseCode()) + "" "" + conn.getResponseMessage());\n    }\n', '    private static FrameworkFactory getFrameworkFactory() throws Exception {\n        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");\n        if (url != null) {\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            try {\n                for (String s = br.readLine(); s != null; s = br.readLine()) {\n                    s = s.trim();\n                    if ((s.length() > 0) && (s.charAt(0) != \'#\')) {\n                        return (FrameworkFactory) Class.forName(s).newInstance();\n                    }\n                }\n            } finally {\n                if (br != null) br.close();\n            }\n        }\n        throw new Exception(""Could not find framework factory."");\n    }\n']",235,"    private static void doGet(LNISoapServlet slini, String issueH, String packager, String text, String endpoint) throws java.rmi.RemoteException, ProtocolException, IOGroup, FileNotPresentException {
        String itemURI = doLookup(slini, issueH, null);
        URL url = LNIClientUtils.makeDAVURL(endpoint, itemURI, packager);
        System.err.println(""DEBUG: GET from URL: "" + url.toString());
        HttpURLConnection client = (HttpURLConnection) url.openConnection();
        client.setRequestMethod(""GET"");
        client.setDoInput(true);
        fixBasicAuth(url, client);
        client.connect();
        int html = client.getResponseCode();
        if (html < 200 || html >= 300) {
            die(html, ""HTTP error, status="" + String.valueOf(html) + "", message="" + client.getResponseMessage());
        }
        InputStream en = client.getInputStream();
        OutputStream ent = new FileOutputStream(text);
        copyStream(en, ent);
        en.close();
        ent.close();
        System.err.println(""DEBUG: Created local file "" + text);
        System.err.println(""RESULT: Status="" + String.valueOf(client.getResponseCode()) + "" "" + client.getResponseMessage());
    }
",0,0,0,-1,"doGet,lni,itemHandle,packager,output,endpoint,IOException,FileNotFoundException,itemURI,url,conn,status,in,out","doGet:-1.0579097561719942e-05,lni:-4.884673327934451e-06,itemHandle:-1.1226026023306498e-05,packager:-1.893392423304116e-05,output:-8.927612769894483e-05,endpoint:-2.2236893816692073e-05,IOException:8.722630942740093e-09,FileNotFoundException:1.987306083120951e-06,itemURI:-2.7444304489507908e-05,url:-0.000257364133509194,conn:-0.0009268958394120379,status:8.681198445762076e-05,in:-0.0001681505179986721,out:-0.00011459356401024795,",9,30,"packager:packager,endpoint:endpoint,itemURI:itemURI,url:url,in:en,lni:slini,itemHandle:issueH,conn:client,doGet:doGet,output:text,IOException:IOGroup,FileNotFoundException:FileNotPresentException,out:ent,status:html,",Greedy,,
,,,,,,,,,,,,,,,
112,"['21125261', '6188784', '    @Test\n    public void test() throws Exception {\n        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        IOUtils.copy(is, byteArrayOutputStream);\n        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\n        TrafficSimulationEngine se = new TrafficSimulationEngine();\n        se.init(def);\n        int linkId = 2;\n        int segmentId = 0;\n        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\n        Set<Integer> segments = new HashSet<Integer>();\n        segments.add(segmentId);\n        linkSegments.put(linkId, segments);\n        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\n        se.setFrameProperties(frameProperties);\n        for (float time = 0; time < 60 * 10; time += 0.1f) {\n            se.step(0.1f);\n            for (RoadObject vehicle : se.getDynamicObjects()) {\n                System.out.println(time + "": X="" + vehicle.getPosition() + ""\\tV="" + vehicle.getSpeed());\n            }\n        }\n    }\n', '    public static void copy(File source, File dest) throws IOException {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n']",225,"    @Test
    public void run() throws Exception {
        InputStream xml = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteStreamOutputSteam = new ByteArrayOutputStream();
        IOUtils.copy(xml, byteStreamOutputSteam);
        TrafficModelDefinition dl = MDFReader.read(byteStreamOutputSteam.toByteArray());
        TrafficSimulationEngine sem = new TrafficSimulationEngine();
        sem.init(dl);
        int linkName = 2;
        int segmentRef = 0;
        Map<Integer, Set<Integer>>  linkBuildables = new HashMap<Integer, Set<Integer>>();
        Set<Integer> usegins = new HashSet<Integer>();
        usegins.add(segmentRef);
         linkBuildables.put(linkName, usegins);
        FrameProperties framePrps = new FrameProperties( linkBuildables, new HashSet<Integer>());
        sem.setFrameProperties(framePrps);
        for (float message = 0; message < 60 * 10; message += 0.1f) {
            sem.step(0.1f);
            for (RoadObject vehicles : sem.getDynamicObjects()) {
                System.out.println(message + "": X="" + vehicles.getPosition() + ""\tV="" + vehicles.getSpeed());
            }
        }
    }
",1,1,1,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle","test:-1.862645149230957e-08,is:-1.043081283569336e-07,byteArrayOutputStream:-1.2293457984924316e-07,def:3.725290298461914e-08,se:1.1175870895385742e-07,linkId:-7.450580596923828e-09,segmentId:0.0,linkSegments:6.705522537231445e-08,segments:1.2293457984924316e-07,frameProperties:1.4901161193847656e-08,time:-1.043081283569336e-07,vehicle:-1.1175870895385742e-07,",12,32,"byteArrayOutputStream:byteStreamOutputSteam,def:dl,is:xml,linkSegments: linkBuildables,frameProperties:framePrps,time:message,vehicle:vehicles,se:sem,segments:usegins,linkId:linkName,segmentId:segmentRef,test:run,",Greedy,,
,,,,,,,,,,,,,,,
113,"['1357662', '4798332', '    private void copyFileTo(File destination) throws IOException {\n        logger.fine(""Copying from "" + destination + ""..."");\n        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n        logger.fine(""...got source channel "" + srcChannel + ""..."");\n        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n        logger.fine(""...got destination channel "" + destChannel + ""..."");\n        logger.fine(""...Got channels..."");\n        destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        logger.fine(""...transferred."");\n        srcChannel.close();\n        destChannel.close();\n    }\n', '    public static String SHA(String source) {\n        logger.info(source);\n        String result = null;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""SHA"");\n            digest.update(source.getBytes());\n            byte[] bytes = digest.digest();\n            result = EncodeUtils.hexEncode(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        logger.info(result);\n        return result;\n    }\n']",122,"    private void copyToFile(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel insCh = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + insCh + ""..."");
        FileChannel  destCan = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" +  destCan + ""..."");
        logger.fine(""...Got channels..."");
         destCan.transferFrom(insCh, 0, insCh.size());
        logger.fine(""...transferred."");
        insCh.close();
         destCan.close();
    }
",0,0,0,-1,"copyFileTo,destination,srcChannel,destChannel","copyFileTo:-3.4740992954799107e-06,destination:-9.025846208844865e-06,srcChannel:5.2813972745622906e-05,destChannel:3.407682691301618e-05,",3,10,"destination:destination,destChannel: destCan,srcChannel:insCh,copyFileTo:copyToFile,",Greedy,,
,,,,,,,,,,,,,,,
114,"['1769771', '14047629', '    private void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n', '    protected ExternalDecoder(InputStream source, Process process) {\n        super(source);\n        this.process = process;\n        this.processStdOut = process.getInputStream();\n        this.processStdIn = process.getOutputStream();\n        new Thread() {\n\n            @Override\n            public void run() {\n                try {\n                    IOUtils.copy(getSource(), processStdIn);\n                    System.err.println(""Copy done."");\n                    close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    IOUtils.closeQuietly(ExternalDecoder.this);\n                }\n            }\n        }.start();\n    }\n']",96,"    private void CopyStream(File cin, File log) throws IOException {
        FileChannel outConnection = new FileInputStream(cin).getChannel();
        FileChannel aosSection = new FileOutputStream(log).getChannel();
        try {
            outConnection.transferTo(0, outConnection.size(), aosSection);
        } catch (IOException e) {
            throw e;
        } finally {
            if (outConnection != null) outConnection.close();
            if (aosSection != null) aosSection.close();
        }
    }
",1,1,1,-1,"copyFile,in,out,inChannel,outChannel","copyFile:3.235680716378348e-07,in:3.5762786865234375e-07,out:4.087175641741071e-07,inChannel:5.108969552176339e-07,outChannel:-4.4277736118861603e-07,",5,14,"in:cin,inChannel:outConnection,out:log,outChannel:aosSection,copyFile:CopyStream,",Greedy,,
,,,,,,,,,,,,,,,
115,"['14877116', '20100809', '    public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n        if (!source.exists()) throw new IOException(""source file not exists"");\n        if (!source.isFile()) throw new IOException(""source file not exists(is a directory)"");\n        InputStream src = new FileInputStream(source);\n        File tarn = target;\n        if (target.isDirectory() || !(!(target.exists()) || replace)) {\n            String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n            tarn = new File(tardir + File.separator + source.getName());\n            int n = 1;\n            while (!(!tarn.exists() || replace)) {\n                tarn = new File(tardir + File.separator + String.valueOf(n) + "" copy of "" + source.getName());\n                n++;\n            }\n        }\n        if (source.getPath().equals(tarn.getPath()) && replace) return;\n        OutputStream tar = new FileOutputStream(tarn);\n        byte[] bytes = new byte[bufferSize];\n        int readn = -1;\n        while ((readn = src.read(bytes)) > 0) {\n            tar.write(bytes, 0, readn);\n        }\n        tar.flush();\n        tar.close();\n        src.close();\n    }\n', '    public static void copy(File srcPath, File dstPath) throws IOException {\n        if (srcPath.isDirectory()) {\n            if (!dstPath.exists()) {\n                boolean result = dstPath.mkdir();\n                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);\n            }\n            String[] files = srcPath.list();\n            for (String file : files) {\n                copy(new File(srcPath, file), new File(dstPath, file));\n            }\n        } else {\n            if (srcPath.exists()) {\n                FileChannel in = null;\n                FileChannel out = null;\n                try {\n                    in = new FileInputStream(srcPath).getChannel();\n                    out = new FileOutputStream(dstPath).getChannel();\n                    long size = in.size();\n                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n                    out.write(buf);\n                } finally {\n                    if (in != null) in.close();\n                    if (out != null) out.close();\n                }\n            }\n        }\n    }\n']",274,"    public void  copBuffer(File component, File project, boolean include, int blockCount) throws IOException {
        if (!component.exists()) throw new IOException(""source file not exists"");
        if (!component.isFile()) throw new IOException(""source file not exists(is a directory)"");
        InputStream Source = new FileInputStream(component);
        File wtarn = project;
        if (project.isDirectory() || !(!(project.exists()) || include)) {
            String  tarndir = project.isDirectory() ? project.getPath() : project.getParent();
            wtarn = new File( tarndir + File.separator + component.getName());
            int cn = 1;
            while (!(!wtarn.exists() || include)) {
                wtarn = new File( tarndir + File.separator + String.valueOf(cn) + "" copy of "" + component.getName());
                cn++;
            }
        }
        if (component.getPath().equals(wtarn.getPath()) && include) return;
        OutputStream archive = new FileOutputStream(wtarn);
        byte[] files = new byte[blockCount];
        int rolll = -1;
        while ((rolll = Source.read(files)) > 0) {
            archive.write(files, 0, rolll);
        }
        archive.flush();
        archive.close();
        Source.close();
    }
",1,1,1,-1,"cpFile,source,target,replace,bufferSize,src,tarn,tardir,n,tar,bytes,readn","cpFile:2.954317175823709e-07,source:1.904757126517918e-06,target:2.1405841993248984e-06,replace:4.1464100713315216e-07,bufferSize:-3.109807553498641e-08,src:-2.3323556651239807e-08,tarn:1.3838643613068953e-06,tardir:2.1768652874490488e-07,n:3.5762786865234375e-07,tar:1.8658845320991846e-07,bytes:-1.3216682102369226e-07,readn:-6.219615106997282e-08,",12,46,"target:project,tardir: tarndir,n:cn,tar:archive,source:component,tarn:wtarn,cpFile: copBuffer,replace:include,bufferSize:blockCount,src:Source,bytes:files,readn:rolll,",Greedy,,
,,,,,,,,,,,,,,,
116,"['5998352', '755203', '    @Test\n    public void testStandardTee() throws Exception {\n        final String reference = ""test"";\n        final Reader source = new StringReader(reference);\n        final StringWriter destination1 = new StringWriter();\n        final StringWriter destination2 = new StringWriter();\n        final TeeWriter tee = new TeeWriter(destination1, destination2);\n        org.apache.commons.io.IOUtils.copy(source, tee);\n        tee.close();\n        assertEquals(""the two string are equals"", reference, destination1.toString());\n        assertEquals(""the two string are equals"", reference, destination2.toString());\n        assertEquals(""byte count"", reference.length(), tee.getSize());\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",124,"    @Test
    public void  teststandardMe() throws Exception {
        final String link = ""test"";
        final Reader template = new StringReader(link);
        final StringWriter destificate1 = new StringWriter();
        final StringWriter destinationTwo = new StringWriter();
        final TeeWriter teer = new TeeWriter(destificate1, destinationTwo);
        org.apache.commons.io.IOUtils.copy(template, teer);
        teer.close();
        assertEquals(""the two string are equals"", link, destificate1.toString());
        assertEquals(""the two string are equals"", link, destinationTwo.toString());
        assertEquals(""byte count"", link.length(), teer.getSize());
    }
",1,1,1,-1,"testStandardTee,reference,source,destination1,destination2,tee","testStandardTee:7.285012139214409e-08,reference:6.622738308376736e-08,source:3.5762786865234375e-07,destination1:-1.5894571940104166e-07,destination2:1.5894571940104166e-07,tee:5.563100179036458e-07,",6,18,"reference:link,source:template,destination1:destificate1,destination2:destinationTwo,tee:teer,testStandardTee: teststandardMe,",Greedy,,
,,,,,,,,,,,,,,,
117,"['7981642', '10385815', '    @Override\n    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {\n        jndiManagerConnection connection = new jndiManagerConnection();\n        Attributes attrs = new BasicAttributes();\n        attrs.put(""sn"", lastname);\n        attrs.put(""givenName"", firstname);\n        attrs.put(""cn"", firstname + "" "" + lastname);\n        if (!pwd.isEmpty()) {\n            MessageDigest sha = MessageDigest.getInstance(""md5"");\n            sha.reset();\n            sha.update(pwd.getBytes(""utf-8""));\n            byte[] digest = sha.digest();\n            String hash = Base64.encodeBase64String(digest);\n            attrs.put(""userPassword"", ""{MD5}"" + hash);\n        }\n        DirContext ctx = connection.getLDAPDirContext();\n        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);\n        if (!mail.equals(email)) {\n            String newName = ""mail="" + email + "","" + dn;\n            String oldName = ""mail="" + mail + "","" + dn;\n            ctx.rename(oldName, newName);\n        }\n    }\n', '    public static void copy(String fileFrom, String fileTo) throws IOException {\n        FileInputStream inputStream = null;\n        FileOutputStream outputStream = null;\n        FileChannel inputChannel = null;\n        FileChannel outputChannel = null;\n        try {\n            inputStream = new FileInputStream(fileFrom);\n            outputStream = new FileOutputStream(fileTo);\n            inputChannel = inputStream.getChannel();\n            outputChannel = outputStream.getChannel();\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } finally {\n            try {\n                inputChannel.close();\n            } finally {\n                try {\n                    outputChannel.close();\n                } finally {\n                    try {\n                        inputStream.close();\n                    } finally {\n                        outputStream.close();\n                    }\n                }\n            }\n        }\n    }\n']",219,"    @Override
    public void write(String file, String host, String pow, String lastrun, String givenName) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection nc = new jndiManagerConnection();
        Attributes attrics = new BasicAttributes();
        attrics.put(""sn"", givenName);
        attrics.put(""givenName"", lastrun);
        attrics.put(""cn"", lastrun + "" "" + givenName);
        if (!pow.isEmpty()) {
            MessageDigest no = MessageDigest.getInstance(""md5"");
            no.reset();
            no.write(pow.getBytes(""utf-8""));
            byte[] Digests = no.Digests();
            String dig = Base64.encodeBase64String(Digests);
            attrics.put(""userPassword"", ""{MD5}"" + dig);
        }
        DirContext tk = nc.getLDAPDirContext();
        tk.modifyAttributes(""mail="" + file + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrics);
        if (!file.equals(host)) {
            String finalName = ""mail="" + host + "","" + dn;
            String smallAnd = ""mail="" + file + "","" + dn;
            tk.rename(smallAnd, finalName);
        }
    }
",0,0,0,-1,"update,mail,email,pwd,firstname,lastname,connection,attrs,sha,digest,hash,ctx,newName,oldName","update:-3.253562109810965e-05,mail:2.8099332536969864e-06,email:-1.3751643044607979e-06,pwd:1.59783022744315e-05,firstname:2.8014183044433594e-06,lastname:2.3628984178815567e-06,connection:-4.586719331287202e-06,attrs:-1.0473387581961494e-05,sha:-6.726809910365513e-05,digest:-2.6877437319074356e-05,hash:-3.6216917492094492e-06,ctx:-4.031828471592494e-06,newName:-1.2006078447614397e-06,oldName:2.0293962387811568e-06,",14,42,"update:write,mail:file,email:host,pwd:pow,firstname:lastrun,lastname:givenName,newName:finalName,oldName:smallAnd,digest:Digests,hash:dig,sha:no,attrs:attrics,connection:nc,ctx:tk,",Greedy,,
,,,,,,,,,,,,,,,
118,"['3375724', '22552318', '    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {\n        int numeroDoRegistro = -1;\n        Scanner in = null;\n        Statement stmtLimpezaInicialDestino = conDestino.createStatement();\n        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";\n        stmtLimpezaInicialDestino.executeUpdate(sql);\n        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";\n        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;\n        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;\n        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;\n        final int TAMANHO_MEDIO_POR_REGISTRO = 81;\n        long tamanhoDosArquivos = pArquivoTXT.length();\n        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;\n        String registro;\n        String[] campos;\n        try {\n            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());\n            int quantidadeDeRegistrosImportada = 0;\n            numeroDoRegistro = 0;\n            String vSIGLA, vNOME;\n            BigDecimal vCNPJ;\n            java.sql.Date vDATA_CRIACAO;\n            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;\n            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";\n            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\\"""";\n            while (in.hasNextLine()) {\n                ++numeroDoRegistro;\n                registro = in.nextLine();\n                stmtDestino.clearParameters();\n                registro = registro.substring(1, registro.length() - 1);\n                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {\n                    registro = registro + "" "";\n                }\n                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);\n                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;\n                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {\n                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);\n                }\n                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];\n                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];\n                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];\n                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {\n                    vCNPJ = new BigDecimal(cnpjTmp);\n                } else {\n                    vCNPJ = null;\n                }\n                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];\n                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {\n                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));\n                    Calendar calendario = Calendar.getInstance();\n                    calendario.clear();\n                    calendario.set(ano, mes, dia);\n                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());\n                } else {\n                    vDATA_CRIACAO = null;\n                }\n                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);\n                stmtDestino.setStringAtName(""NOME"", vNOME);\n                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);\n                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);\n                int contagemDasInsercoes = stmtDestino.executeUpdate();\n                quantidadeDeRegistrosImportada++;\n                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;\n                pAndamento.setPercentualCompleto((int) percentualCompleto);\n            }\n            conDestino.commit();\n        } catch (Exception ex) {\n            conDestino.rollback();\n            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\n            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();\n            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;\n            problemaDetalhado.detalhesSobreOProblema = ex;\n            throw problemaDetalhado;\n        } finally {\n            pAndamento.setPercentualCompleto(100);\n            in.close();\n            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\n                stmtLimpezaInicialDestino.close();\n            }\n            if (stmtDestino != null && (!stmtDestino.isClosed())) {\n                stmtDestino.close();\n            }\n        }\n    }\n', '    private synchronized void loadDDL() throws IOException {\n        try {\n            conn.createStatement().executeQuery(""SELECT * FROM non_generic_favs"").close();\n        } catch (SQLException e) {\n            Statement stmt = null;\n            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {\n                e.printStackTrace(System.out);\n                throw new IOException(""Error on initial data store read"");\n            }\n            String[] qry = { ""CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)"", ""CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES (\'schema\', \'1\')"" };\n            try {\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                for (String q : qry) stmt.executeUpdate(q);\n                conn.commit();\n            } catch (SQLException e2) {\n                try {\n                    conn.rollback();\n                } catch (SQLException e3) {\n                    e3.printStackTrace(System.out);\n                }\n                e2.printStackTrace(new PrintWriter(System.out));\n                throw new IOException(""Error initializing data store"");\n            } finally {\n                if (stmt != null) {\n                    try {\n                        stmt.close();\n                    } catch (SQLException e4) {\n                        e4.printStackTrace(System.out);\n                        throw new IOException(""Unable to cleanup data store resources"");\n                    }\n                }\n                try {\n                    conn.setAutoCommit(true);\n                } catch (SQLException e3) {\n                    e3.printStackTrace(System.out);\n                    throw new IOException(""Unable to reset data store auto commit"");\n                }\n            }\n        }\n        return;\n    }\n']",690,"    public void importarEmissoresDosTitulosFinanceiros(File pArquivTRL, Andamento pAndementO) throws FileNotFoundException, SQLException {
        int numeroDoRegitulo = -1;
        Scanner cin = null;
        Statement stmtLimpezaInicialStinos = conDestino.createStatement();
        String lex = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialStinos.executeUpdate(lex);
        lex = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtdestinos = (OraclePreparedStatement) conDestino.prepareStatement(lex);
        stmtdestinos.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquIVos = pArquivTRL.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquIVos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            cin = new Scanner(new FileInputStream(pArquivTRL), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegitulo = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.lex.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (cin.hasNextLine()) {
                ++numeroDoRegitulo;
                registro = cin.nextLine();
                stmtdestinos.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.lex.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtdestinos.setStringAtName(""SIGLA"", vSIGLA);
                stmtdestinos.setStringAtName(""NOME"", vNOME);
                stmtdestinos.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtdestinos.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtdestinos.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndementO.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivTRL.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegitulo;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndementO.setPercentualCompleto(100);
            cin.close();
            if (stmtLimpezaInicialStinos != null && (!stmtLimpezaInicialStinos.isClosed())) {
                stmtLimpezaInicialStinos.close();
            }
            if (stmtdestinos != null && (!stmtdestinos.isClosed())) {
                stmtdestinos.close();
            }
        }
    }
",1,1,1,-1,"importarEmissoresDosTitulosFinanceiros,pArquivoTXT,pAndamento,numeroDoRegistro,in,stmtLimpezaInicialDestino,sql,stmtDestino,TAMANHO_DO_CABECALHO_DO_ARQUIVO,TAMANHO_DO_RODAPE_DO_ARQUIVO,TAMANHO_DOS_METADADOS_DO_ARQUIVO,TAMANHO_MEDIO_POR_REGISTRO,tamanhoDosArquivos,quantidadeDeRegistrosEstimada,registro,campos","importarEmissoresDosTitulosFinanceiros:4.7157792484059055e-07,pArquivoTXT:-1.9985086777630975e-06,pAndamento:1.419993007884306e-06,numeroDoRegistro:-1.4024622300091912e-08,in:7.227063179016113e-06,stmtLimpezaInicialDestino:4.860408165875603e-06,sql:1.9243534873513616e-05,stmtDestino:2.6399598402135514e-05,TAMANHO_DO_CABECALHO_DO_ARQUIVO:1.5725107753978056e-06,TAMANHO_DO_RODAPE_DO_ARQUIVO:1.097426694982192e-06,TAMANHO_DOS_METADADOS_DO_ARQUIVO:4.6456561369054457e-07,TAMANHO_MEDIO_POR_REGISTRO:1.1693028842701631e-06,tamanhoDosArquivos:-9.817235610064338e-08,quantidadeDeRegistrosEstimada:7.520703708424287e-07,registro:2.5130370083977195e-05,campos:1.424112740684958e-05,",8,40,"in:cin,registro:registro,pArquivoTXT:pArquivTRL,sql:lex,stmtDestino:stmtdestinos,stmtLimpezaInicialDestino:stmtLimpezaInicialStinos,importarEmissoresDosTitulosFinanceiros:importarEmissoresDosTitulosFinanceiros,pAndamento:pAndementO,numeroDoRegistro:numeroDoRegitulo,tamanhoDosArquivos:tamanhoDosArquIVos,TAMANHO_DOS_METADADOS_DO_ARQUIVO:TAMANHO_DOS_METADADOS_DO_ARQUIVO,TAMANHO_MEDIO_POR_REGISTRO:TAMANHO_MEDIO_POR_REGISTRO,quantidadeDeRegistrosEstimada:quantidadeDeRegistrosEstimada,TAMANHO_DO_CABECALHO_DO_ARQUIVO:TAMANHO_DO_CABECALHO_DO_ARQUIVO,TAMANHO_DO_RODAPE_DO_ARQUIVO:TAMANHO_DO_RODAPE_DO_ARQUIVO,campos:campos,",Greedy,,
,,,,,,,,,,,,,,,
119,"['13783898', '8430178', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public static void copyFile(String source_name, String dest_name) throws IOException {\n        source_name = Shell.getUtils().constructPath(source_name);\n        File source_file = new File(source_name);\n        dest_name = Shell.getUtils().constructPath(dest_name);\n        File destination_file = new File(dest_name);\n        FileInputStream source = null;\n        FileOutputStream destination = null;\n        byte[] buffer;\n        int bytes_read;\n        try {\n            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);\n            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);\n            if (destination_file.exists()) {\n                if (destination_file.isFile()) {\n                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n                    String response;\n                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);\n                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");\n                    System.out.flush();\n                    response = in.readLine();\n                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");\n                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);\n            } else {\n                File parentdir = parent(destination_file);\n                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn\'t exist: "" + dest_name);\n                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);\n            }\n            source = new FileInputStream(source_file);\n            destination = new FileOutputStream(destination_file);\n            buffer = new byte[1024];\n            int size = (new Long((source_file.length() / 1024) / 50)).intValue();\n            int c = 1;\n            int written = 0;\n            System.out.print(""cp: "");\n            while (true) {\n                if (written < 50) {\n                    if ((c - 1) == size && size != 0) {\n                        System.out.print(""#"");\n                        c = 1;\n                        written++;\n                    } else if (size == 0) {\n                        int j = 1;\n                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;\n                        for (int i = 0; i < j; i++) System.out.print(""#"");\n                        written += j;\n                    }\n                }\n                bytes_read = source.read(buffer);\n                if (bytes_read == -1) break;\n                destination.write(buffer, 0, bytes_read);\n                c++;\n            }\n            System.out.println();\n        } finally {\n            if (source != null) try {\n                source.close();\n            } catch (IOException e) {\n            }\n            if (destination != null) try {\n                destination.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",194,,1,1,,-3,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,,Greedy,,
,,,,,,,,,,,,,,,
120,"['3584508', '539195', '    private void copyResource() throws Exception {\n        URL url = getResource(source);\n        InputStream input;\n        if (url != null) {\n            input = url.openStream();\n        } else if (new File(source).exists()) {\n            input = new FileInputStream(source);\n        } else {\n            throw new Exception(""Could not load resource: "" + source);\n        }\n        OutputStream output = new FileOutputStream(destinationFile());\n        int b;\n        while ((b = input.read()) != -1) output.write(b);\n        input.close();\n        output.close();\n    }\n', '    static void copy(String src, String dest) throws IOException {\n        File ifp = new File(src);\n        File ofp = new File(dest);\n        if (ifp.exists() == false) {\n            throw new IOException(""file \'"" + src + ""\' does not exist"");\n        }\n        FileInputStream fis = new FileInputStream(ifp);\n        FileOutputStream fos = new FileOutputStream(ofp);\n        byte[] b = new byte[1024];\n        while (fis.read(b) > 0) fos.write(b);\n        fis.close();\n        fos.close();\n    }\n']",121,,1,0,,-4,"copyResource,url,input,output,b",,,,,Greedy,,
,,,,,,,,,,,,,,,
121,"['6188784', '23666867', '    public static void copy(File source, File dest) throws IOException {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n', '    public static void copyFile(File in, File out) {\n        try {\n            FileChannel inChannel = null, outChannel = null;\n            try {\n                out.getParentFile().mkdirs();\n                inChannel = new FileInputStream(in).getChannel();\n                outChannel = new FileOutputStream(out).getChannel();\n                outChannel.transferFrom(inChannel, 0, inChannel.size());\n            } finally {\n                if (inChannel != null) {\n                    inChannel.close();\n                }\n                if (outChannel != null) {\n                    outChannel.close();\n                }\n            }\n        } catch (Exception e) {\n            ObjectUtils.throwAsError(e);\n        }\n    }\n']",113,,1,1,,-3,"copy,source,dest,in,out,size,buf",,,,,Greedy,,
,,,,,,,,,,,,,,,
122,"['8452134', '2009072', '    public int exists(String fileToCheck) throws IOException {\n        FTPClient ftp = new FTPClient();\n        int found = 0;\n        try {\n            int reply = 0;\n            ftp.connect(this.endpointURL, this.endpointPort);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                throw new IOException(""Ftp exists server refused connection."");\n            }\n            if (!ftp.login(""anonymous"", """")) {\n                ftp.logout();\n                throw new IOException(""FTP: server wrong passwd"");\n            }\n            ftp.enterLocalPassiveMode();\n            if (ftp.listNames(fileToCheck) != null) {\n                found = 1;\n            }\n            ftp.logout();\n        } catch (Exception e) {\n            throw new IOException(e.getMessage());\n        }\n        return found;\n    }\n', '    public InputStream openInput(Fragment path) throws IOException {\n        int len = path.words().size();\n        String p = Util.combine(""/"", path.words().subList(1, len));\n        URL url = new URL(""http"", path.words().get(0), p);\n        InputStream result = url.openStream();\n        return result;\n    }\n']",156,"    public int exinates(String pathTOCheck) throws IOException {
        FTPClient ffr = new FTPClient();
        int ed = 0;
        try {
            int answer = 0;
            ffr.connect(this.endpointURL, this.endpointPort);
            answer = ffr.getReplyCode();
            if (!FTPReply.isPositiveCompletion(answer)) {
                ffr.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ffr.login(""anonymous"", """")) {
                ffr.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ffr.enterLocalPassiveMode();
            if (ffr.listNames(pathTOCheck) != null) {
                ed = 1;
            }
            ffr.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return ed;
    }
",0,0,0,-1,"exists,fileToCheck,ftp,found,reply","exists:1.8822519402754934e-07,fileToCheck:3.0116031044407893e-07,ftp:-7.453717683490953e-06,found:-2.446927522358141e-07,reply:-1.129351164165296e-07,",5,19,"exists:exinates,fileToCheck:pathTOCheck,ftp:ffr,reply:answer,found:ed,",Greedy,,
,,,,,,,,,,,,,,,
123,"['9272325', '335223', '    private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {\n        HttpURLConnection urlConn = null;\n        try {\n            String params = generatorParamString(parameters);\n            URL url = new URL(reqUrl);\n            urlConn = (HttpURLConnection) url.openConnection();\n            urlConn.setRequestMethod(""POST"");\n            urlConn.setConnectTimeout(5000);\n            urlConn.setReadTimeout(5000);\n            urlConn.setDoOutput(true);\n            byte[] b = params.getBytes();\n            urlConn.getOutputStream().write(b, 0, b.length);\n            urlConn.getOutputStream().flush();\n            urlConn.getOutputStream().close();\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n        return urlConn;\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",154,"    private static HttpURLConnection doPost(String  reqName, Map<String, String> parameter) {
        HttpURLConnection URLConn = null;
        try {
            String config = generatorParamString(parameter);
            URL log = new URL( reqName);
            URLConn = (HttpURLConnection) log.openConnection();
            URLConn.setRequestMethod(""POST"");
            URLConn.setConnectTimeout(5000);
            URLConn.setReadTimeout(5000);
            URLConn.setDoOutput(true);
            byte[] rb = config.getBytes();
            URLConn.getOutputStream().write(rb, 0, rb.length);
            URLConn.getOutputStream().flush();
            URLConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return URLConn;
    }
",0,0,0,-1,"sendPost,reqUrl,parameters,urlConn,params,url,b","sendPost:1.2896277687766335e-06,reqUrl:-5.635348233309659e-07,parameters:-6.719069047407671e-07,urlConn:5.68953427401456e-06,params:-1.148744062943892e-06,url:-1.9615346735174004e-06,b:-1.1379068548029119e-06,",7,22,"urlConn:URLConn,url:log,reqUrl: reqName,parameters:parameter,params:config,sendPost:doPost,b:rb,",Greedy,,
,,,,,,,,,,,,,,,
124,"['18504192', '3958807', '    static void copyFile(File in, File out) throws IOException {\n        FileChannel source = new FileInputStream(in).getChannel();\n        FileChannel destination = new FileOutputStream(out).getChannel();\n        source.transferTo(0, source.size(), destination);\n        source.close();\n        destination.close();\n    }\n', '        private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n            resp.setContentType(getContentType(req, streamName));\n            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);\n            resp.setContentLength((int) sz);\n            OutputStream out = resp.getOutputStream();\n            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n            try {\n                IOUtils.copy(streamToLoad, bos);\n            } finally {\n                IOUtils.closeQuietly(streamToLoad);\n                IOUtils.closeQuietly(bos);\n            }\n            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n        }\n']",68,"    static void CopyStream(File id, File log) throws IOException {
        FileChannel copy = new FileInputStream(id).getChannel();
        FileChannel coordregation = new FileOutputStream(log).getChannel();
        copy.transferTo(0, copy.size(), coordregation);
        copy.close();
        coordregation.close();
    }
",1,1,1,-1,"copyFile,in,out,source,destination","copyFile:3.4769376118977863e-07,in:7.351239522298176e-07,out:5.563100179036458e-07,source:8.742014567057291e-07,destination:-4.172325134277344e-07,",5,12,"in:id,source:copy,out:log,destination:coordregation,copyFile:CopyStream,",Greedy,,
,,,,,,,,,,,,,,,
125,"['3731077', '7425022', '    public static void copyFile(File from, File to) throws IOException {\n        assert (from != null);\n        assert (to != null);\n        if (!to.exists()) {\n            File parentDir = to.getParentFile();\n            if (!parentDir.exists()) parentDir.mkdirs();\n            to.createNewFile();\n        }\n        FileInputStream in = null;\n        FileOutputStream out = null;\n        try {\n            in = new FileInputStream(from);\n            try {\n                out = new FileOutputStream(to);\n                FileChannel ic = in.getChannel();\n                try {\n                    FileChannel oc = out.getChannel();\n                    try {\n                        oc.transferFrom(ic, 0, from.length());\n                    } finally {\n                        if (oc != null) {\n                            oc.close();\n                        }\n                    }\n                } finally {\n                    if (ic != null) {\n                        ic.close();\n                    }\n                }\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n', '    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n        String filePath = null;\n        try {\n            URL endpoint = new URL(wsdlURL);\n            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n            conn.setDoOutput(false);\n            conn.setDoInput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(""GET"");\n            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");\n            conn.setRequestProperty(""Connection"", ""close"");\n            if (userPassword != null) {\n                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n            }\n            InputStream is = null;\n            if (conn.getResponseCode() == 200) {\n                is = conn.getInputStream();\n            } else {\n                is = conn.getErrorStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                StringWriter sw = new StringWriter();\n                char[] buf = new char[200];\n                int read = 0;\n                while (read != -1) {\n                    read = isr.read(buf);\n                    sw.write(buf);\n                }\n                throw new WiseConnectionException(""Remote server\'s response is an error: "" + sw.toString());\n            }\n            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));\n            if (!outputDir.exists()) {\n                outputDir.mkdir();\n                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");\n            }\n            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());\n            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n            IOUtils.copyStream(fos, is);\n            fos.close();\n            is.close();\n            filePath = file.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(""Wsdl download failed!"", e);\n        }\n        return filePath;\n    }\n']",210,"    public static void copyFile(File origin, File to) throws IOException {
        assert (origin != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(origin);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, origin.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
",1,1,0,1,"copyFile,from,to,parentDir,in,out,ic,oc","copyFile:-8.977949619293213e-07,from:-1.6242265701293945e-06,to:-8.42660665512085e-06,parentDir:-1.9390136003494263e-06,in:-2.0116567611694336e-06,out:-8.66129994392395e-07,ic:1.6987323760986328e-06,oc:5.7891011238098145e-06,",1,4,"from:origin,",Greedy,,
,,,,,,,,,,,,,,,
126,"['14303294', '16556717', '    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n        byte[] hash;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");\n            digest.reset();\n            digest.update(PasswordSalt.getBytes(""UTF-16""));\n            hash = digest.digest(passwordHash.getBytes(""UTF-16""));\n            return bytesToHex(hash);\n        } catch (NoSuchAlgorithmException ex) {\n            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");\n        } catch (UnsupportedEncodingException ex) {\n            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");\n        }\n    }\n', '    public static String getSHADigest(String password) {\n        String digest = null;\n        MessageDigest sha = null;\n        try {\n            sha = MessageDigest.getInstance(""SHA-1"");\n            sha.reset();\n            sha.update(password.getBytes());\n            byte[] pwhash = sha.digest();\n            digest = ""{SHA}"" + new String(Base64.encode(pwhash));\n        } catch (NoSuchAlgorithmException nsae) {\n            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);\n        }\n        return digest;\n    }\n']",99,"    public String toServerMac(String emailHTML, String UserToken) throws PasswordHashingException {
        byte[] message;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(UserToken.getBytes(""UTF-16""));
            message = digest.digest(emailHTML.getBytes(""UTF-16""));
            return bytesToHex(message);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
",1,1,1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest","getServerHash:3.3928797795222357e-07,passwordHash:-1.2929622943584736e-06,PasswordSalt:-1.5588907095102164e-07,hash:-3.438729506272536e-06,digest:-2.0357278677133414e-05,",4,8,"passwordHash:emailHTML,hash:message,digest:digest,getServerHash:toServerMac,PasswordSalt:UserToken,",Greedy,,
,,,,,,,,,,,,,,,
127,"['7945594', '12039034', '    public static void fileDownload(String fAddress, String destinationDir) {\n        int slashIndex = fAddress.lastIndexOf(\'/\');\n        int periodIndex = fAddress.lastIndexOf(\'.\');\n        String fileName = fAddress.substring(slashIndex + 1);\n        URL url;\n        try {\n            url = new URL(fAddress);\n            URLConnection uc = url.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n            File file = new File(destinationDir + ""/download.pdf"");\n            FileOutputStream fos = new FileOutputStream(file);\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));\n            int inputLine;\n            while ((inputLine = in.read()) != -1) out.write(inputLine);\n            in.close();\n        } catch (Exception ex) {\n            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n', '    public static ArrayList<RoleName> importRoles(String urlString) {\n        ArrayList<RoleName> results = new ArrayList<RoleName>();\n        try {\n            URL url = new URL(urlString);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buff = new StringBuffer();\n            String line;\n            while ((line = in.readLine()) != null) {\n                buff.append(line);\n                if (line.equals(""</RoleName>"")) {\n                    RoleName name = ProfileParser.parseRoleName(buff.toString());\n                    results.add(name);\n                    buff = new StringBuffer();\n                } else {\n                    buff.append(NL);\n                }\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        } catch (ParsingException e) {\n        }\n        return results;\n    }\n']",181,"    public static void FileUpdate(String fmOrder, String destinedDirector) {
        int sllashNumber = fmOrder.lastIndexOf('/');
        int periodIndex = fmOrder.lastIndexOf('.');
        String pagename = fmOrder.substring(sllashNumber + 1);
        URL url;
        try {
            url = new URL(fmOrder);
            URLConnection auc = url.openConnection();
            BufferedReader body = new BufferedReader(new InputStreamReader(auc.getInputStream()));
            File db = new File(destinedDirector + ""/download.pdf"");
            FileOutputStream foss = new FileOutputStream(db);
            BufferedWriter write = new BufferedWriter(new OutputStreamWriter(foss));
            int InputRow;
            while ((InputRow = body.read()) != -1) write.write(InputRow);
            body.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
",1,1,0,1,"fileDownload,fAddress,destinationDir,slashIndex,periodIndex,fileName,url,uc,in,file,fos,out,inputLine","fileDownload:2.95556824782799e-06,fAddress:2.0183365920494344e-05,destinationDir:-2.1786525331694503e-06,slashIndex:5.010900826289736e-06,periodIndex:9.475083186708647e-07,fileName:-1.3811834927262931e-06,url:5.0702999378072807e-05,uc:-1.7963606735755657e-06,in:5.138125912896518e-05,file:-1.3667961646770608e-05,fos:-5.5740619527882545e-06,out:-2.0779412368248247e-05,inputLine:0.001597757997183964,",11,25,"fAddress:fmOrder,slashIndex:sllashNumber,fileName:pagename,in:body,file:db,uc:auc,periodIndex:periodIndex,destinationDir:destinedDirector,fileDownload:FileUpdate,fos:foss,out:write,inputLine:InputRow,",Greedy,,
,,,,,,,,,,,,,,,
128,"['13122204', '19322941', '    public static void unzipModel(String filename, String tempdir) throws EDITSException {\n        try {\n            BufferedOutputStream dest = null;\n            FileInputStream fis = new FileInputStream(filename);\n            int BUFFER = 2048;\n            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                int count;\n                byte data[] = new byte[BUFFER];\n                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n                dest = new BufferedOutputStream(fos, BUFFER);\n                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n                dest.flush();\n                dest.close();\n            }\n            zis.close();\n        } catch (Exception e) {\n            throw new EDITSException(""Can not expand model in \\"""" + tempdir + ""\\"" because:\\n"" + e.getMessage());\n        }\n    }\n', '    @Test\n    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {\n        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(""GET"");\n        connection.setRequestProperty(""Accept"", ""application/json"");\n        assertThat(connection.getResponseCode(), equalTo(200));\n        assertThat(getResponse(connection), equalTo(""[{\\""itemTypeID\\"":25605,\\""itemCategoryID\\"":4,\\""name\\"":\\""Armor Plates\\"",\\""icon\\"":\\""69_09\\""},{\\""itemTypeID\\"":25624,\\""itemCategoryID\\"":4,\\""name\\"":\\""Intact Armor Plates\\"",\\""icon\\"":\\""69_10\\""}]""));\n        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));\n    }\n']",174,"    public static void unlatemodel(String sql, String tempDIR) throws EDITSException {
        try {
            BufferedOutputStream display = null;
            FileInputStream ifos = new FileInputStream(sql);
            int CUFR = 2048;
            ZipInputStream zees = new ZipInputStream(new BufferedInputStream(ifos));
            ZipEntry word;
            while ((word = zees.getNextEntry()) != null) {
                int page;
                byte sample[] = new byte[CUFR];
                FileOutputStream vos = new FileOutputStream(tempDIR + word.getName());
                display = new BufferedOutputStream(vos, CUFR);
                while ((page = zees.read(sample, 0, CUFR)) != -1) display.write(sample, 0, page);
                display.flush();
                display.close();
            }
            zees.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempDIR + ""\"" because:
"" + e.getMessage());
        }
    }
",0,0,0,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos","unzipModel:2.3096799850463867e-07,filename:1.4901161193847656e-08,tempdir:-4.470348358154297e-08,dest:8.381903171539307e-07,fis:-7.450580596923828e-08,BUFFER:1.9371509552001953e-07,zis:3.427267074584961e-07,entry:1.1175870895385742e-08,count:6.705522537231445e-08,data:1.6763806343078613e-07,fos:-1.564621925354004e-07,",11,32,"dest:display,BUFFER:CUFR,zis:zees,count:page,data:sample,fis:ifos,unzipModel:unlatemodel,filename:sql,tempdir:tempDIR,entry:word,fos:vos,",Greedy,,
,,,,,,,,,,,,,,,
129,"['1362', '22752444', '    public static int[] bubbleSort(int... a) {\n        boolean swapped;\n        do {\n            swapped = false;\n            for (int i = 0; i < a.length - 1; i++) {\n                if (a[i] > a[i + 1]) {\n                    int tmp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = tmp;\n                    swapped = true;\n                }\n            }\n        } while (swapped);\n        return a;\n    }\n', '    public synchronized String encrypt(String plainText) {\n        String hash = null;\n        try {\n            MessageDigest md = null;\n            try {\n                md = MessageDigest.getInstance(""SHA"");\n            } catch (NoSuchAlgorithmException e) {\n                throw new NoSuchAlgorithmException();\n            }\n            try {\n                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));\n            } catch (UnsupportedEncodingException e) {\n                throw new UnsupportedEncodingException();\n            }\n            byte raw[] = md.digest();\n            hash = (new BASE64Encoder()).encode(raw);\n        } catch (NoSuchAlgorithmException e) {\n            MessageLog.writeErrorMessage(e, this);\n        } catch (UnsupportedEncodingException e) {\n            MessageLog.writeErrorMessage(e, this);\n        }\n        return Util.stripChars(hash);\n    }\n']",101,"    public static int[] bubblesCompare(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
",0,0,0,-1,"bubbleSort,a,swapped,i,tmp","bubbleSort:0.00032508373260498047,a:0.0028749847412109374,swapped:0.001197795867919922,i:0.004993972778320312,tmp:0.00017312049865722656,",1,1,"a:a,i:i,tmp:tmp,bubbleSort:bubblesCompare,swapped:swapped,",Greedy,,
,,,,,,,,,,,,,,,
130,"['1362', '1357662', '    public static int[] bubbleSort(int... a) {\n        boolean swapped;\n        do {\n            swapped = false;\n            for (int i = 0; i < a.length - 1; i++) {\n                if (a[i] > a[i + 1]) {\n                    int tmp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = tmp;\n                    swapped = true;\n                }\n            }\n        } while (swapped);\n        return a;\n    }\n', '    private void copyFileTo(File destination) throws IOException {\n        logger.fine(""Copying from "" + destination + ""..."");\n        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();\n        logger.fine(""...got source channel "" + srcChannel + ""..."");\n        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();\n        logger.fine(""...got destination channel "" + destChannel + ""..."");\n        logger.fine(""...Got channels..."");\n        destChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        logger.fine(""...transferred."");\n        srcChannel.close();\n        destChannel.close();\n    }\n']",101,,0,0,,-3,"bubbleSort,a,swapped,i,tmp",,,,,Greedy,,
,,,,,,,,,,,,,,,
131,"['18631594', '5723876', '    public static synchronized String getMD5_Base64(String input) {\n        MessageDigest msgDigest = null;\n        try {\n            msgDigest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(""System doesn\'t support MD5 algorithm."");\n        }\n        try {\n            msgDigest.update(input.getBytes(""UTF-8""));\n        } catch (java.io.UnsupportedEncodingException ex) {\n            throw new IllegalStateException(""System doesn\'t support your  EncodingException."");\n        }\n        byte[] rawData = msgDigest.digest();\n        byte[] encoded = Base64.encode(rawData);\n        String retValue = new String(encoded);\n        return retValue;\n    }\n', '    public static final String calculate(File f) {\n        MessageDigest md;\n        BufferedReader rd;\n        StringBuffer buffer = new StringBuffer("""");\n        try {\n            rd = new BufferedReader(new FileReader(f));\n            md = MessageDigest.getInstance(""SHA"");\n            String line = """";\n            while ((line = rd.readLine()) != null) buffer.append(line);\n            md.update(buffer.toString().getBytes());\n            byte[] digest = md.digest();\n            String result = """";\n            for (byte b : digest) result += String.format(""%h"", b & 0xFF);\n            return result;\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return """";\n        }\n    }\n']",111,"    public static synchronized String getMD5AsBase64(String output) {
        MessageDigest msgDest = null;
        try {
            msgDest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDest.update(output.getBytes(""UTF-8""));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[]  rawInput = msgDest.digest();
        byte[] enoded = Base64.encode( rawInput);
        String returnValues = new String(enoded);
        return returnValues;
    }
",1,1,1,-1,"getMD5_Base64,input,msgDigest,rawData,encoded,retValue","getMD5_Base64:3.3882948068472056e-06,input:2.971062293419471e-06,msgDigest:-2.563916719876803e-05,rawData:2.292486337515024e-07,encoded:-1.3571519118088943e-06,retValue:-1.5497207641601562e-06,",6,13,"msgDigest:msgDest,rawData: rawInput,encoded:enoded,retValue:returnValues,input:output,getMD5_Base64:getMD5AsBase64,",Greedy,,
,,,,,,,,,,,,,,,
132,"['12306305', '7908169', '    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n        if (destFile.exists() && destFile.isDirectory()) {\n            throw new IOException(""Destination \'"" + destFile + ""\' exists but is a directory"");\n        }\n        FileChannel input = new FileInputStream(srcFile).getChannel();\n        try {\n            FileChannel output = new FileOutputStream(destFile).getChannel();\n            try {\n                output.transferFrom(input, 0, input.size());\n            } finally {\n                IOUtil.closeQuietly(output);\n            }\n        } finally {\n            IOUtil.closeQuietly(input);\n        }\n        if (srcFile.length() != destFile.length()) {\n            throw new IOException(""Failed to copy full contents from \'"" + srcFile + ""\' to \'"" + destFile + ""\'"");\n        }\n        if (preserveFileDate) {\n            destFile.setLastModified(srcFile.lastModified());\n        }\n    }\n', '    public String execute() {\n        String dir = ""E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\"";\n        HomeMap map = new HomeMap();\n        map.setDescription(description);\n        Integer id = homeMapDao.saveHomeMap(map);\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(dir + id);\n            IOUtils.copy(new FileInputStream(imageFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return list();\n    }\n']",161,,1,1,,-3,"doCopyFile,srcFile,destFile,preserveFileDate,input,output",,,,,Greedy,,
,,,,,,,,,,,,,,,
133,"['1798720', '21656668', '    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n        String dirBase = Util.JAVA_DIR + File.separator + packageName;\n        File packageDir = new File(dirBase);\n        if (!packageDir.exists()) {\n            boolean created = packageDir.mkdir();\n            if (!created) {\n                File currentPath = new File(""."");\n                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i < fileContents.size(); i++) {\n            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(fileContents.get(i));\n            fos.flush();\n            fos.close();\n        }\n        for (int i = 0; i < fileNames.size(); i++) {\n            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n            writer.append(""package "" + packageName + "";\\n"");\n            String line = """";\n            while ((line = reader.readLine()) != null) writer.append(line + ""\\n"");\n            writer.flush();\n            writer.close();\n            reader.close();\n        }\n    }\n', '    private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n        InputStream inStream = null;\n        OutputStream outStream = null;\n        try {\n            inStream = MatsimResource.getAsInputStream(resourceFilename);\n            outStream = new FileOutputStream(destinationFilename);\n            IOUtils.copyStream(inStream, outStream);\n        } finally {\n            if (inStream != null) {\n                try {\n                    inStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (outStream != null) {\n                try {\n                    outStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n']",320,"    public static void archive(String PackageId, ArrayList<byte[]> pageNames, ArrayList<String> fileNames) throws Exception {
        String pathBasic = Util.JAVA_DIR + File.separator + PackageId;
        File installD = new File(pathBasic);
        if (!installD.exists()) {
            boolean produced = installD.mkdir();
            if (!produced) {
                File currentCh = new File(""."");
                throw new Exception(""Directory "" + PackageId + "" could not be created. Current directory: "" + currentCh.getAbsolutePath());
            }
        }
        for (int iii = 0; iii < pageNames.size(); iii++) {
            File link = new File(Util.JAVA_DIR + File.separator + fileNames.get(iii));
            FileOutputStream Faos = new FileOutputStream(link);
            Faos.write(pageNames.get(iii));
            Faos.flush();
            Faos.close();
        }
        for (int iii = 0; iii < fileNames.size(); iii++) {
            File fileDrl = new File(Util.JAVA_DIR + File.separator + fileNames.get(iii));
            File FileDot = new File(pathBasic + File.separator + fileNames.get(iii));
            BufferedReader query = new BufferedReader(new FileReader(fileDrl));
            BufferedWriter report = new BufferedWriter(new FileWriter(FileDot));
            report.append(""package "" + PackageId + "";
"");
            String user = """";
            while ((user = query.readLine()) != null) report.append(user + ""
"");
            report.flush();
            report.close();
            query.close();
        }
    }
",1,1,1,-1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:1.247282381410952e-07,packageName:2.9140048556857636e-07,fileContents:2.748436397976345e-07,fileNames:6.512359336570457e-07,dirBase:1.3576613532172308e-07,packageDir:1.8212530348036023e-07,created:4.635916815863715e-08,currentPath:5.077432703088831e-08,i:6.843496251989294e-07,file:1.1037897180627893e-08,fos:2.6490953233506946e-07,fileSrc:-7.064254195601851e-08,fileDst:-1.5011540165653933e-07,reader:-1.755025651719835e-07,writer:-4.967053731282551e-07,line:3.112687004937066e-07,",15,49,"packageName:PackageId,dirBase:pathBasic,i:iii,save:archive,fileContents:pageNames,fileNames:fileNames,file:link,currentPath:currentCh,fileSrc:fileDrl,packageDir:installD,created:produced,fileDst:FileDot,fos:Faos,reader:query,writer:report,line:user,",Greedy,,
,,,,,,,,,,,,,,,
134,"['8770016', '88047', '    public InputStream loadResource(String location) throws GenericConfigException {\n        URL url = getURL(location);\n        try {\n            return url.openStream();\n        } catch (java.io.IOException e) {\n            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",59,"    public InputStream openResource(String location) throws GenericConfigException {
        URL url = getURL(location);
        try {
            return url.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);
        }
    }
",0,0,0,-1,"loadResource,location,url","loadResource:1.2389251164027621e-05,location:1.9056456429617746e-05,url:1.895427703857422e-05,",1,1,"location:location,url:url,loadResource:openResource,",Greedy,,
,,,,,,,,,,,,,,,
135,"['16931472', '13981689', '    public void handler(Map<String, String> result, TargetPage target) {\n        try {\n            URL url = new URL(target.getUrl());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                for (Map.Entry<String, String> entry : result.entrySet()) {\n                    if (line.indexOf(target.getInclude()) != -1) {\n                        int fromIndex = line.indexOf(target.getFromStr());\n                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n                        entry.setValue(r);\n                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n                    }\n                }\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n', '    public static String md5Hash(String src) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(src.getBytes());\n            return bytesArrayToHexString(md.digest());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n']",212,"    public void request(Map<String, String> map, TargetPage closure) {
        try {
            URL git = new URL(closure.getUrl());
            BufferedReader writer = new BufferedReader(new InputStreamReader(git.openStream()));
            String email = null;
            while ((email = writer.readLine()) != null) {
                for (Map.Entry<String, String> list : map.entrySet()) {
                    if (email.indexOf(closure.getInclude()) != -1) {
                        int FromAlpha = email.indexOf(closure.getFromStr());
                        String g = email.substring(FromAlpha + closure.getFromStr().length(), email.indexOf(closure.getToStr(), FromAlpha));
                        list.setValue(g);
                        email = email.substring(email.indexOf(closure.getToStr()) + closure.getToStr().length());
                    }
                }
            }
            writer.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0,0,0,-1,"handler,result,target,url,reader,line,entry,fromIndex,r","handler:-1.6540288925170898e-06,result:-8.195638656616211e-06,target:-9.079277515411377e-05,url:-2.130866050720215e-05,reader:-2.757646143436432e-05,line:-5.550496280193329e-05,entry:-1.73225998878479e-06,fromIndex:-8.605420589447021e-07,r:-8.083879947662354e-07,",9,32,"url:git,reader:writer,r:g,target:closure,line:email,fromIndex:FromAlpha,handler:request,result:map,entry:list,",Greedy,,
,,,,,,,,,,,,,,,
136,"['3046085', '8490297', '    public Song(String s) {\n        StringTokenizer tokenizer = new StringTokenizer(s, "";"");\n        free = false;\n        title = tokenizer.nextToken();\n        artist = tokenizer.nextToken();\n        location = tokenizer.nextToken();\n        rating = Integer.parseInt(tokenizer.nextToken());\n        overplay = Integer.parseInt(tokenizer.nextToken());\n        String temp = tokenizer.nextToken();\n        tokenizer = new StringTokenizer(temp, "",[] "");\n        tags = new ArrayList<String>();\n        while (tokenizer.hasMoreTokens()) {\n            tags.add(tokenizer.nextToken());\n        }\n        byte[] bytes = new byte[40];\n        try {\n            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");\n            hasher.update(title.getBytes());\n            hasher.update(artist.getBytes());\n            bytes = hasher.digest();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n', '    public static void copyFile(File src, File dst) throws IOException {\n        try {\n            InputStream in = new FileInputStream(src);\n            OutputStream out = new FileOutputStream(dst);\n            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n            int len;\n            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e1) {\n            MLUtil.runtimeError(e1, src.toString());\n        } catch (IOException e2) {\n            MLUtil.runtimeError(e2, src.toString());\n        }\n    }\n']",193,"    public Song(String s) {
        StringTokenizer serializable = new StringTokenizer(s, "";"");
        free = false;
        displayText = serializable.nextToken();
        archive = serializable.nextToken();
        local = serializable.nextToken();
        credit = Integer.parseInt(serializable.nextToken());
         override = Integer.parseInt(serializable.nextToken());
        String template = serializable.nextToken();
        serializable = new StringTokenizer(template, "",[] "");
        names = new ArrayList<String>();
        while (serializable.hasMoreTokens()) {
            names.add(serializable.nextToken());
        }
        byte[] lines = new byte[40];
        try {
            MessageDigest Hasher = MessageDigest.getInstance(""SHA-1"");
            Hasher.update(displayText.getBytes());
            Hasher.update(archive.getBytes());
            lines = Hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
",0,0,0,-1,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher","s:3.19522002647663e-05,tokenizer:0.0005785966741627661,title:3.781811944369612e-07,artist:2.3122491507694638e-05,location:6.089950429982152e-06,rating:5.703547905231344e-06,overplay:4.441573702055833e-06,temp:2.482019621750404e-05,tags:1.3108911185429013e-05,bytes:1.2825275289601293e-06,hasher:8.519764604239629e-05,",10,27,"s:s,tokenizer:serializable,rating:credit,overplay: override,title:displayText,artist:archive,temp:template,location:local,hasher:Hasher,tags:names,bytes:lines,",Greedy,,
,,,,,,,,,,,,,,,
137,"['6341264', '15905041', '    public static byte[] getJarEntry(String jarName, String entry, int port) {\n        byte[] b = null;\n        try {\n            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());\n            String protocol = ""http://"";\n            int x = codebase.indexOf(protocol) + protocol.length();\n            String s2 = codebase.substring(x);\n            int x2 = s2.indexOf(\'/\');\n            String downloadHost = s2.substring(0, x2);\n            if (downloadHost.indexOf(\':\') == -1) {\n                downloadHost += "":"" + port;\n            }\n            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);\n            JarURLConnection jurl = (JarURLConnection) url.openConnection();\n            JarEntry je = jurl.getJarEntry();\n            InputStream is = jurl.getInputStream();\n            BufferedInputStream bis = new BufferedInputStream(is);\n            int size = (int) je.getSize();\n            b = new byte[size];\n            int rb = 0;\n            int chunk = 0;\n            while ((size - rb) > 0) {\n                chunk = bis.read(b, rb, size - rb);\n                if (chunk == -1) {\n                    break;\n                }\n                rb += chunk;\n            }\n            bis.close();\n            is.close();\n            bis = null;\n            is = null;\n            url = null;\n            jurl = null;\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return b;\n    }\n', '    public void createPartControl(Composite parent) {\n        viewer = new ScrollingGraphicalViewer();\n        viewer.setRootEditPart(new ScalableRootEditPart());\n        viewer.setEditPartFactory(new BlockEditPartFactory());\n        viewer.setEditDomain(new EditDomain());\n        viewer.createControl(parent);\n        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));\n        ActionRegistry actionRegistry = new ActionRegistry();\n        createActions(actionRegistry);\n        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);\n        viewer.setContextMenu(cmProvider);\n        Block b = new Block();\n        b.addChild(new ChartItem());\n        viewer.setContents(b);\n        System.err.println(""!!! "" + viewer.getContents().getChildren().get(0));\n        viewer.select((EditPart) viewer.getContents().getChildren().get(0));\n        PaletteRoot root = new PaletteRoot();\n        PaletteGroup toolGroup = new PaletteGroup(""Chart Tools"");\n        List toolList = new ArrayList();\n        ToolEntry tool = new SelectionToolEntry();\n        toolList.add(tool);\n        root.setDefaultEntry(tool);\n        tool = new MarqueeToolEntry();\n        toolList.add(tool);\n        toolGroup.addAll(toolList);\n        PaletteGroup templateGroup = new PaletteGroup(""Templates"");\n        List templateList = new ArrayList();\n        CombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry(""Rect"", ""Rect"", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n        CombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry(""Line"", ""Line"", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n        templateList.add(entry);\n        templateList.add(entry1);\n        templateGroup.addAll(templateList);\n        List rootList = new ArrayList();\n        rootList.add(toolGroup);\n        rootList.add(templateGroup);\n        root.addAll(rootList);\n        final PaletteViewer v = new PaletteViewer();\n        v.setPaletteRoot(root);\n        v.createControl(parent);\n        v.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                System.err.println(""selectionChanged "" + v.getActiveTool());\n            }\n        });\n        deleteAction.setSelectionProvider(viewer);\n        viewer.getEditDomain().setPaletteViewer(v);\n        viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                System.err.println(event.getSelection());\n                deleteAction.update();\n            }\n        });\n        viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {\n\n            public void stackChanged(CommandStackEvent event) {\n                undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());\n                redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());\n            }\n        });\n    }\n']",315,"    public static byte[] getModuleEntry(String binaryName, String path, int connection) {
        byte[] B = null;
        try {
            String Codefile = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String phyication = ""http://"";
            int dx = Codefile.indexOf(phyication) + phyication.length();
            String s2 = Codefile.substring(dx);
            int ax3 = s2.indexOf('/');
            String downloadUrl = s2.substring(0, ax3);
            if (downloadUrl.indexOf(':') == -1) {
                downloadUrl += "":"" + connection;
            }
            URL download = new URL(""jar:http://"" + downloadUrl + ""/"" + binaryName + ""!/"" + path);
            JarURLConnection jcurl = (JarURLConnection) download.openConnection();
            JarEntry zo = jcurl.getModuleEntry();
            InputStream ís = jurl.getInputStream();
            BufferedInputStream bps = new BufferedInputStream(ís);
            int sex = (int) zo.getSize();
            B = new byte[sex];
            int ring = 0;
            int Chulk = 0;
            while ((sex - ring) > 0) {
                Chulk = bps.read(B, ring, sex - ring);
                if (Chulk == -1) {
                    break;
                }
                ring += Chulk;
            }
            bps.close();
            ís.close();
            bps = null;
            ís = null;
            download = null;
            jcurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return B;
    }
",0,0,0,-1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk","getJarEntry:-4.040992866128178e-08,jarName:-1.6163971464512712e-08,entry:-8.081985732256356e-09,port:0.0,b:-4.040992866128178e-08,codebase:-1.8184467897576802e-08,protocol:-4.2430425094345875e-08,x:-1.2122978598384535e-08,s2:-6.061489299192267e-09,x2:-4.040992866128178e-09,downloadHost:-2.424595719676907e-08,url:-1.8184467897576803e-07,jurl:-4.040992866128178e-07,je:-3.6368935795153604e-08,is:-1.0506581451933263e-07,bis:-8.890184305481992e-08,size:-5.657390012579449e-08,rb:2.020496433064089e-08,chunk:-4.849191439353814e-08,",18,56,"jarName:binaryName,entry:path,downloadHost:downloadUrl,url:download,b:B,codebase:Codefile,protocol:phyication,x:dx,s2:s2,x2:ax3,getJarEntry:getModuleEntry,port:connection,is:ís,bis:bps,size:sex,rb:ring,chunk:Chulk,jurl:jcurl,je:zo,",Greedy,,
,,,,,,,,,,,,,,,
138,"['8132219', '9727056', '    public static void copyFile(String inFile, String outFile) {\n        File in = new File(inFile);\n        File out = new File(outFile);\n        try {\n            FileChannel inChannel = new FileInputStream(in).getChannel();\n            FileChannel outChannel = new FileOutputStream(out).getChannel();\n            try {\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n            } finally {\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n', '    @Override\n    public OBJModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n        boolean baseURLWasNull = setBaseURLFromModelURL(url);\n        OBJModel model = loadModel(url.openStream(), skin);\n        if (baseURLWasNull) {\n            popBaseURL();\n        }\n        return (model);\n    }\n']",120,"    public static void copyFiles(String inTemplate, String ouFILE) {
        File ins = new File(inTemplate);
        File outs = new File(ouFILE);
        try {
            FileChannel innSlot = new FileInputStream(ins).getChannel();
            FileChannel nChan = new FileOutputStream(outs).getChannel();
            try {
                innSlot.transferTo(0, innSlot.size(), nChan);
            } finally {
                if (innSlot != null) innSlot.close();
                if (nChan != null) nChan.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",0,0,0,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel","copyFile:-9.934107462565103e-08,inFile:-7.947285970052083e-08,outFile:-2.6490953233506943e-08,in:-2.781550089518229e-07,out:-3.5762786865234375e-07,inChannel:1.7881393432617188e-06,outChannel:7.152557373046875e-07,",7,18,"inFile:inTemplate,in:ins,outFile:ouFILE,out:outs,inChannel:innSlot,outChannel:nChan,copyFile:copyFiles,",Greedy,,
,,,,,,,,,,,,,,,
139,"['14047629', '22401746', '    protected ExternalDecoder(InputStream source, Process process) {\n        super(source);\n        this.process = process;\n        this.processStdOut = process.getInputStream();\n        this.processStdIn = process.getOutputStream();\n        new Thread() {\n\n            @Override\n            public void run() {\n                try {\n                    IOUtils.copy(getSource(), processStdIn);\n                    System.err.println(""Copy done."");\n                    close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    IOUtils.closeQuietly(ExternalDecoder.this);\n                }\n            }\n        }.start();\n    }\n', '    public String sendRequest(java.lang.String servletName, java.lang.String request) {\n        String reqxml = """";\n        org.jdom.Document retdoc = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");\n        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = ""localhost"";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);\n            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");\n            System.out.println(req1xml);\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");\n            retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n        } catch (java.net.ConnectException conexp) {\n            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n        }\n        System.out.println(reqxml);\n        return """";\n    }\n']",111,,0,0,,-3,"source,process,processStdOut,processStdIn",,,,,Greedy,,
,,,,,,,,,,,,,,,
140,"['693636', '12417893', '    public static int createEmptyCart() {\n        int SHOPPING_ID = 0;\n        Connection con = null;\n        try {\n            con = getConnection();\n        } catch (java.lang.Exception ex) {\n            ex.printStackTrace();\n        }\n        try {\n            PreparedStatement insert_cart = null;\n            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));\n            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");\n            insert_cart.setInt(1, SHOPPING_ID);\n            insert_cart.executeUpdate();\n            con.commit();\n            insert_cart.close();\n            returnConnection(con);\n        } catch (java.lang.Exception ex) {\n            try {\n                con.rollback();\n                ex.printStackTrace();\n            } catch (Exception se) {\n                System.err.println(""Transaction rollback failed."");\n            }\n        }\n        return SHOPPING_ID;\n    }\n', '    @Override\n    public byte[] download(URI uri) throws NetworkException {\n        log.info(""download: "" + uri);\n        HttpGet httpGet = new HttpGet(uri.toString());\n        try {\n            HttpResponse httpResponse = httpClient.execute(httpGet);\n            return EntityUtils.toByteArray(httpResponse.getEntity());\n        } catch (IOException e) {\n            throw new NetworkException(e);\n        } finally {\n            httpGet.abort();\n        }\n    }\n']",153,,0,0,,-3,"createEmptyCart,SHOPPING_ID,con,insert_cart",,,,,Greedy,,
,,,,,,,,,,,,,,,
141,"['9275622', '12066447', '    private boolean copyFile(File _file1, File _file2) {\n        FileInputStream fis;\n        FileOutputStream fos;\n        try {\n            fis = new FileInputStream(_file1);\n            fos = new FileOutputStream(_file2);\n            FileChannel canalFuente = fis.getChannel();\n            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n            fis.close();\n            fos.close();\n            return true;\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n        return false;\n    }\n', '    protected void truncate(final File file) {\n        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");\n        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            final File backupRoot = new File(this.getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(""Can\'t create backup dir for backup storage"");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(this.getBackupDateFormat());\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);\n            }\n            final String date = df.format(new Date(file.lastModified()));\n            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                final ZipEntry entry = new ZipEntry(file.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(file));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(file);\n                final byte[] buffer = new byte[1024];\n                int readed;\n                while ((readed = fis.read(buffer)) != -1) {\n                    zos.write(buffer, 0, readed);\n                }\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(""Can\'t create zip file"", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(""Can\'t close zip file"", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(""Can\'t close zipped file"", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(""Can\'t delete old log file "" + file.getAbsolutePath());\n            }\n        }\n    }\n']",98,,1,1,,-3,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,,Greedy,,
,,,,,,,,,,,,,,,
142,"['810342', '16623181', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    public static void main(String[] args) {\n        File srcDir = new File(args[0]);\n        File dstDir = new File(args[1]);\n        File[] srcFiles = srcDir.listFiles();\n        for (File f : srcFiles) {\n            if (f.isDirectory()) continue;\n            try {\n                FileChannel srcChannel = new FileInputStream(f).getChannel();\n                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();\n                ByteBuffer buffer = ByteBuffer.allocate(1024);\n                int nr = 0;\n                srcChannel.position(nr);\n                nr += srcChannel.read(buffer);\n                while (nr < f.length()) {\n                    buffer.flip();\n                    dstChannel.write(buffer);\n                    buffer.clear();\n                    nr += srcChannel.read(buffer);\n                }\n                srcChannel.close();\n                dstChannel.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n']",236,"    public static void doDateFix(View browser) {
        browser.showWaitCursor();
        try {
            URL log = new URL(jEdit.getProperty(""version-check.url""));
            InputStream out = log.openStream();
            BufferedReader file = new BufferedReader(new InputStreamReader(out));
            String cmd;
            String python = null;
            String install = null;
            while ((cmd = file.readLine()) != null) {
                if (cmd.startsWith("".version"")) python = cmd.substring(8).trim(); else if (cmd.startsWith("".build"")) install = cmd.substring(6).trim();
            }
            file.close();
            if (python != null && install != null) {
                if (jEdit.getBuild().compareTo(install) < 0) newVersionAvailable(browser, python, log); else {
                    GUIUtilities.message(browser, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(browser, ""read-error"", args);
        }
        browser.hideWaitCursor();
    }
",0,0,1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:3.288532125538793e-08,view:-7.645837191877694e-07,url:9.064016671016298e-07,in:1.3154128502155172e-07,bin:1.923791293440194e-06,line:2.737702994511045e-06,version:5.590504613415948e-07,build:7.234770676185344e-07,",8,29,"in:out,line:cmd,version:python,build:install,url:log,bin:file,doVersionCheck:doDateFix,view:browser,",Greedy,,
,,,,,,,,,,,,,,,
143,"['23310397', '15768167', '    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        mButton1 = (Button) findViewById(R.id.myButton1);\n        mButton2 = (Button) findViewById(R.id.myButton2);\n        mTextView1 = (TextView) findViewById(R.id.myTextView1);\n        mButton1.setOnClickListener(new Button.OnClickListener() {\n\n            public void onClick(View v) {\n                String uriAPI = ""http://www.sina.com"";\n                HttpPost httpRequest = new HttpPost(uriAPI);\n                List<NameValuePair> params = new ArrayList<NameValuePair>();\n                params.add(new BasicNameValuePair(""str"", ""post string""));\n                try {\n                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));\n                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n                    if (httpResponse.getStatusLine().getStatusCode() == 200) {\n                        String strResult = EntityUtils.toString(httpResponse.getEntity());\n                        mTextView1.setText(strResult);\n                    } else {\n                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());\n                    }\n                } catch (ClientProtocolException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (Exception e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                }\n            }\n        });\n        mButton2.setOnClickListener(new Button.OnClickListener() {\n\n            public void onClick(View v) {\n                String uriAPI = ""http://www.sina.com"";\n                HttpGet httpRequest = new HttpGet(uriAPI);\n                try {\n                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n                    if (httpResponse.getStatusLine().getStatusCode() == 200) {\n                        String strResult = EntityUtils.toString(httpResponse.getEntity());\n                        strResult = eregi_replace(""(\\r\\n|\\r|\\n|\\n\\r)"", """", strResult);\n                        mTextView1.setText(strResult);\n                    } else {\n                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());\n                    }\n                } catch (ClientProtocolException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (Exception e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n', '    public static void copyFile(File in, File out) throws Exception {\n        FileChannel sourceChannel = null;\n        FileChannel destinationChannel = null;\n        try {\n            sourceChannel = new FileInputStream(in).getChannel();\n            destinationChannel = new FileOutputStream(out).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        } finally {\n            if (sourceChannel != null) sourceChannel.close();\n            if (destinationChannel != null) destinationChannel.close();\n        }\n    }\n']",513,"    public void whenCre(Bundle savingInstanceState) {
        super.whenCre(savingInstanceState);
        setContentView(R.layout.main);
        MButton11 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextModelTab = (TextView) findViewById(R.id.myTextView1);
        MButton11.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View lv) {
                String directoryURI = ""http://www.sina.com"";
                HttpPost HttpCommand = new HttpPost(directoryURI);
                List<NameValuePair> requires = new ArrayList<NameValuePair>();
                requires.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    HttpCommand.setEntity(new UrlEncodedFormEntity(requires, HTTP.UTF_8));
                    HttpResponse htmlResults = new DefaultHttpClient().execute(HttpCommand);
                    if (htmlResults.getStatusLine().getStatusCode() == 200) {
                        String STRResults = EntityUtils.toString(htmlResults.getEntity());
                        mTextModelTab.setText(STRResults);
                    } else {
                        mTextModelTab.setText(""Error Response: "" + htmlResults.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextModelTab.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextModelTab.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextModelTab.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View lv) {
                String directoryURI = ""http://www.sina.com"";
                HttpGet HttpCommand = new HttpGet(directoryURI);
                try {
                    HttpResponse htmlResults = new DefaultHttpClient().execute(HttpCommand);
                    if (htmlResults.getStatusLine().getStatusCode() == 200) {
                        String STRResults = EntityUtils.toString(htmlResults.getEntity());
                        STRResults = eregi_replace(""(\r
|\r|
|
\r)"", """", strResult);
                        mTextModelTab.setText(STRResults);
                    } else {
                        mTextModelTab.setText(""Error Response: "" + htmlResults.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextModelTab.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextModelTab.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextModelTab.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
",0,0,0,-1,"onCreate,savedInstanceState,mButton1,mButton2,mTextView1,v,uriAPI,httpRequest,params,httpResponse,strResult","onCreate:-5.545823470405911e-07,savedInstanceState:2.0732050356657608e-07,mButton1:2.591506294582201e-07,mButton2:8.811121401579483e-08,mTextView1:1.4253284620202107e-06,v:1.2957531472911005e-07,uriAPI:2.798826798148777e-07,httpRequest:3.2393828682277515e-07,params:3.265297931173573e-07,httpResponse:5.846438200577445e-06,strResult:-1.0366025178328804e-07,",10,44,"mButton1:MButton11,mButton2:mButton2,mTextView1:mTextModelTab,httpResponse:htmlResults,strResult:STRResults,onCreate:whenCre,savedInstanceState:savingInstanceState,v:lv,httpRequest:HttpCommand,params:requires,uriAPI:directoryURI,",Greedy,,
,,,,,,,,,,,,,,,
144,"['12236729', '18974466', '        private void copy(File inputFile, File outputFile) throws Exception {\n            FileReader in = new FileReader(inputFile);\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n        }\n', '    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n']",70,,1,1,,-3,"copy,inputFile,outputFile,in,out,c",,,,,Greedy,,
,,,,,,,,,,,,,,,
145,"['6371607', '13233761', '    public void removeRealm(final List<Integer> realmIds) {\n        try {\n            connection.setAutoCommit(false);\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));\n                    Iterator<Integer> iter = realmIds.iterator();\n                    int realmId;\n                    while (iter.hasNext()) {\n                        realmId = iter.next();\n                        psImpl.setInt(1, realmId);\n                        psImpl.executeUpdate();\n                        cmDB.removeRealm(realmId);\n                    }\n                }\n            });\n            connection.commit();\n        } catch (SQLException sqle) {\n            log.error(sqle);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(true);\n                } catch (SQLException ex) {\n                }\n            }\n        }\n    }\n', '    public void executeUpdateTransaction(List queries) throws SQLException {\n        assert connection != null;\n        boolean autoCommit = connection.getAutoCommit();\n        connection.setAutoCommit(false);\n        try {\n            Iterator iterator = queries.iterator();\n            while (iterator.hasNext()) {\n                String query = (String) iterator.next();\n                Statement statement = connection.createStatement();\n                statement.executeUpdate(query);\n            }\n            connection.commit();\n            connection.setAutoCommit(autoCommit);\n        } catch (SQLException e) {\n            connection.rollback();\n            throw new SQLException(e.getMessage());\n        }\n    }\n']",200,"    public void removeScheM(final List<Integer> realmPathParts) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    PSimpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));
                    Iterator<Integer> walker = realmPathParts.iterator();
                    int trmID;
                    while (walker.hasNext()) {
                        trmID = walker.next();
                        PSimpl.setInt(1, trmID);
                        PSimpl.executeUpdate();
                        cmDB.removeScheM(trmID);
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",1,1,1,-1,"removeRealm,realmIds,psImpl,iter,realmId","removeRealm:4.589557647705078e-06,realmIds:2.2309167044503345e-06,psImpl:1.4394521713256836e-05,iter:5.466597420828683e-06,realmId:-3.269740513392857e-06,",5,14,"psImpl:PSimpl,removeRealm:removeScheM,realmIds:realmPathParts,realmId:trmID,iter:walker,",Greedy,,
,,,,,,,,,,,,,,,
146,"['21979462', '3809087', '    protected String downloadURLtoString(URL url) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        StringBuffer sb = new StringBuffer(100 * 1024);\n        String str;\n        while ((str = in.readLine()) != null) {\n            sb.append(str);\n        }\n        in.close();\n        return sb.toString();\n    }\n', '    private boolean getWave(String url, String Word) {\n        try {\n            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");\n            FF.mkdir();\n            URL url2 = new URL(url);\n            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));\n            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");\n            if (!Fdel.exists()) {\n                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");\n                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));\n                char[] binput = new char[1024];\n                int len = stream.read(binput, 0, 1024);\n                while (len > 0) {\n                    bwriter.write(binput, 0, len);\n                    len = stream.read(binput, 0, 1024);\n                }\n                bwriter.close();\n                outstream.close();\n            }\n            stream.close();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n            return false;\n        }\n        return true;\n    }\n']",80,"    protected String  downloadurloBytes(URL log) throws IOException {
        BufferedReader or = new BufferedReader(new InputStreamReader(log.openStream()));
        StringBuffer sd = new StringBuffer(100 * 1024);
        String chain;
        while ((chain = or.readLine()) != null) {
            sd.append(chain);
        }
        or.close();
        return sd.toString();
    }
",0,0,0,-1,"downloadURLtoString,url,in,sb,str","downloadURLtoString:5.093216896057129e-05,url:-4.8438707987467446e-05,in:0.0002021491527557373,sb:-0.000119820237159729,str:-3.509223461151123e-05,",5,12,"url:log,in:or,sb:sd,downloadURLtoString: downloadurloBytes,str:chain,",Greedy,,
,,,,,,,,,,,,,,,
147,"['16048516', '6371589', '    public static SVNConfiguracion load(URL urlConfiguracion) {\n        SVNConfiguracion configuracion = null;\n        try {\n            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());\n            configuracion = (SVNConfiguracion) xenc.readObject();\n            configuracion.setFicheroConfiguracion(urlConfiguracion);\n            xenc.close();\n        } catch (Exception exception) {\n            exception.printStackTrace();\n        }\n        return configuracion;\n    }\n', '    public void insertUser(final List<NewUser> newUsers) {\n        try {\n            connection.setAutoCommit(false);\n            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();\n            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();\n            final List<String> userDirs = new ArrayList<String>();\n            Iterator<NewUser> iter = newUsers.iterator();\n            NewUser user;\n            Realm realm;\n            String username;\n            PasswordHasher ph;\n            while (iter.hasNext()) {\n                user = iter.next();\n                username = user.username.toLowerCase(locale);\n                ph = PasswordFactory.getInstance().getPasswordHasher();\n                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));\n                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());\n                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));\n                if (user.realms != null) {\n                    for (String realmName : user.realms) {\n                        realm = cm.getRealm(realmName);\n                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));\n                    }\n                    user.realms = null;\n                }\n            }\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);\n                    Iterator<NewUser> iter = newUsers.iterator();\n                    NewUser user;\n                    DomainDb domain = null;\n                    while (iter.hasNext()) {\n                        user = iter.next();\n                        psImpl.setString(1, user.username);\n                        psImpl.setString(2, user.username.toLowerCase(locale));\n                        if (domain == null || (domain.getDomainId() != user.domainId)) {\n                            domain = (DomainDb) cmDB.getDomain(user.domainId);\n                        }\n                        userDirs.add(user.username + \'@\' + domain.getDomainName());\n                        psImpl.setInt(3, user.domainId);\n                        psImpl.setString(4, pass.get(user.username).password);\n                        psImpl.setString(5, pass.get(user.username).salt);\n                        psImpl.executeUpdate();\n                        rsImpl = psImpl.getGeneratedKeys();\n                        if (rsImpl.next()) {\n                            user.userId = rsImpl.getInt(1);\n                            rsImpl.close();\n                        } else {\n                            throw new SQLException(""Need to have a user id generated."");\n                        }\n                    }\n                }\n            });\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));\n                    Iterator<NewUser> iter = newUsers.iterator();\n                    NewUser user;\n                    List<RealmWithEncryptedPass> list;\n                    RealmWithEncryptedPass rwep;\n                    RealmDb realm;\n                    while (iter.hasNext()) {\n                        user = iter.next();\n                        list = realmPass.get(user.username);\n                        if (list != null) {\n                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();\n                            while (iter1.hasNext()) {\n                                rwep = iter1.next();\n                                realm = (RealmDb) rwep.realm;\n                                psImpl.setInt(1, realm.getRealmId());\n                                psImpl.setInt(2, user.userId);\n                                psImpl.setInt(3, user.domainId);\n                                psImpl.setString(4, rwep.password);\n                                psImpl.executeUpdate();\n                            }\n                        }\n                    }\n                }\n            });\n            connection.commit();\n            Iterator<String> iterator = userDirs.iterator();\n            while (iterator.hasNext()) {\n                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());\n            }\n            cm.createDirectories();\n        } catch (GeneralSecurityException e) {\n            log.error(e);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");\n        } catch (SQLException sqle) {\n            log.error(sqle);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(true);\n                } catch (SQLException ex) {\n                }\n            }\n        }\n    }\n']",72,"    public static SVNConfiguracion download(URL urlconfiguricion) {
        SVNConfiguracion figurance = null;
        try {
            XMLDecoder rxen = new XMLDecoder(urlconfiguricion.openStream());
            figurance = (SVNConfiguracion) rxen.readObject();
            figurance.setFicheroConfiguracion(urlconfiguricion);
            rxen.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return figurance;
    }
",0,0,0,-1,"load,urlConfiguracion,configuracion,xenc","load:1.0891394181685015e-06,urlConfiguracion:0.00010416724465110084,configuracion:-4.965608770197088e-05,xenc:-3.267418254505504e-06,",4,11,"urlConfiguracion:urlconfiguricion,xenc:rxen,configuracion:figurance,load:download,",Greedy,,
,,,,,,,,,,,,,,,
148,"['8064604', '7761195', '    public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {\n        _cman = mgr;\n        _sock = sock;\n        for (int i = 0; i < 256; i++) {\n            String key = Integer.toHexString(i);\n            if (key.length() < 2) key = ""0"" + key;\n            availcmd.push(key);\n            commands.put(key, null);\n        }\n        try {\n            _sout = new PrintWriter(_sock.getOutputStream(), true);\n            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));\n            String seed = """";\n            Random rand = new Random();\n            for (int i = 0; i < 16; i++) {\n                String hex = Integer.toHexString(rand.nextInt(256));\n                if (hex.length() < 2) hex = ""0"" + hex;\n                seed += hex.substring(hex.length() - 2);\n            }\n            String pass = _mpsw + seed + _spsw;\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(pass.getBytes());\n            String hash = hash2hex(md5.digest()).toLowerCase();\n            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;\n            sendLine(banner);\n            String txt = readLine(5);\n            if (txt == null) {\n                throw new IOException(""Slave did not send banner !!"");\n            }\n            String sname = """";\n            String spass = """";\n            String sseed = """";\n            try {\n                String[] items = txt.split("" "");\n                sname = items[1].trim();\n                spass = items[2].trim();\n                sseed = items[3].trim();\n            } catch (Exception e) {\n                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);\n            }\n            pass = _spsw + sseed + _mpsw;\n            md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(pass.getBytes());\n            hash = hash2hex(md5.digest()).toLowerCase();\n            if (!sname.equals(_name)) {\n                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);\n            }\n            if (!spass.toLowerCase().equals(hash.toLowerCase())) {\n                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);\n            }\n            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);\n            start();\n        } catch (IOException e) {\n            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {\n                logger.info(""Check slaves.xml on the master that you are allowed to connect."");\n            }\n            logger.info(""IOException: "" + e.toString());\n            try {\n                sock.close();\n            } catch (Exception e1) {\n            }\n        } catch (Exception e) {\n            logger.warn(""Exception: "" + e.toString());\n            try {\n                sock.close();\n            } catch (Exception e2) {\n            }\n        }\n        System.gc();\n    }\n', '    public synchronized String encrypt(String plaintext) throws Exception {\n        StringBuffer sb = new StringBuffer();\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        try {\n            md.update(plaintext.getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            throw new Exception(e.getMessage());\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n']",590,"    public void open(ConnectionManager Mmg, Hashtable ctr, Socket jsock) throws RemoteException {
        _mman = Mmg;
        _Src = jsock;
        for (int и = 0; и < 256; и++) {
            String chain = Integer.toHexString(и);
            if (chain.length() < 2) chain = ""0"" + chain;
            availcmd.push(chain);
            commands.put(chain, null);
        }
        try {
            _sout = new PrintWriter(_Src.getOutputStream(), true);
             _cinP = new BufferedReader(new InputStreamReader(_Src.getInputStream()));
            String then = """";
            Random round = new Random();
            for (int и = 0; и < 16; и++) {
                String  Hex = Integer.toHexString(round.nextInt(256));
                if ( Hex.length() < 2)  Hex = ""0"" +  Hex;
                then +=  Hex.substring( Hex.length() - 2);
            }
            String path = _mpsw + then + _spsw;
            MessageDigest MD_ = MessageDigest.getInstance(""MD5"");
            MD_.reset();
            MD_.update(path.getBytes());
            String hz = hash2hex(MD_.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hz + "" "" + then;
            sendLine(banner);
            String writers = readLine(5);
            if (writers == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String lsnam = """";
            String psass = """";
            String sseed = """";
            try {
                String[] items = writers.split("" "");
                lsnam = items[1].trim();
                psass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _Src);
            }
            path = _spsw + sseed + _mpsw;
            MD_ = MessageDigest.getInstance(""MD5"");
            MD_.reset();
            MD_.update(path.getBytes());
            hz = hash2hex(MD_.digest()).toLowerCase();
            if (!lsnam.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _Src);
            }
            if (!psass.toLowerCase().equals(hz.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _Src);
            }
            _mman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                jsock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                jsock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",1,1,1,-1,"init,mgr,cfg,sock,_cman,_sock,i,key,_sout,_sinp,seed,rand,hex,pass,md5,hash,banner,txt,sname,spass,sseed,items","init:6.052163931039663e-07,mgr:2.7494552807930186e-06,cfg:9.903540978064903e-07,sock:6.156089978340345e-06,_cman:6.250846080290966e-07,_sock:1.137073223407452e-06,i:1.2736289929120969e-05,key:2.5671262007493242e-05,_sout:-1.6429485418857672e-07,_sinp:1.2532258645082132e-07,seed:-5.532533694536257e-07,rand:-9.062962654309395e-07,hex:-2.650114206167368e-06,pass:2.934382512019231e-07,md5:1.74412360558143e-05,hash:-6.571794167543069e-07,banner:5.547816936786359e-07,txt:1.435096447284405e-06,sname:7.817378410926233e-07,spass:9.926465841440054e-07,sseed:3.1177814190204327e-07,items:-2.3230528220152243e-07,",18,67,"i:и,seed:then,hash:hz,banner:banner,sock:jsock,_sock:_Src,_sinp: _cinP,_sout:_sout,pass:path,rand:round,hex: Hex,md5:MD_,key:chain,mgr:Mmg,_cman:_mman,init:open,cfg:ctr,txt:writers,items:items,sname:lsnam,sseed:sseed,spass:psass,",Greedy,,
,,,,,,,,,,,,,,,
149,"['21092340', '21125261', '    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n        ZipEntry entry = new ZipEntry(filename);\n        podArchiveOutputStream.putNextEntry(entry);\n        IOUtils.copy(source, podArchiveOutputStream);\n        podArchiveOutputStream.closeEntry();\n        return PodArchiveResolver.withinPodArchive(pod, filename);\n    }\n', '    @Test\n    public void test() throws Exception {\n        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        IOUtils.copy(is, byteArrayOutputStream);\n        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\n        TrafficSimulationEngine se = new TrafficSimulationEngine();\n        se.init(def);\n        int linkId = 2;\n        int segmentId = 0;\n        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\n        Set<Integer> segments = new HashSet<Integer>();\n        segments.add(segmentId);\n        linkSegments.put(linkId, segments);\n        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\n        se.setFrameProperties(frameProperties);\n        for (float time = 0; time < 60 * 10; time += 0.1f) {\n            se.step(0.1f);\n            for (RoadObject vehicle : se.getDynamicObjects()) {\n                System.out.println(time + "": X="" + vehicle.getPosition() + ""\\tV="" + vehicle.getSpeed());\n            }\n        }\n    }\n']",63,"    public static URL addToArchiver(Pod policy, ZipOutputStream podArchiveOutContext, String output, InputStream SOURCE) throws IOException {
        ZipEntry system = new ZipEntry(output);
        podArchiveOutContext.putNextEntry(system);
        IOUtils.copy(SOURCE, podArchiveOutContext);
        podArchiveOutContext.closeEntry();
        return PodArchiveResolver.withinPodArchive(policy, output);
    }
",1,1,1,-1,"addToArchive,pod,podArchiveOutputStream,filename,source,entry","addToArchive:4.512923104422433e-07,pod:3.4059797014508924e-07,podArchiveOutputStream:7.152557373046875e-07,filename:2.8865677969796314e-06,source:-1.0217939104352678e-07,entry:9.5367431640625e-07,",6,14,"addToArchive:addToArchiver,pod:policy,podArchiveOutputStream:podArchiveOutContext,filename:output,source:SOURCE,entry:system,",Greedy,,
,,,,,,,,,,,,,,,
150,"['16590954', '11005804', '    public void createJAR(String fileString, String ext) {\n        try {\n            File file = new File(fileString);\n            int i = fileString.lastIndexOf(java.io.File.separator);\n            String dir = fileString.substring(0, i + 1);\n            if (ext.matches(""jar"")) {\n                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());\n                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n                FileChannel out = fstrm.getChannel();\n                in.transferTo(0, jarFile.length(), out);\n                in.close();\n                out.close();\n            } else {\n                file.mkdir();\n            }\n            File.umount(file);\n            File temp = new File(dir + ""document.jsd"");\n            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n            ostrm = new ObjectOutputStream(fstrm2);\n            ostrm.writeObject(doc);\n            ostrm.flush();\n            ostrm.close();\n            File.umount();\n            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");\n            File.cp_p(temp, docFile);\n            File.umount();\n            temp.delete();\n            File.umount(file);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public String kodetu(String testusoila) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA"");\n        } catch (NoSuchAlgorithmException e) {\n            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        try {\n            md.update(testusoila.getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n']",298,,0,0,,-3,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile",,,,,Greedy,,
,,,,,,,,,,,,,,,
151,"['19849797', '189963', '    public static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",116,,1,1,,-3,"copyFile,sourceFile,destFile,source,destination",,,,,Greedy,,
,,,,,,,,,,,,,,,
152,"['6987642', '9398454', '    public static String encodePassword(String password) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(""SHA"");\n            md.update(password.getBytes());\n            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));\n            return encodedPassword;\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }\n', '    private static RemoteFile getRemoteFile(String url) {\n        long size = 0;\n        String realUrl = """";\n        try {\n            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();\n            size = conn.getContentLength();\n            realUrl = conn.getURL().toString();\n            conn.disconnect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        RemoteFile rf = new RemoteFile(size, realUrl);\n        return rf;\n    }\n']",73,"    public static String enodepassword(String path) {
        MessageDigest metadata;
        try {
            metadata = MessageDigest.getInstance(""SHA"");
            metadata.update(path.getBytes());
            String encryptedUser = new String(metadata.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encryptedUser;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",0,0,0,-1,"encodePassword,password,md,encodedPassword","encodePassword:-6.622738308376736e-08,password:2.3709403143988716e-06,md:-1.1126200358072915e-06,encodedPassword:4.503462049696181e-06,",4,9,"md:metadata,encodedPassword:encryptedUser,encodePassword:enodepassword,password:path,",Greedy,,
,,,,,,,,,,,,,,,
153,"['10451698', '3806532', '    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals("".svn"")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n', '    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n        File dest = new File(this.getRealFile(), name);\n        LOGGER.debug(""PUT?? - real file: "" + this.getRealFile() + "",name: "" + name);\n        if (isOwner) {\n            if (!"".request"".equals(name) && !"".tokens"".equals(name)) {\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n            } else {\n                if (ServerConfiguration.isDynamicSEL()) {\n                } else {\n                }\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n            }\n            return factory.resolveFile(this.host, dest);\n        } else {\n            LOGGER.error(""User isn\'t owner of this folder"");\n            return null;\n        }\n    }\n']",227,"    private void archive(File note, File destinatorLocation) throws IOException {
        if (note.isDirectory()) {
            File NewFile = new File(destinatorLocation, note.getName());
            NewFile.mkdir();
            File[] uploads = note.listFiles();
            for (int iq = 0; iq < uploads.length; iq++) {
                if (uploads[iq].getName().equals("".svn"")) {
                    continue;
                }
                archive(uploads[iq], NewFile);
            }
        } else {
            File NewFile = new File(destinatorLocation, note.getName());
            if (NewFile.exists() && note.lastModified() == NewFile.lastModified()) {
                return;
            }
            FileOutputStream response = new FileOutputStream(NewFile);
            FileInputStream reader = new FileInputStream(note);
            byte[] batch = new byte[2048];
            int query = 0;
            while ((query = reader.query(batch)) > 0) {
                response.write(batch, 0, query);
            }
            response.flush();
            response.close();
            reader.close();
        }
    }
",1,1,1,-1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:-6.811959402901785e-08,source:1.7484029134114583e-06,destinationDirectory:-2.2990362984793525e-07,newDir:-9.366444178989955e-08,children:3.746577671595982e-07,i:-1.1353265671502976e-07,newFile:5.676632835751488e-08,output:-1.475924537295387e-07,input:8.514949253627232e-09,buff:-1.1920928955078125e-07,read:-3.746577671595982e-07,",11,42,"source:note,destinationDirectory:destinatorLocation,newDir:NewFile,i:iq,children:uploads,newFile:NewFile,copy:archive,input:reader,buff:batch,read:query,output:response,",Greedy,,
,,,,,,,,,,,,,,,
154,"['5543349', '20568568', '    public UserFunction loadMFileViaWeb(URL codeBase, String directoryAndFile, String mFileName) {\n        String code = """";\n        UserFunction function = null;\n        ErrorLogger.debugLine(""MFileLoader: loading >"" + mFileName + "".m<"");\n        try {\n            URL url = new URL(codeBase, directoryAndFile);\n            InputStream in = url.openStream();\n            BufferedReader inReader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            while ((line = inReader.readLine()) != null) {\n                code += line + ""\\n"";\n            }\n            inReader.close();\n        } catch (Exception e) {\n            Errors.throwMathLibException(""MFileLoader: m-file exception via web"");\n        }\n        ErrorLogger.debugLine(""MFileLoader: code: begin \\n"" + code + ""\\ncode end"");\n        FunctionParser funcParser = new FunctionParser();\n        function = funcParser.parseFunction(code);\n        function.setName(mFileName);\n        ErrorLogger.debugLine(""MFileLoader: finished webloading >"" + mFileName + "".m<"");\n        return function;\n    }\n', '    private String createHTML(PAGE_TYPE requestPage) {\n        String result = ""<html><head>"";\n        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");\n        InputStreamReader ins;\n        try {\n            ins = new InputStreamReader(url.openStream());\n            BufferedReader bufferedReader = new BufferedReader(ins);\n            String cssLine;\n            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\\n"";\n        } catch (IOException e1) {\n            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n        }\n        switch(requestPage) {\n            case PAGE_LOGO:\n                result += ""</head><body class=\\""header\\"">"" + ""<table width=\\""100%\\""><tr><td>"" + ""<img src=\\""res:org/compiere/images/logo_ad.png\\"">"" + ""</td><td></td><td width=\\""290\\"">"" + ""</td></tr></table>"" + ""</body></html>"";\n                break;\n            case PAGE_HOME:\n                result += ""</head><body><div class=\\""content\\"">\\n"";\n                queryZoom = null;\n                queryZoom = new ArrayList<MQuery>();\n                String appendToHome = null;\n                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive=\'Y\'"" + "" ORDER BY LINE"";\n                PreparedStatement pstmt = null;\n                ResultSet rs = null;\n                try {\n                    pstmt = DB.prepareStatement(sql, null);\n                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n                    rs = pstmt.executeQuery();\n                    while (rs.next()) {\n                        appendToHome = rs.getString(""HTML"");\n                        if (appendToHome != null) {\n                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\\n"";\n                            result += stripHtml(appendToHome, false) + ""<br>\\n"";\n                        }\n                        if (rs.getInt(""AD_MENU_ID"") > 0) {\n                            result += ""<a class=\\""hrefNode\\"" href=\\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\\n"");\n                        }\n                        result += ""<br>\\n"";\n                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));\n                    }\n                } catch (SQLException e) {\n                    log.log(Level.SEVERE, sql, e);\n                } finally {\n                    DB.close(rs, pstmt);\n                    rs = null;\n                    pstmt = null;\n                }\n                result += ""<br><br><br>\\n"" + ""</div>\\n</body>\\n</html>\\n"";\n                break;\n            default:\n                log.warning(""Unknown option - "" + requestPage);\n        }\n        return result;\n    }\n']",166,"    public UserFunction loadMFileUsingweb(URL codeBase, String directoryAndFile, String  mFileFile) {
        String code = """";
        UserFunction lambda = null;
        ErrorLogger.debugLine(""MFileLoader: loading >"" +  mFileFile + "".m<"");
        try {
            URL url = new URL(codeBase, directoryAndFile);
            InputStream in = url.openStream();
            BufferedReader inLine = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = inLine.readLine()) != null) {
                code += line + ""
"";
            }
            inLine.close();
        } catch (Exception e) {
            Errors.throwMathLibException(""MFileLoader: m-file exception via web"");
        }
        ErrorLogger.debugLine(""MFileLoader: code: begin 
"" + code + ""
code data"");
        FunctionParser funcParser = new FunctionParser();
        lambda = funcParser.parseFunction(code);
        lambda.setName( mFileFile);
        ErrorLogger.debugLine(""MFileLoader: finished webloading >"" +  mFileFile + "".m<"");
        return lambda;
    }
",1,1,1,-1,"loadMFileViaWeb,codeBase,directoryAndFile,mFileName,code,function,url,in,inReader,line,end","loadMFileViaWeb:-3.847582586880388e-06,codeBase:8.509076874831627e-07,directoryAndFile:5.742599224222117e-06,mFileName:-2.4910630850956357e-05,code:-5.737460892775963e-05,function:5.097224794585129e-07,url:1.5908274157293912e-06,in:7.580066549366918e-06,inReader:-6.140717144670158e-05,line:-6.558155191355739e-05,end:-1.6442660627693965e-08,",5,13,"codeBase:codeBase,directoryAndFile:directoryAndFile,code:code,url:url,in:in,inReader:inLine,function:lambda,mFileName: mFileFile,loadMFileViaWeb:loadMFileUsingweb,line:line,end:data,",Greedy,,
,,,,,,,,,,,,,,,
155,"['14783950', '11562165', '    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n        if (fileList == null || fileList.size() == 0) return;\n        FileOutputStream fos = new FileOutputStream(zipFileName);\n        ZipOutputStream zos = new ZipOutputStream(fos);\n        Iterator iter = fileList.iterator();\n        while (iter.hasNext()) {\n            String fileName = (String) iter.next();\n            int ind = Math.max(fileName.lastIndexOf(\'/\'), fileName.lastIndexOf(\'\\\\\'));\n            String shortName = ""unknown"";\n            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n            zos.putNextEntry(new ZipEntry(shortName));\n            FileInputStream fis = new FileInputStream(fileName);\n            byte[] buf = new byte[10000];\n            int bytesRead;\n            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n            fis.close();\n            zos.closeEntry();\n        }\n        zos.close();\n    }\n', '    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, ""UTF-8"");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n']",209,"    public static void composeWithoutExt(Vector ileList, String zipFilenameName) throws IOException {
        if (ileList == null || ileList.size() == 0) return;
        FileOutputStream loss = new FileOutputStream(zipFilenameName);
        ZipOutputStream zzle = new ZipOutputStream(loss);
        Iterator inner = ileList.iterator();
        while (inner.hasNext()) {
            String FileNames = (String) inner.next();
            int bind = Math.max(FileNames.lastIndexOf('/'), FileNames.lastIndexOf('\\'));
            String ShortFilename = ""unknown"";
            if (bind < FileNames.length() - 1) ShortFilename = FileNames.substring(bind + 1);
            zzle.putNextEntry(new ZipEntry(ShortFilename));
            FileInputStream FIs = new FileInputStream(FileNames);
            byte[] Buffer = new byte[10000];
            int usersReady;
            while ((usersReady = FIs.read(Buffer)) > 0) zzle.write(Buffer, 0, usersReady);
            FIs.close();
            zzle.closeEntry();
        }
        zzle.close();
    }
",1,1,1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead","compressWithZip:-6.587881790964226e-08,fileList:-1.7567684775904604e-07,zipFileName:-2.0077354029605262e-07,fos:2.760636179070724e-07,zos:-1.3803180895353617e-06,iter:-3.670391283537212e-07,fileName:-1.957542017886513e-06,ind:-3.670391283537212e-07,shortName:-8.47013373123972e-08,fis:-4.7056298506887334e-07,buf:-6.305543999922902e-07,bytesRead:-4.7056298506887334e-07,",12,38,"iter:inner,fileName:FileNames,ind:bind,zipFileName:zipFilenameName,fos:loss,shortName:ShortFilename,zos:zzle,compressWithZip:composeWithoutExt,fileList:ileList,fis:FIs,buf:Buffer,bytesRead:usersReady,",Greedy,,
,,,,,,,,,,,,,,,
156,"['5759961', '1371265', '    @Override\n    public User saveUser(User user) {\n        try {\n            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");\n            digest.update(user.getPassword().getBytes(""UTF-8""));\n            byte[] hash = digest.digest();\n            BigInteger bigInt = new BigInteger(1, hash);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = ""0"" + hashtext;\n            }\n            user.setPassword(hashtext);\n            user.setDataRegjistrimit(new Date());\n            return em.merge(user);\n        } catch (Exception e) {\n            throw new NestedException(e.getMessage(), e);\n        }\n    }\n', '    public void update(String channelPath, String dataField, String fatherDocId) {\n        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = \'"" + fatherDocId + ""\' and type="" + "" \'"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""\' "";\n        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = \'"" + fatherDocId + ""\' "" + "" and type = \'"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""\' "";\n        Connection conn = null;\n        ResultSet rs = null;\n        PreparedStatement ps = null;\n        try {\n            dbo = (ERDBOperation) createDBOperation();\n            String url = """";\n            boolean flag = true;\n            StringTokenizer st = null;\n            conn = dbo.getConnection();\n            conn.setAutoCommit(false);\n            ps = conn.prepareStatement(sqlInitial);\n            rs = ps.executeQuery();\n            if (rs.next()) url = rs.getString(1);\n            if (!url.equals("""")) {\n                st = new StringTokenizer(url, "","");\n                String sortDocId = """";\n                while (st.hasMoreTokens()) {\n                    if (flag) {\n                        sortDocId = ""\'"" + st.nextToken() + ""\'"";\n                        flag = false;\n                    } else {\n                        sortDocId = sortDocId + "","" + ""\'"" + st.nextToken() + ""\'"";\n                    }\n                }\n                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;\n                ps = conn.prepareStatement(sqlsort);\n                rs = ps.executeQuery();\n                String sortURL = """";\n                boolean sortflag = true;\n                while (rs.next()) {\n                    if (sortflag) {\n                        sortURL = rs.getString(1);\n                        sortflag = false;\n                    } else {\n                        sortURL = sortURL + "","" + rs.getString(1);\n                    }\n                }\n                ps = conn.prepareStatement(sqlsortURL);\n                ps.setString(1, sortURL);\n                ps.executeUpdate();\n            }\n            conn.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n        } finally {\n            close(rs, null, ps, conn, dbo);\n        }\n    }\n']",140,,0,0,,-3,"saveUser,user,digest,hash,bigInt,hashtext",,,,,Greedy,,
,,,,,,,,,,,,,,,
157,"['8000624', '659316', '    private void CopyTo(File dest) throws IOException {\n        FileReader in = null;\n        FileWriter out = null;\n        int c;\n        try {\n            in = new FileReader(image);\n            out = new FileWriter(dest);\n            while ((c = in.read()) != -1) out.write(c);\n        } finally {\n            if (in != null) try {\n                in.close();\n            } catch (Exception e) {\n            }\n            if (out != null) try {\n                out.close();\n            } catch (Exception e) {\n            }\n        }\n    }\n', '    public static void main(String[] argv) {\n        if (1 < argv.length) {\n            File[] sources = Source(argv[0]);\n            if (null != sources) {\n                for (File src : sources) {\n                    File[] targets = Target(src, argv);\n                    if (null != targets) {\n                        final long srclen = src.length();\n                        try {\n                            FileChannel source = new FileInputStream(src).getChannel();\n                            try {\n                                for (File tgt : targets) {\n                                    FileChannel target = new FileOutputStream(tgt).getChannel();\n                                    try {\n                                        source.transferTo(0L, srclen, target);\n                                    } finally {\n                                        target.close();\n                                    }\n                                    System.out.printf(""Updated %s\\n"", tgt.getPath());\n                                    File[] deletes = Delete(src, tgt);\n                                    if (null != deletes) {\n                                        for (File del : deletes) {\n                                            if (SVN) {\n                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\\n"", del.getPath()); else System.out.printf(""Failed to delete %s\\n"", del.getPath());\n                                            } else if (del.delete()) System.out.printf(""Deleted %s\\n"", del.getPath()); else System.out.printf(""Failed to delete %s\\n"", del.getPath());\n                                        }\n                                    }\n                                    if (SVN) SvnAdd(tgt);\n                                }\n                            } finally {\n                                source.close();\n                            }\n                        } catch (Exception exc) {\n                            exc.printStackTrace();\n                            System.exit(1);\n                        }\n                    }\n                }\n                System.exit(0);\n            } else {\n                System.err.printf(""Source file(s) not found in \'%s\'\\n"", argv[0]);\n                System.exit(1);\n            }\n        } else {\n            usage();\n            System.exit(1);\n        }\n    }\n']",113,,1,1,,-3,"CopyTo,dest,in,out,c",,,,,Greedy,,
,,,,,,,,,,,,,,,
158,"['6906419', '9550506', '    public static String encryptPassword(String password) {\n        try {\n            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");\n            digest.update(password.getBytes(""UTF-8""));\n            byte[] hash = digest.digest();\n            StringBuffer buf = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                int halfbyte = (hash[i] >>> 4) & 0x0F;\n                int two_halfs = 0;\n                do {\n                    if ((0 <= halfbyte) && (halfbyte <= 9)) {\n                        buf.append((char) (\'0\' + halfbyte));\n                    } else {\n                        buf.append((char) (\'a\' + (halfbyte - 10)));\n                    }\n                    halfbyte = hash[i] & 0x0F;\n                } while (two_halfs++ < 1);\n            }\n            return buf.toString();\n        } catch (Exception e) {\n        }\n        return null;\n    }\n', '    private String cookieString(String url, String ip) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-1"");\n            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());\n            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());\n            return hash.toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);\n            return null;\n        }\n    }\n']",184,"    public static String decryptedString(String description) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(description.getBytes(""UTF-8""));
            byte[] has = digest.digest();
            StringBuffer printf = new StringBuffer();
            for (int major = 0; major < has.length; major++) {
                int quarterbyte = (has[major] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= quarterbyte) && (quarterbyte <= 9)) {
                        printf.append((char) ('0' + quarterbyte));
                    } else {
                        printf.append((char) ('a' + (quarterbyte - 10)));
                    }
                    quarterbyte = has[major] & 0x0F;
                } while (two_halfs++ < 1);
            }
            return printf.toString();
        } catch (Exception e) {
        }
        return null;
    }
",1,1,1,-1,"encryptPassword,password,digest,hash,buf,i,halfbyte,two_halfs","encryptPassword:1.6391277313232422e-07,password:1.1835779462541853e-06,digest:-6.33512224469866e-06,hash:2.937657492501395e-06,buf:-1.362391880580357e-06,i:-4.002026149204799e-06,halfbyte:-4.623617444719587e-06,two_halfs:-3.746577671595982e-07,",6,22,"digest:digest,i:major,hash:has,encryptPassword:decryptedString,password:description,halfbyte:quarterbyte,buf:printf,two_halfs:two_halfs,",Greedy,,
,,,,,,,,,,,,,,,
159,"['14567939', '10715601', '    private static byte[] baseHash(String name, String password) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""MD5"");\n            digest.reset();\n            digest.update(name.toLowerCase().getBytes());\n            digest.update(password.getBytes());\n            return digest.digest();\n        } catch (NoSuchAlgorithmException ex) {\n            d(""MD5 algorithm not found!"");\n            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");\n        }\n    }\n', '    public static synchronized String toSHA1(String str) {\n        Nulls.failIfNull(str, ""Cannot create an SHA1 encryption form a NULL string"");\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(SHA1);\n            byte[] sha1hash = new byte[40];\n            md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n            sha1hash = md.digest();\n            return convertToHex(sha1hash);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } catch (UnsupportedEncodingException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n']",87,"    private static byte[] basicHash(String author, String message) {
        try {
            MessageDigest Digested = MessageDigest.getInstance(""MD5"");
            Digested.reset();
            Digested.update(author.toLowerCase().getBytes());
            Digested.update(message.getBytes());
            return Digested.Digested();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
",1,1,1,-1,"baseHash,name,password,digest","baseHash:1.4738603071732954e-06,name:-5.852092396129261e-07,password:3.2945112748579546e-06,digest:-9.52590595592152e-06,",4,11,"digest:Digested,name:author,password:message,baseHash:basicHash,",Greedy,,
,,,,,,,,,,,,,,,
160,"['4501356', '6517139', '    static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {\n        if (normaliseWhitespace) {\n            profileDiff = removeWhitespaces(profileDiff);\n        }\n        MessageDigest md = MessageDigest.getInstance(""MD5"");\n        md.update(profileDiff.getBytes());\n        return new BASE64Encoder().encode(md.digest());\n    }\n', '    private String getPrefsKey(String key) {\n        try {\n            if (MD5 == null) MD5 = MessageDigest.getInstance(""MD5"");\n            MD5.reset();\n            MD5.update(key.getBytes(""UTF-8""));\n            byte[] resultBytes = MD5.digest();\n            return toHexString(resultBytes);\n        } catch (Exception nsae) {\n            return key;\n        }\n    }\n']",64,"    static String calculateProfileDiffDiffests(String jsonData, boolean normaliseWhitesace) throws Exception {
        if (normaliseWhitesace) {
            jsonData = removeWhitespaces(jsonData);
        }
        MessageDigest ms = MessageDigest.getInstance(""MD5"");
        ms.update(jsonData.getBytes());
        return new BASE64Encoder().encode(ms.digest());
    }
",1,1,1,-1,"calculateProfileDiffDigest,profileDiff,normaliseWhitespace,md","calculateProfileDiffDigest:1.2695789337158204e-06,profileDiff:-7.534027099609375e-06,normaliseWhitespace:-1.6689300537109377e-07,md:-1.0514259338378907e-05,",4,10,"md:ms,profileDiff:jsonData,calculateProfileDiffDigest:calculateProfileDiffDiffests,normaliseWhitespace:normaliseWhitesace,",Greedy,,
,,,,,,,,,,,,,,,
161,"['15362793', '1235538', '    public static String ReadURL(URL url, boolean textonly) {\n        try {\n            URLConnection uconn = url.openConnection();\n            Object ucont = uconn.getContent();\n            if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly); else return """" + ucont;\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n', '    public static String encrypt(final String pass) {\n        try {\n            final MessageDigest md = MessageDigest.getInstance(""SHA"");\n            md.update(pass.getBytes(""UTF-8""));\n            return new String(Base64.encodeBase64(md.digest()));\n        } catch (final Exception e) {\n            throw new RuntimeException(""No se pudo encriptar el password."", e);\n        }\n    }\n']",82,"    public static String  ReadUrl(URL job, boolean readonly) {
        try {
            URLConnection Ucert = job.openConnection();
            Object ucrypt = Ucert.getContent();
            if (ucrypt instanceof InputStream) return ReadInputStream((java.io.InputStream) ucrypt, readonly); else return """" + ucrypt;
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",0,0,0,-1,"ReadURL,url,textonly,uconn,ucont","ReadURL:4.920092496004972e-06,url:3.0842694369229406e-05,textonly:2.5142322887073862e-06,uconn:1.2679533524946732e-05,ucont:7.325952703302557e-06,",5,11,"url:job,uconn:Ucert,ucont:ucrypt,textonly:readonly,ReadURL: ReadUrl,",Greedy,,
,,,,,,,,,,,,,,,
162,"['5676111', '19687456', '    public void get() {\n        try {\n            int cnt;\n            URL url = new URL(urlStr);\n            URLConnection conn = url.openConnection();\n            conn.setDoInput(true);\n            conn.setDoOutput(false);\n            InputStream is = conn.getInputStream();\n            String filename = new File(url.getFile()).getName();\n            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);\n            byte[] buffer = new byte[4096];\n            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);\n            fos.close();\n            is.close();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n', '    public void testReadPerMemberSixSmall() throws IOException {\n        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n        gzin.setEofEachMember(true);\n        for (int i = 0; i < 3; i++) {\n            int count2 = IOUtils.copy(gzin, new NullOutputStream());\n            assertEquals(""wrong 1-byte member count"", 1, count2);\n            gzin.nextMember();\n            int count3 = IOUtils.copy(gzin, new NullOutputStream());\n            assertEquals(""wrong 5-byte member count"", 5, count3);\n            gzin.nextMember();\n        }\n        int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong eof count"", 0, countEnd);\n    }\n']",156,"    public void get() {
        try {
            int Ccount;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream mis = conn.getInputStream();
            String lua = new File(url.getFile()).getName();
            FileOutputStream bows = new FileOutputStream(dstDir + File.separator + lua);
            byte[] buffer = new byte[4096];
            while ((Ccount = mis.read(buffer, 0, buffer.length)) != -1) bows.write(buffer, 0, Ccount);
            bows.close();
            mis.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",0,0,1,1,"get,cnt,url,conn,is,filename,fos,buffer","get:1.0884326437245244e-07,cnt:9.329422660495923e-08,url:2.931771071060844e-05,conn:3.545180610988451e-06,is:1.5549037767493206e-08,filename:1.0366025178328804e-08,fos:0.0,buffer:-2.487846042798913e-07,",4,11,"filename:lua,fos:bows,cnt:Ccount,is:mis,",Greedy,,
,,,,,,,,,,,,,,,
163,"['4599372', '411595', '    @Override\n    public String readFixString(final int len) {\n        if (len < 1) {\n            return StringUtils.EMPTY;\n        }\n        final StringWriter sw = new StringWriter();\n        try {\n            IOUtils.copy(createLimitedInputStream(len), sw, null);\n        } catch (IOException e) {\n            throw createRuntimeException(e);\n        }\n        return sw.toString();\n    }\n', '    private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(""diff"", "".htm"");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(""<html><head><title>LOC Differences</title>\\n"" + SCRIPT + ""</head>\\n"" + ""<body bgcolor=\'#ffffff\'>\\n"" + ""<div onMouseOver=\\""window.defaultStatus=\'Metrics\'\\"">\\n"");\n        if (addedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");\n            out.write(addedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");\n            out.write(modifiedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");\n            out.write(deletedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        out.write(""<table name=METRICS BORDER>\\n"");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(""<tr><td>Base:&nbsp;</td><td>"");\n            out.write(Long.toString(base));\n            out.write(""</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>"");\n            out.write(Long.toString(deleted));\n            out.write(""</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>"");\n            out.write(Long.toString(modified));\n            out.write(""</td></tr>\\n<tr><td>Added:&nbsp;</td><td>"");\n            out.write(Long.toString(added));\n            out.write(""</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>"");\n            out.write(Long.toString(added + modified));\n            out.write(""</td></tr>\\n"");\n        }\n        out.write(""<tr><td>Total:&nbsp;</td><td>"");\n        out.write(Long.toString(total));\n        out.write(""</td></tr>\\n</table></div>"");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(""</BODY></HTML>"".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }\n']",72,,1,1,,-3,"readFixString,len,sw",,,,,Greedy,,
,,,,,,,,,,,,,,,
164,"['4686922', '19147281', '    public void extractResourceToFile(String resourcePath, File dest) {\n        InputStream in = getClass().getResourceAsStream(resourcePath);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n', '    public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {\n        int intResult = 0;\n        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n']",84,"    public void extractResource2file(String templatepath, File output) {
        InputStream bin = getClass().getResourceAsStream(templatepath);
        try {
            FileOutputStream OUT = FileUtils.openOutputStream(output);
            try {
                IOUtils.copy(bin, OUT);
            } finally {
                if (OUT != null) {
                    OUT.close();
                }
            }
        } finally {
            if (bin != null) {
                bin.close();
            }
        }
    }
",0,0,0,-1,"extractResourceToFile,resourcePath,dest,in,out","extractResourceToFile:1.4671912560096155e-06,resourcePath:-1.6661790701059195e-05,dest:-5.13608639056866e-05,in:-0.00016753490154559797,out:-8.858167208158053e-05,",5,13,"resourcePath:templatepath,in:bin,dest:output,out:OUT,extractResourceToFile:extractResource2file,",Greedy,,
,,,,,,,,,,,,,,,
165,"['21125261', '23452437', '    @Test\n    public void test() throws Exception {\n        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        IOUtils.copy(is, byteArrayOutputStream);\n        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\n        TrafficSimulationEngine se = new TrafficSimulationEngine();\n        se.init(def);\n        int linkId = 2;\n        int segmentId = 0;\n        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\n        Set<Integer> segments = new HashSet<Integer>();\n        segments.add(segmentId);\n        linkSegments.put(linkId, segments);\n        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\n        se.setFrameProperties(frameProperties);\n        for (float time = 0; time < 60 * 10; time += 0.1f) {\n            se.step(0.1f);\n            for (RoadObject vehicle : se.getDynamicObjects()) {\n                System.out.println(time + "": X="" + vehicle.getPosition() + ""\\tV="" + vehicle.getSpeed());\n            }\n        }\n    }\n', '        private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {\n            if (fSource.getName().equals(""Thums.db"")) return;\n            System.out.println(""copying "" + fSource + "" in "" + file);\n            OutputStream o = new BufferedOutputStream(new FileOutputStream(file));\n            InputStream i = new BufferedInputStream(new FileInputStream(fSource));\n            byte[] b = new byte[8192];\n            int n;\n            while ((n = i.read(b)) > 0) o.write(b, 0, n);\n            i.close();\n            o.close();\n        }\n']",225,,1,1,,-3,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle",,,,,Greedy,,
,,,,,,,,,,,,,,,
166,"['3309233', '19322946', '        @Override\n        protected String doInBackground(String... params) {\n            try {\n                final HttpParams param = new BasicHttpParams();\n                HttpConnectionParams.setConnectionTimeout(param, 30000);\n                HttpConnectionParams.setSoTimeout(param, 30000);\n                DefaultHttpClient client = new DefaultHttpClient(param);\n                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");\n                post.setEntity(new StringEntity(params[0]));\n                if (DEBUG) Log.d(""Location"", params[0]);\n                HttpResponse resp = client.execute(post);\n                if (resp.getStatusLine().getStatusCode() == 200) {\n                    HttpEntity entity = resp.getEntity();\n                    String result = EntityUtils.toString(entity);\n                    return result;\n                } else {\n                    if (isFirstLocation) {\n                        requestGearsLocation(1);\n                        isFirstLocation = false;\n                        return RESULT_FIRST_FAILE;\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n', '    @Test\n    public void test_lookupType_FullSearch_MatchingWordInMiddle() throws Exception {\n        URL url = new URL(baseUrl + ""/lookupType/cluster"");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(""GET"");\n        connection.setRequestProperty(""Accept"", ""application/json"");\n        assertThat(connection.getResponseCode(), equalTo(200));\n        assertThat(getResponse(connection), equalTo(""[{\\""itemTypeID\\"":29055,\\""itemCategoryID\\"":17,\\""name\\"":\\""Capital Gravimetric Sensor Cluster\\"",\\""icon\\"":\\""37_05\\""},{\\""itemTypeID\\"":29056,\\""itemCategoryID\\"":9,\\""name\\"":\\""Capital Gravimetric Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":29065,\\""itemCategoryID\\"":17,\\""name\\"":\\""Capital Ladar Sensor Cluster\\"",\\""icon\\"":\\""37_07\\""},{\\""itemTypeID\\"":29066,\\""itemCategoryID\\"":9,\\""name\\"":\\""Capital Ladar Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":29069,\\""itemCategoryID\\"":17,\\""name\\"":\\""Capital Magnetometric Sensor Cluster\\"",\\""icon\\"":\\""37_06\\""},{\\""itemTypeID\\"":29070,\\""itemCategoryID\\"":9,\\""name\\"":\\""Capital Magnetometric Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":29095,\\""itemCategoryID\\"":17,\\""name\\"":\\""Capital Radar Sensor Cluster\\"",\\""icon\\"":\\""37_08\\""},{\\""itemTypeID\\"":29096,\\""itemCategoryID\\"":9,\\""name\\"":\\""Capital Radar Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":21013,\\""itemCategoryID\\"":17,\\""name\\"":\\""Capital Sensor Cluster\\"",\\""icon\\"":\\""54_03\\""},{\\""itemTypeID\\"":21014,\\""itemCategoryID\\"":9,\\""name\\"":\\""Capital Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":32241,\\""itemCategoryID\\"":17,\\""name\\"":\\""Drive Cluster EDF-285\\"",\\""icon\\"":\\""24_11\\""},{\\""itemTypeID\\"":5279,\\""itemCategoryID\\"":7,\\""name\\"":\\""F-23 Reciprocal Sensor Cluster Link\\"",\\""icon\\"":\\""03_09\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":11534,\\""itemCategoryID\\"":17,\\""name\\"":\\""Gravimetric Sensor Cluster\\"",\\""icon\\"":\\""37_05\\""},{\\""itemTypeID\\"":17340,\\""itemCategoryID\\"":9,\\""name\\"":\\""Gravimetric Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":11536,\\""itemCategoryID\\"":17,\\""name\\"":\\""Ladar Sensor Cluster\\"",\\""icon\\"":\\""37_07\\""},{\\""itemTypeID\\"":17333,\\""itemCategoryID\\"":9,\\""name\\"":\\""Ladar Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":11535,\\""itemCategoryID\\"":17,\\""name\\"":\\""Magnetometric Sensor Cluster\\"",\\""icon\\"":\\""37_06\\""},{\\""itemTypeID\\"":17345,\\""itemCategoryID\\"":9,\\""name\\"":\\""Magnetometric Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":6218,\\""itemCategoryID\\"":7,\\""name\\"":\\""Protected Gravimetric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":1},{\\""itemTypeID\\"":6222,\\""itemCategoryID\\"":7,\\""name\\"":\\""Protected LADAR Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":1},{\\""itemTypeID\\"":6226,\\""itemCategoryID\\"":7,\\""name\\"":\\""Protected Magnetometric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":1},{\\""itemTypeID\\"":6230,\\""itemCategoryID\\"":7,\\""name\\"":\\""Protected Multi-Frequency Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":1},{\\""itemTypeID\\"":6234,\\""itemCategoryID\\"":7,\\""name\\"":\\""Protected RADAR Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":1},{\\""itemTypeID\\"":7895,\\""itemCategoryID\\"":7,\\""name\\"":\\""Prototype ECCM I Gravimetric Sensor Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":7893,\\""itemCategoryID\\"":7,\\""name\\"":\\""Prototype ECCM I Ladar Sensor Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":7914,\\""itemCategoryID\\"":7,\\""name\\"":\\""Prototype ECCM I Magnetometric Sensor Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":7896,\\""itemCategoryID\\"":7,\\""name\\"":\\""Prototype ECCM I Omni Sensor Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":7892,\\""itemCategoryID\\"":7,\\""name\\"":\\""Prototype ECCM I Radar Sensor Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":11537,\\""itemCategoryID\\"":17,\\""name\\"":\\""Radar Sensor Cluster\\"",\\""icon\\"":\\""37_08\\""},{\\""itemTypeID\\"":17336,\\""itemCategoryID\\"":9,\\""name\\"":\\""Radar Sensor Cluster Blueprint\\"",\\""icon\\"":\\""03_02\\""},{\\""itemTypeID\\"":6242,\\""itemCategoryID\\"":7,\\""name\\"":\\""Sealed Gravimetric Backup Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":0},{\\""itemTypeID\\"":6241,\\""itemCategoryID\\"":7,\\""name\\"":\\""Sealed LADAR Backup Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":0},{\\""itemTypeID\\"":6238,\\""itemCategoryID\\"":7,\\""name\\"":\\""Sealed Magnetometric Backup Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":0},{\\""itemTypeID\\"":6239,\\""itemCategoryID\\"":7,\\""name\\"":\\""Sealed Multi-Frequency Backup Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":0},{\\""itemTypeID\\"":6225,\\""itemCategoryID\\"":7,\\""name\\"":\\""Sealed RADAR Backup Cluster\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":0},{\\""itemTypeID\\"":20238,\\""itemCategoryID\\"":7,\\""name\\"":\\""Secure Gravimetric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":2},{\\""itemTypeID\\"":20244,\\""itemCategoryID\\"":7,\\""name\\"":\\""Secure Ladar Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":2},{\\""itemTypeID\\"":20250,\\""itemCategoryID\\"":7,\\""name\\"":\\""Secure Magnetometric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":2},{\\""itemTypeID\\"":20260,\\""itemCategoryID\\"":7,\\""name\\"":\\""Secure Radar Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":2},{\\""itemTypeID\\"":20240,\\""itemCategoryID\\"":7,\\""name\\"":\\""Shielded Gravimetric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":3},{\\""itemTypeID\\"":20246,\\""itemCategoryID\\"":7,\\""name\\"":\\""Shielded Ladar Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":3},{\\""itemTypeID\\"":20252,\\""itemCategoryID\\"":7,\\""name\\"":\\""Shielded Magnetometric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":3},{\\""itemTypeID\\"":20262,\\""itemCategoryID\\"":7,\\""name\\"":\\""Shielded Radar Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":3},{\\""itemTypeID\\"":21722,\\""itemCategoryID\\"":17,\\""name\\"":\\""Sleeper Nanite Cluster\\"",\\""icon\\"":\\""55_15\\""},{\\""itemTypeID\\"":20242,\\""itemCategoryID\\"":7,\\""name\\"":\\""Warded Gravimetric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":20248,\\""itemCategoryID\\"":7,\\""name\\"":\\""Warded Ladar Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":20254,\\""itemCategoryID\\"":7,\\""name\\"":\\""Warded Magnetometric Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4},{\\""itemTypeID\\"":20264,\\""itemCategoryID\\"":7,\\""name\\"":\\""Warded Radar Backup Cluster I\\"",\\""icon\\"":\\""04_10\\"",\\""metaLevel\\"":4}]""));\n        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));\n    }\n']",176,"        @Override
        protected String  doIfHttp(String... lines) {
            try {
                final HttpParams conn = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(conn, 30000);
                HttpConnectionParams.setSoTimeout(conn, 30000);
                DefaultHttpClient google = new DefaultHttpClient(conn);
                HttpPost  Post = new HttpPost(""http://www.google.com/loc/json"");
                 Post.setEntity(new StringEntity(lines[0]));
                if (DEBUG) Log.d(""Location"", lines[0]);
                HttpResponse conn = google.execute( Post);
                if (conn.getStatusLine().getStatusCode() == 200) {
                    HttpEntity line = conn.getEntity();
                    String csv = EntityUtils.toString(line);
                    return csv;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
",0,0,0,-1,"doInBackground,params,param,client,post,resp,entity,result","doInBackground:2.9802322387695312e-08,params:1.7881393432617188e-07,param:7.152557373046876e-08,client:-3.576278686523438e-08,post:-1.7881393432617187e-08,resp:-1.6093254089355467e-07,entity:1.1920928955078126e-08,result:8.344650268554688e-08,",8,20,"entity:line,result:csv,client:google,post: Post,resp:conn,param:conn,doInBackground: doIfHttp,params:lines,",Greedy,,
,,,,,,,,,,,,,,,
167,"['10445819', '7927042', '    private Reader getReader() throws IOException {\n        if (data != null) {\n            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");\n            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");\n            return new StringReader(data);\n        } else if (url != null) {\n            InputStream stream = url.openStream();\n            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);\n        }\n        return null;\n    }\n', '    private void loadDynamically(File result, String extraPath) {\n        URL url = null;\n        InputStream is = null;\n        FileOutputStream fos = null;\n        try {\n            url = new URL(homeServerUrl + extraPath);\n            is = url.openStream();\n            fos = new FileOutputStream(result);\n            byte[] buff = new byte[8192];\n            int nbRead;\n            while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);\n        } catch (IOException e) {\n            throw new StellariumException(""Cannot dynamically load "" + result + "" from "" + url);\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    e.printStackTrace(System.out);\n                }\n            }\n            if (fos != null) {\n                try {\n                    fos.close();\n                } catch (IOException e) {\n                    e.printStackTrace(System.out);\n                }\n            }\n        }\n    }\n']",95,,0,0,,-3,"getReader,stream",,,,,Greedy,,
,,,,,,,,,,,,,,,
168,"['17999474', '15409512', '    private static File getZipAsFile(DigitalObject digOb) {\n        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\n        File tmpFolder = new File(utils_tmp, folderName);\n        File zip = null;\n        try {\n            FileUtils.forceMkdir(tmpFolder);\n            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\n            FileOutputStream out = new FileOutputStream(zip);\n            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);\n            out.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return zip;\n    }\n', '    public static void main(String args[]) throws IOException {\n        String inFileName = args[0];\n        String outFileName = args[1];\n        long position = 0L;\n        try {\n            position = Long.parseLong(args[2]);\n        } catch (NumberFormatException nfex1) {\n            try {\n                position = Long.parseLong(args[2], 16);\n            } catch (NumberFormatException nfex2) {\n                System.err.println(""Wrong offset"");\n                System.exit(0);\n            }\n        }\n        if (position < 1L) {\n            System.err.println(""Wrong offset. Must be more than 0"");\n            System.exit(0);\n        }\n        System.out.println(""Copying  input: "" + inFileName);\n        System.out.println(""        output: "" + outFileName);\n        System.out.println(""          from: "" + position);\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n        bis.skip(position);\n        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;\n        bis.close();\n        bos.close();\n    }\n']",124,"    private static File getZipFromLocal(DigitalObject DigOcc) {
        String foldNames = randomizeFileName(getFolderNameFromDigObject(DigOcc));
        File tmpParent = new File(utils_tmp, foldNames);
        File entry = null;
        try {
            FileUtils.forceMkdir(tmpParent);
            entry = new File(tmpParent, getFileNameFromDigObject(DigOcc, null));
            FileOutputStream writer = new FileOutputStream(entry);
            IOUtils.copyLarge(DigOcc.getContent().getInputStream(), writer);
            writer.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return entry;
    }
",1,1,1,-1,"getZipAsFile,digOb,folderName,tmpFolder,zip,out","getZipAsFile:3.15554001752068e-07,digOb:8.975758272058823e-07,folderName:4.2073866900275734e-07,tmpFolder:4.207386690027574e-07,zip:1.430511474609375e-06,out:1.2201421401079964e-06,",6,17,"digOb:DigOcc,tmpFolder:tmpParent,zip:entry,folderName:foldNames,out:writer,getZipAsFile:getZipFromLocal,",Greedy,,
,,,,,,,,,,,,,,,
169,"['8150996', '19134229', '    private static boolean copyFile(File in, File out) {\n        boolean ok = true;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(in);\n            os = new FileOutputStream(out);\n            byte[] buffer = new byte[0xFFFF];\n            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n        } catch (IOException e) {\n            System.err.println(e);\n            ok = false;\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n        }\n        return ok;\n    }\n', '    private void copyFile(final String sourceFileName, final File path) throws IOException {\n        final File source = new File(sourceFileName);\n        final File destination = new File(path, source.getName());\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            srcChannel = new FileInputStream(source).getChannel();\n            dstChannel = new FileOutputStream(destination).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            try {\n                if (dstChannel != null) {\n                    dstChannel.close();\n                }\n            } catch (Exception exception) {\n            }\n            try {\n                if (srcChannel != null) {\n                    srcChannel.close();\n                }\n            } catch (Exception exception) {\n            }\n        }\n    }\n']",182,"    private static boolean CopyStream(File doc, File v) {
        boolean ol = true;
        InputStream iter = null;
        OutputStream ols = null;
        try {
            iter = new FileInputStream(doc);
            ols = new FileOutputStream(v);
            byte[] binary = new byte[0xFFFF];
            for (int body; (body = iter.read(binary)) != -1; ) ols.write(binary, 0, body);
        } catch (IOException e) {
            System.err.println(e);
            ol = false;
        } finally {
            if (iter != null) {
                try {
                    iter.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (ols != null) {
                try {
                    ols.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ol;
    }
",1,1,1,-1,"copyFile,in,out,is,os,buffer,len,ok","copyFile:2.632538477579752e-07,in:5.960464477539063e-08,out:1.3907750447591144e-07,is:1.1920928955078125e-06,os:1.3659397761027019e-06,buffer:5.960464477539062e-07,len:2.5331974029541016e-07,ok:1.7881393432617188e-07,",8,24,"in:doc,is:iter,os:ols,buffer:binary,len:body,out:v,copyFile:CopyStream,ok:ol,",Greedy,,
,,,,,,,,,,,,,,,
170,"['10281203', '5707205', '    public void makeRead(String user, long databaseID, long time) throws SQLException {\n        String query = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";\n        ensureConnection();\n        PreparedStatement statement = m_connection.prepareStatement(query);\n        try {\n            statement.setLong(1, databaseID);\n            statement.setString(2, user);\n            statement.setTimestamp(3, new Timestamp(time));\n            int count = statement.executeUpdate();\n            if (0 == count) throw new SQLException(""Nothing updated."");\n            m_connection.commit();\n        } catch (SQLException e) {\n            m_connection.rollback();\n            throw e;\n        } finally {\n            statement.close();\n        }\n    }\n', '            public void run() {\n                Log.d(LOG_TAG, ""Fetching "" + url);\n                WebDbAdapter dbHelper = new WebDbAdapter(mContext);\n                dbHelper.open();\n                boolean errorOccurred = true;\n                int notifyId = 0;\n                String host = AppUtils.getHostFromUrl(url);\n                try {\n                    if (host == null) {\n                        Log.d(LOG_TAG, ""Bad url "" + url);\n                        errorOccurred = true;\n                    } else {\n                        notifyId = showNotification(""Fetching "" + host, ""Fetching "" + host, android.R.drawable.stat_sys_download, 0);\n                        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);\n                        String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));\n                        Log.d(LOG_TAG, ""Using user agent="" + userAgent);\n                        AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);\n                        URI uri = new URI(url);\n                        URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);\n                        norm = norm.normalize();\n                        HttpUriRequest get = new HttpGet(norm);\n                        HttpResponse response = ahc.execute(get);\n                        if (response.getStatusLine().getStatusCode() == 200) {\n                            HttpEntity entity = response.getEntity();\n                            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                            entity.writeTo(baos);\n                            String data = baos.toString();\n                            for (int i = 0; i < undesirables.length; i++) {\n                                Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);\n                                data = data.replaceAll(p.pattern(), """");\n                            }\n                            long sysMillis = System.currentTimeMillis();\n                            String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));\n                            FileOutputStream strm = new FileOutputStream(newFileName);\n                            Log.d(LOG_TAG, ""Writing to "" + newFileName + "" for url "" + url);\n                            String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);\n                            jsData = jsData.replaceAll(""@css_file"", RETAIN_COLORS_CSS);\n                            strm.write(jsData.getBytes());\n                            strm.write(data.getBytes());\n                            strm.write(jsData.getBytes());\n                            strm.flush();\n                            strm.close();\n                            String entryName = getTitle(newFileName, url);\n                            long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);\n                            postToast(""Downloaded \\"""" + entryName + ""\\"""");\n                            errorOccurred = false;\n                            if (deleteRowId != 0) {\n                                Log.d(LOG_TAG, ""Deleting rowId="" + deleteRowId);\n                                dbHelper.deleteEntry(deleteRowId);\n                                if (url == null) postToast(""Item Deleted"");\n                                mContext.startActivity(new Intent(mContext, RetainActivity.class));\n                            } else {\n                                showNotification(""Download Complete"", entryName, android.R.drawable.stat_sys_download_done, newRowId);\n                            }\n                        } else {\n                            Log.e(LOG_TAG, ""Response code="" + String.valueOf(response.getStatusLine().getStatusCode()));\n                        }\n                    }\n                } catch (IOException ioe) {\n                    Log.e(LOG_TAG, ""RETAIN IOException: "" + ioe.getMessage());\n                } catch (URISyntaxException u) {\n                    Log.e(LOG_TAG, ""RETAIN URISyntaxException: "" + u.getMessage());\n                } catch (OutOfMemoryError oome) {\n                    Log.e(LOG_TAG, ""RETAIN OutOfMemoryError: "" + oome.getMessage());\n                } catch (Exception e) {\n                    Log.e(LOG_TAG, ""RETAIN Exception: "" + e.getMessage());\n                }\n                hideNotification(notifyId);\n                if (errorOccurred && host != null) {\n                    showNotification(""Error Downloading"", host, android.R.drawable.stat_notify_error, 0);\n                    postToast(""Error fetching "" + host);\n                }\n                dbHelper.close();\n            }\n']",124,"    public void makeRead(String user, long databaseID, long time) throws SQLException {
        String query = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            int count = statement.executeUpdate();
            if (0 == count) throw new SQLException(""Nothing updated."");
            m_connection.commit();
        } catch (SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
",0,0,0,-1,"makeRead,user,databaseID,time,query,statement,count","makeRead:-1.262216007008272e-07,user:-8.975758272058823e-07,databaseID:5.6098489200367646e-08,time:-2.524432014016544e-07,query:-3.22566312902114e-07,statement:-1.2201421401079964e-05,count:-3.646401798023897e-07,",0,0,"makeRead:makeRead,user:user,databaseID:databaseID,time:time,query:query,statement:statement,count:count,",Greedy,,
,,,,,,,,,,,,,,,
171,"['18793482', '16590954', '    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();\n            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");\n            if (!englishFile.exists()) throw new Exception(""English file not found"");\n            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";\n            File file = new File(propertiesFilePath);\n            if (!file.exists()) {\n                FileReader in = new FileReader(englishFile);\n                FileWriter out = new FileWriter(file);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String line = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((line = breader.readLine()) != null) {\n                if (line.startsWith(""#"")) strBuilder.append(line).append(""\\n""); else {\n                    String[] pieces = line.split(""="");\n                    if (pieces.length == 2) {\n                        if (pieces[0].trim().equals(messageName)) {\n                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\\n"");\n                            found = true;\n                        } else strBuilder.append(line).append(""\\n"");\n                    } else strBuilder.append(line).append(""\\n"");\n                }\n            }\n            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\\n"");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public void createJAR(String fileString, String ext) {\n        try {\n            File file = new File(fileString);\n            int i = fileString.lastIndexOf(java.io.File.separator);\n            String dir = fileString.substring(0, i + 1);\n            if (ext.matches(""jar"")) {\n                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());\n                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n                FileChannel out = fstrm.getChannel();\n                in.transferTo(0, jarFile.length(), out);\n                in.close();\n                out.close();\n            } else {\n                file.mkdir();\n            }\n            File.umount(file);\n            File temp = new File(dir + ""document.jsd"");\n            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n            ostrm = new ObjectOutputStream(fstrm2);\n            ostrm.writeObject(doc);\n            ostrm.flush();\n            ostrm.close();\n            File.umount();\n            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");\n            File.cp_p(temp, docFile);\n            File.umount();\n            temp.delete();\n            File.umount(file);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",410,"    public void modifyApplicationMessage(String localaley, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i8nUrl = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i8nUrl + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i8nUrl + ""TranubeConstants_"" + localaley + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader sin = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int character;
                while ((character = sin.read()) != -1) out.write(character);
                sin.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + localaley + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""
""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""
"");
                            found = true;
                        } else strBuilder.append(line).append(""
"");
                    } else strBuilder.append(line).append(""
"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""
"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1,1,0,1,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found","modifyApplicationMessage:-2.0802021026611327e-06,locale:-9.47713851928711e-07,messageName:-9.387731552124023e-07,messageValue:-2.0086765289306642e-06,properties:9.288390477498373e-07,i18nPath:-2.244114875793457e-06,englishFile:-1.3586878776550294e-05,propertiesFilePath:-1.239776611328125e-05,file:3.408888975779215e-05,in:-1.2925267219543458e-05,out:7.450580596923828e-07,c:-2.3096799850463867e-05,is:1.691579818725586e-05,breader:-9.563565254211427e-06,line:-4.2947133382161457e-05,strBuilder:-4.312098026275635e-05,pieces:4.8836072285970054e-06,found:-3.039836883544922e-07,",4,12,"properties:properties,i18nPath:i8nUrl,in:sin,c:character,locale:localaley,",Greedy,,
,,,,,,,,,,,,,,,
172,"['19206412', '7372311', '    public static String md5String(String str) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(""MD5"");\n            md.update(str.getBytes());\n            byte[] hash = md.digest();\n            final char[] hexChars = { \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' };\n            StringBuffer res = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n                res.append(hexChars[0x0F & hash[i]]);\n            }\n            return res.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n', '    private void generateDeviceUUID() {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.update(deviceType.getBytes());\n            md5.update(internalId.getBytes());\n            md5.update(bindAddress.getHostName().getBytes());\n            StringBuffer hexString = new StringBuffer();\n            byte[] digest = md5.digest();\n            for (int i = 0; i < digest.length; i++) {\n                hexString.append(Integer.toHexString(0xFF & digest[i]));\n            }\n            uuid = hexString.toString().toUpperCase();\n        } catch (Exception ex) {\n            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");\n            runTimeEx.initCause(ex);\n            throw runTimeEx;\n        }\n    }\n']",171,"    public static String MD4Bytes(String wcs) {
        try {
            MessageDigest metadata;
            metadata = MessageDigest.getInstance(""MD5"");
            metadata.update(wcs.getBytes());
            byte[] rh = metadata.digest();
            final char[] hexThrs = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer req = new StringBuffer();
            for (int index = 0; index < rh.length; index++) {
                req.append(hexThrs[(0xF0 & rh[index]) >> 4]);
                req.append(hexThrs[0x0F & rh[index]]);
            }
            return req.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",1,1,1,-1,"md5String,str,md,hash,hexChars,res,i","md5String:6.219615106997283e-07,str:8.603800898012908e-07,md:2.695166546365489e-07,hash:1.7207601796025815e-06,hexChars:-1.3994133990743884e-07,res:-2.9750492261803667e-06,i:-4.224155260168987e-06,",7,23,"hexChars:hexThrs,i:index,md:metadata,hash:rh,str:wcs,md5String:MD4Bytes,res:req,",Greedy,,
,,,,,,,,,,,,,,,
173,"['11341711', '14785308', '    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {\n        String[] files;\n        files = dir.list();\n        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);\n        if (!checkdir.isDirectory()) {\n            checkdir.mkdir();\n        }\n        ;\n        Date date = new Date();\n        long msec = date.getTime();\n        checkdir.setLastModified(msec);\n        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");\n        if (checkFile.exists()) {\n            checkFile.setLastModified(msec);\n        }\n        try {\n            for (int i = 0; i < files.length; i++) {\n                File f = new File(dir, files[i]);\n                File g = new File(files[i]);\n                if (f.isDirectory()) {\n                } else {\n                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;\n                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;\n                    FileInputStream infile = new FileInputStream(sourceFile);\n                    FileOutputStream outfile = new FileOutputStream(destinationFile);\n                    int c;\n                    while ((c = infile.read()) != -1) outfile.write(c);\n                    infile.close();\n                    outfile.close();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(""iso-8859-1""), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n']",284,,0,0,,-3,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c",,,,,Greedy,,
,,,,,,,,,,,,,,,
174,"['6009527', '12783713', '    private void doFinishLoadAttachment(long attachmentId) {\n        if (attachmentId != mLoadAttachmentId) {\n            return;\n        }\n        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n        if (mLoadAttachmentSave) {\n            try {\n                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n                InputStream in = getContentResolver().openInputStream(contentUri);\n                OutputStream out = new FileOutputStream(file);\n                IOUtils.copy(in, out);\n                out.flush();\n                out.close();\n                in.close();\n                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n                new MediaScannerNotifier(this, file, mHandler);\n            } catch (IOException ioe) {\n                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n            }\n        } else {\n            try {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                intent.setData(contentUri);\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                startActivity(intent);\n            } catch (ActivityNotFoundException e) {\n                mHandler.attachmentViewError();\n            }\n        }\n    }\n', '    @Override\n    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\n        if (query == null) {\n            throw new NotConnectedException();\n        }\n        ArrayList<String> recipients = query.getUserManager().getTecMail();\n        Mail mail = new Mail(recipients);\n        try {\n            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));\n            FileInputStream fis = new FileInputStream(""log/ossobook.log"");\n            ZipEntry entry = new ZipEntry(""ossobook.log"");\n            zos.putNextEntry(entry);\n            byte[] buffer = new byte[8192];\n            int read = 0;\n            while ((read = fis.read(buffer, 0, 1024)) != -1) {\n                zos.write(buffer, 0, read);\n            }\n            zos.closeEntry();\n            fis.close();\n            zos.close();\n            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n']",266,"    private void doFinishShowDetention(long attachedById) {
        if (attachedById != mLoadAttachmentId) {
            return;
        }
        Attachment attachention = Attachment.restoreAttachmentWithId(MessageView.this, attachedById);
        Uri attentionURI = AttachmentProvider.getAttachmentUri(mAccountId, attachention.mId);
        Uri messageUtric = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attentionURI);
        if (mLoadAttachmentSave) {
            try {
                File zip = createUniqueFile(Environment.getExternalStorageDirectory(), attachention.mFileName);
                InputStream ic = getContentResolver().openInputStream(messageUtric);
                OutputStream writer = new FileOutputStream(zip);
                IOUtils.copy(ic, writer);
                writer.flush();
                writer.close();
                ic.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), zip.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, zip, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent ic = new Intent(Intent.ACTION_VIEW);
                ic.setData(messageUtric);
                ic.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(ic);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
",1,1,1,-1,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent","doFinishLoadAttachment:1.3245476616753471e-08,attachmentId:-1.4570024278428818e-07,attachment:-2.51664055718316e-07,attachmentUri:-3.532127097800926e-08,contentUri:3.5762786865234375e-07,file:1.0596381293402778e-06,in:4.900826348198784e-07,out:9.713349518952545e-07,intent:3.8853398075810183e-07,",9,27,"attachment:attachention,file:zip,in:ic,attachmentUri:attentionURI,contentUri:messageUtric,attachmentId:attachedById,intent:ic,doFinishLoadAttachment:doFinishShowDetention,out:writer,",Greedy,,
,,,,,,,,,,,,,,,
175,"['12782570', '22977189', '    public void logging() throws Fault {\n        final InterceptorWrapper wrap = new InterceptorWrapper(message);\n        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\\n----------------------------"");\n        String encoding = (String) wrap.getEncoding();\n        if (encoding != null) {\n            buffer.getEncoding().append(encoding);\n        }\n        Object headers = wrap.getProtocolHeaders();\n        if (headers != null) {\n            buffer.getHeader().append(headers);\n        }\n        InputStream is = (InputStream) wrap.getContent(InputStream.class);\n        if (is != null) {\n            CachedOutputStream bos = new CachedOutputStream();\n            try {\n                IOUtils.copy(is, bos);\n                bos.flush();\n                is.close();\n                this.message.setContent(InputStream.class, bos.getInputStream());\n                if (bos.getTempFile() != null) {\n                    logger.error(""\\nMessage (saved to tmp file):\\n"");\n                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\\n"");\n                }\n                if (bos.size() > limit) {\n                    logger.error(""(message truncated to "" + limit + "" bytes)\\n"");\n                }\n                bos.writeCacheTo(buffer.getPayload(), limit);\n                bos.close();\n            } catch (IOException e) {\n                throw new Fault(e);\n            }\n        }\n        logger.debug(""Message received :\\n"" + buffer.getPayload().toString());\n    }\n', '    public static void main(String args[]) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(args[0]));\n        Writer out = new FileWriter(args[1]);\n        out = new WrapFilter(new BufferedWriter(out), 40);\n        out = new TitleCaseFilter(out);\n        String line;\n        while ((line = in.readLine()) != null) out.write(line + ""\\n"");\n        out.close();\n        in.close();\n    }\n']",277,"    public void debugging() throws Fault {
        final InterceptorWrapper ws = new InterceptorWrapper(message);
        final LoggingMessage size = new LoggingMessage(""Inbound Message
----------------------------"");
        String coding = (String) ws.GetEncoding();
        if (coding != null) {
            size.GetEncoding().append(coding);
        }
        Object ctors = ws.getProtocolHeaders();
        if (ctors != null) {
            size.getHeader().append(ctors);
        }
        InputStream ios = (InputStream) ws.getContent(InputStream.class);
        if (ios != null) {
            CachedOutputStream js = new CachedOutputStream();
            try {
                IOUtils.copy(ios, js);
                js.flush();
                ios.close();
                this.message.setContent(InputStream.class, js.getInputStream());
                if (js.getTempFile() != null) {
                    logger.error(""
Message (saved to tmp file):
"");
                    logger.error(""Filename: "" + js.getTempFile().getAbsolutePath() + ""
"");
                }
                if (js.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)
"");
                }
                js.writeCacheTo(size.getPayload(), limit);
                js.close();
            } catch (IOException ent) {
                throw new Fault(ent);
            }
        }
        logger.debug(""Message received :
"" + buffer.getPayload().toString());
    }
",1,1,1,-1,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e","logging:7.078051567077637e-08,wrap:9.08970832824707e-07,buffer:7.003545761108398e-07,encoding:3.91155481338501e-07,getEncoding:3.725290298461914e-08,headers:5.029141902923584e-07,is:3.725290298461914e-07,bos:2.380460500717163e-06,e:5.960464477539063e-08,",9,32,"wrap:ws,encoding:coding,getEncoding:GetEncoding,e:ent,is:ios,buffer:size,headers:ctors,logging:debugging,bos:js,",Greedy,,
,,,,,,,,,,,,,,,
176,"['22977189', '20924119', '    public static void main(String args[]) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(args[0]));\n        Writer out = new FileWriter(args[1]);\n        out = new WrapFilter(new BufferedWriter(out), 40);\n        out = new TitleCaseFilter(out);\n        String line;\n        while ((line = in.readLine()) != null) out.write(line + ""\\n"");\n        out.close();\n        in.close();\n    }\n', '    public static void gzip() throws Exception {\n        System.out.println(""gzip()"");\n        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));\n        byte buffer[] = new byte[BLOCKSIZE];\n        File dir = new File(""/zip/covers"");\n        System.out.println(""Dir \'"" + dir.getAbsolutePath() + ""\' exists: "" + dir.exists());\n        FileInputStream in = new FileInputStream(dir);\n        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);\n        in.close();\n        zipout.close();\n    }\n']",102,,1,1,,-3,"in,out,line",,,,,Greedy,,
,,,,,,,,,,,,,,,
177,"['15241397', '6403868', '    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\\\/(id:.*)\\\\/.*?$"", ""$1"");\n        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);\n        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n        HttpURLConnection.setFollowRedirects(false);\n        httpURLConnection.connect();\n        response.setStatus(httpURLConnection.getResponseCode());\n        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");\n        logger.debug(""[headers]"");\n        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n            if (header.getKey() != null) {\n                for (String value : header.getValue()) {\n                    if (value != null) {\n                        logger.debug(header.getKey() + "": "" + value);\n                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {\n                            response.addHeader(header.getKey(), value);\n                        }\n                    }\n                }\n            }\n        }\n        logger.debug(""[/headers]"");\n        InputStream inputStream = httpURLConnection.getInputStream();\n        OutputStream outputStream = response.getOutputStream();\n        IOUtils.copy(inputStream, outputStream);\n    }\n', '    private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n        File oldlog = null;\n        try {\n            boolean oldClassCopied = false;\n            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);\n            if (upgrade) {\n                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);\n                if (destPath.equals(lastVerPath)) {\n                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");\n                    if (!destPath.renameTo(bkdir)) {\n                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                    }\n                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                    lastVerPath = bkdir;\n                } else {\n                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                }\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n            } else {\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n            }\n            dirty_ = true;\n            File[] ls = destPath.listFiles();\n            for (int i = 0; i < ls.length; i++) {\n                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();\n            }\n            byte[] buf = new byte[0];\n            int read = 0;\n            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                if (outClassFile.exists() && !outClassFile.delete()) {\n                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outClassFile.getName()));\n                }\n                final FileOutputStream out = new FileOutputStream(outClassFile);\n                final FileInputStream in = new FileInputStream(fileWithArchive_);\n                if (installClassOffset_ > 0) {\n                    in.skip(installClassOffset_);\n                }\n                buf = new byte[0];\n                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];\n                read = in.read(buf, 0, buf.length);\n                out.write(buf, 0, read);\n                out.close();\n                in.close();\n            }\n            final FileInputStream in = new FileInputStream(fileWithArchive_);\n            if (jarOffset_ > 0) {\n                in.skip(jarOffset_);\n            }\n            JarInputStream jar = new JarInputStream(in);\n            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");\n            if (outJarFile.exists() && !outJarFile.delete()) {\n                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outJarFile.getName()));\n            }\n            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n            ZipEntry entry = jar.getNextEntry();\n            final int bufSize = 32768;\n            buf = new byte[bufSize];\n            while (entry != null) {\n                String entryName = entry.getName();\n                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {\n                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {\n                    FileOutputStream out = null;\n                    try {\n                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                        VAGlobals.copyStream(jar, out, buf);\n                    } catch (IOException e) {\n                        throw e;\n                    } finally {\n                        if (out != null) out.close();\n                    }\n                } else if (!entryName.endsWith("".zip"")) {\n                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);\n                    ZipEntry outEntry = new ZipEntry(entryName);\n                    CRC32 crc = new CRC32();\n                    outJar.putNextEntry(outEntry);\n                    int size = 0;\n                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n                        size += read;\n                        if (read == 0) {\n                            Thread.yield();\n                        } else {\n                            outJar.write(buf, 0, read);\n                            crc.update(buf, 0, read);\n                        }\n                    }\n                    outEntry.setSize(size);\n                    outEntry.setCrc(crc.getValue());\n                    outJar.flush();\n                    outJar.closeEntry();\n                }\n                jar.closeEntry();\n                entry = jar.getNextEntry();\n            }\n            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");\n            Properties prop = new Properties();\n            try {\n                prop.load(pin);\n            } catch (IOException exc) {\n            }\n            if (language == null) language = ""default"";\n            prop.setProperty(""vainstall.destination.language"", language);\n            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");\n            CRC32 crc = new CRC32();\n            outEntry.setCrc(crc.getValue());\n            outEntry.setSize(prop.size());\n            outJar.putNextEntry(outEntry);\n            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);\n            outEntry.setCrc(crc.getValue());\n            outJar.closeEntry();\n            jar.close();\n            outJar.close();\n            in.close();\n        } catch (IOException e) {\n            String message = e.getLocalizedMessage();\n            message += ""\\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");\n            e.printStackTrace();\n            exitOnError(new IOException(message));\n        }\n        return oldlog;\n    }\n']",303,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
",1,1,1,-1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream","doGet:-1.4820614376583617e-07,request:-1.2887490762246622e-07,response:7.732494457347973e-07,rewrittenQueryString:-4.639496674408784e-07,rewrittenUrl:1.0632179878853463e-06,httpURLConnection:9.858930433118665e-07,header:3.247647672086149e-06,value:8.892368625950169e-07,inputStream:1.9331236143369934e-07,outputStream:5.992683204444679e-07,",0,0,"request:request,rewrittenQueryString:rewrittenQueryString,doGet:doGet,response:response,rewrittenUrl:rewrittenUrl,httpURLConnection:httpURLConnection,header:header,value:value,outputStream:outputStream,inputStream:inputStream,",Greedy,,
,,,,,,,,,,,,,,,
178,"['22046596', '471804', '        public void copy(File s, File t) throws IOException {\n            FileChannel in = (new FileInputStream(s)).getChannel();\n            FileChannel out = (new FileOutputStream(t)).getChannel();\n            in.transferTo(0, s.length(), out);\n            in.close();\n            out.close();\n        }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",72,"        public void  dup(File ins, File t) throws IOException {
            FileChannel inn = (new FileInputStream(ins)).getChannel();
            FileChannel outs = (new FileOutputStream(t)).getChannel();
            inn.transferTo(0, ins.length(), outs);
            inn.close();
            outs.close();
        }
",0,0,0,-1,"copy,s,t,in,out","copy:-5.066394805908203e-07,s:-5.662441253662109e-07,t:-6.159146626790364e-07,in:-7.748603820800781e-07,out:4.470348358154297e-07,",4,10,"t:t,out:outs,s:ins,in:inn,copy: dup,",Greedy,,
,,,,,,,,,,,,,,,
179,"['14820302', '22411381', '    protected void innerProcess(ProcessorURI curi) throws InterruptedException {\n        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);\n        ReplayCharSequence cs = null;\n        try {\n            cs = curi.getRecorder().getReplayCharSequence();\n        } catch (Exception e) {\n            curi.getNonFatalFailures().add(e);\n            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());\n            return;\n        }\n        MessageDigest digest = null;\n        try {\n            try {\n                digest = MessageDigest.getInstance(SHA1);\n            } catch (NoSuchAlgorithmException e1) {\n                e1.printStackTrace();\n                return;\n            }\n            digest.reset();\n            String s = null;\n            if (regexpr != null) {\n                s = cs.toString();\n            } else {\n                Matcher m = regexpr.matcher(cs);\n                s = m.replaceAll("" "");\n            }\n            digest.update(s.getBytes());\n            byte[] newDigestValue = digest.digest();\n            curi.setContentDigest(SHA1, newDigestValue);\n        } finally {\n            if (cs != null) {\n                try {\n                    cs.close();\n                } catch (IOException ioe) {\n                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));\n                }\n            }\n        }\n    }\n', '    public PTask stop(PTask task, SyrupConnection con) throws Exception {\n        PreparedStatement s = null;\n        ResultSet result = null;\n        try {\n            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());\n            s.setString(1, task.key());\n            result = s.executeQuery();\n            con.commit();\n            if (result.next()) {\n                String url = result.getString(""worker"");\n                InputStream i = null;\n                try {\n                    Object b = new URL(url).getContent();\n                    if (b instanceof InputStream) {\n                        i = (InputStream) b;\n                        byte[] bb = new byte[256];\n                        int ll = i.read(bb);\n                        String k = new String(bb, 0, ll);\n                        if (k.equals(task.key())) {\n                            return task;\n                        }\n                    }\n                } catch (Exception e) {\n                } finally {\n                    if (i != null) {\n                        i.close();\n                    }\n                }\n                PreparedStatement s2 = null;\n                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());\n                s2.setString(1, task.key());\n                s2.executeUpdate();\n                task = sqlImpl().queryFunctions().readPTask(task.key(), con);\n                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);\n                con.commit();\n            }\n        } finally {\n            con.rollback();\n            close(result);\n        }\n        return task;\n    }\n']",254,"    protected void  doRun(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest dest = null;
        try {
            try {
                dest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            dest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher  M = regexpr.matcher(cs);
                s =  M.replaceAll("" "");
            }
            dest.update(s.getBytes());
            byte[] newDigestV = dest.dest();
            curi.setContentDigest(SHA1, newDigestV);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
",0,0,0,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue","innerProcess:-2.634525299072266e-06,curi:-5.331039428710938e-05,regexpr:-2.4282932281494143e-05,cs:-8.484125137329102e-05,digest:-0.00021252632141113283,s:-0.00010816256205240886,m:-2.0194053649902344e-05,newDigestValue:-1.356204350789388e-05,",4,11,"curi:curi,regexpr:regexpr,s:s,cs:cs,digest:dest,m: M,newDigestValue:newDigestV,innerProcess: doRun,",Greedy,,
,,,,,,,,,,,,,,,
180,"['2668634', '10795866', '    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n        File tempFile = null;\n        JarFile jin = null;\n        JarOutputStream jout = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(outputName);\n            System.out.println(""portletApplicationName = "" + portletApplicationName);\n            tempFile = File.createTempFile(""webmill-delpoy-"", """");\n            tempFile.deleteOnExit();\n            jin = new JarFile(inputName);\n            jout = new JarOutputStream(new FileOutputStream(tempFile));\n            Document webXml = null;\n            Document portletXml = null;\n            Document contextXml = null;\n            ZipEntry src;\n            InputStream source;\n            Enumeration zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(""Found web.xml"");\n                        webXml = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(""Found WEB-INF/portlet.xml"");\n                        portletXml = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(""Found META-INF/context.xml"");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (webXml == null) {\n                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");\n            }\n            if (portletXml == null) {\n                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");\n            }\n            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n            webRewriter.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            jin = new JarFile(inputName);\n            zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    String fullTarget = \'/\' + target;\n                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {\n                        System.out.println(""Skip logger "" + target);\n                        continue;\n                    } else {\n                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n                            System.out.println(""Skip portlet tld file "" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(""Skip web.xml file "" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(""Skip portlet.xml file "" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(""Skip context.xml file "" + target);\n                            continue;\n                        }\n                        System.out.println(""Add file "" + target);\n                    }\n                    addFile(target, source, jout);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, webXml, jout);\n            addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n            addFile(META_INF_CONTEXT_XML, contextXml, jout);\n            System.out.println(""Attempting to add portlet.tld to war..."");\n            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");\n            if (is == null) {\n                System.out.println(""Failed to find portlet.tld in classpath"");\n            } else {\n                String portletTldFile = webRewriter.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == \'/\') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(""Adding file "" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, jout);\n                } finally {\n                    is.close();\n                }\n            }\n            jout.close();\n            jin.close();\n            jin = null;\n            jout = null;\n            System.out.println(""Creating war "" + outputName + "" ..."");\n            System.out.flush();\n            srcChannel = new FileInputStream(tempFile).getChannel();\n            dstChannel = new FileOutputStream(outputName).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            tempFile.delete();\n            tempFile = null;\n            System.out.println(""War "" + outputName + "" created"");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (jin != null) {\n                try {\n                    jin.close();\n                    jin = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (jout != null) {\n                try {\n                    jout.close();\n                    jout = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (tempFile != null && tempFile.exists()) {\n                tempFile.delete();\n            }\n        }\n    }\n', '    public String upload() {\n        System.out.println(imgFile);\n        String destDir = ""E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\map_bg.jpg"";\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(new File(destDir));\n            IOUtils.copy(new FileInputStream(imgFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return ""show"";\n    }\n']",979,,1,1,,-3,"inputName,outputName,stripLoggers,tempFile,jin,jout,srcChannel,dstChannel,portletApplicationName,webXml,portletXml,contextXml,src,source,zipEntries,target,webRewriter",,,,,Greedy,,
,,,,,,,,,,,,,,,
181,"['17158020', '8788371', '    public synchronized String encryptPassword(String passwordString) throws Exception {\n        MessageDigest digest = null;\n        digest = MessageDigest.getInstance(""SHA"");\n        digest.update(passwordString.getBytes(""UTF-8""));\n        byte raw[] = digest.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n', '    private void tail(String[] cmd, int pos) throws IOException {\n        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");\n        String src = null;\n        Path path = null;\n        try {\n            List<String> parameters = c.parse(cmd, pos);\n            src = parameters.get(0);\n        } catch (IllegalArgumentException iae) {\n            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);\n            throw iae;\n        }\n        boolean foption = c.getOpt(""f"") ? true : false;\n        path = new Path(src);\n        FileSystem srcFs = path.getFileSystem(getConf());\n        if (srcFs.isDirectory(path)) {\n            throw new IOException(""Source must be a file."");\n        }\n        long fileSize = srcFs.getFileStatus(path).getLen();\n        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n        while (true) {\n            FSDataInputStream in = srcFs.open(path);\n            in.seek(offset);\n            IOUtils.copyBytes(in, System.out, 1024, false);\n            offset = in.getPos();\n            in.close();\n            if (!foption) {\n                break;\n            }\n            fileSize = srcFs.getFileStatus(path).getLen();\n            offset = (fileSize > offset) ? offset : fileSize;\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n']",68,"    public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",0,0,0,-1,"encryptPassword,passwordString,digest,raw,hash","encryptPassword:2.35140323638916e-05,passwordString:6.349881490071614e-05,digest:-0.00027621785799662274,raw:4.724661509195963e-05,hash:5.08427619934082e-05,",0,0,"digest:digest,raw:raw,hash:hash,encryptPassword:encryptPassword,passwordString:passwordString,",Greedy,,
,,,,,,,,,,,,,,,
182,"['6341264', '9347451', '    public static byte[] getJarEntry(String jarName, String entry, int port) {\n        byte[] b = null;\n        try {\n            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());\n            String protocol = ""http://"";\n            int x = codebase.indexOf(protocol) + protocol.length();\n            String s2 = codebase.substring(x);\n            int x2 = s2.indexOf(\'/\');\n            String downloadHost = s2.substring(0, x2);\n            if (downloadHost.indexOf(\':\') == -1) {\n                downloadHost += "":"" + port;\n            }\n            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);\n            JarURLConnection jurl = (JarURLConnection) url.openConnection();\n            JarEntry je = jurl.getJarEntry();\n            InputStream is = jurl.getInputStream();\n            BufferedInputStream bis = new BufferedInputStream(is);\n            int size = (int) je.getSize();\n            b = new byte[size];\n            int rb = 0;\n            int chunk = 0;\n            while ((size - rb) > 0) {\n                chunk = bis.read(b, rb, size - rb);\n                if (chunk == -1) {\n                    break;\n                }\n                rb += chunk;\n            }\n            bis.close();\n            is.close();\n            bis = null;\n            is = null;\n            url = null;\n            jurl = null;\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return b;\n    }\n', '    public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {\n        PrintWriter file = getWriter(name + "".txt"");\n        file.print(""Filename\\t"");\n        file.print(""Date\\t"");\n        file.print(""Acquisition #\\t"");\n        file.print(""�m Diameter\\t"");\n        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\\t"");\n        file.println();\n        int nothing = 0;\n        String fileLoc = ""C:/abcd/"" + name + "".txt\\t"";\n        Date tempDate;\n        for (int i = 0; i < items; i++) {\n            tempDate = new Date(tstart);\n            tstart += tdelta;\n            file.print(fileLoc);\n            file.print(dateFormat.format(tempDate) + ""\\t"");\n            file.print(i + 1 + ""\\t"");\n            double t = (double) (i) / 10;\n            file.print(t + ""\\t"");\n            boolean peaked = false;\n            for (int k = mzmin; k <= mzmax; k++) {\n                for (int j = 0; j < peaks.length && !peaked; j++) {\n                    if (k == peaks[j]) {\n                        file.print(peakVals[j % peakVals.length] + ""\\t"");\n                        peaked = true;\n                    }\n                }\n                if (!peaked) {\n                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\\t"");\n                }\n                peaked = false;\n            }\n            file.println();\n        }\n        try {\n            Scanner test = new Scanner(f);\n            while (test.hasNext()) {\n                System.out.println(test.nextLine());\n            }\n            System.out.println(""test"");\n        } catch (Exception e) {\n        }\n        file.close();\n    }\n']",315,,0,0,,-3,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk",,,,,Greedy,,
,,,,,,,,,,,,,,,
183,"['6906419', '3187685', '    public static String encryptPassword(String password) {\n        try {\n            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");\n            digest.update(password.getBytes(""UTF-8""));\n            byte[] hash = digest.digest();\n            StringBuffer buf = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                int halfbyte = (hash[i] >>> 4) & 0x0F;\n                int two_halfs = 0;\n                do {\n                    if ((0 <= halfbyte) && (halfbyte <= 9)) {\n                        buf.append((char) (\'0\' + halfbyte));\n                    } else {\n                        buf.append((char) (\'a\' + (halfbyte - 10)));\n                    }\n                    halfbyte = hash[i] & 0x0F;\n                } while (two_halfs++ < 1);\n            }\n            return buf.toString();\n        } catch (Exception e) {\n        }\n        return null;\n    }\n', '    private void copyJar(File src, File dst) throws IOException {\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            srcChannel = new FileInputStream(src).getChannel();\n            dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } catch (IOException e) {\n            fLog.log(Level.SEVERE, e.getMessage(), e);\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n']",184,,0,0,,-3,"encryptPassword,password,digest,hash,buf,i,halfbyte,two_halfs",,,,,Greedy,,
,,,,,,,,,,,,,,,
184,"['3683344', '12106167', '    private static String genRandomGUID(boolean secure) {\n        String valueBeforeMD5 = """";\n        String valueAfterMD5 = """";\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n            return valueBeforeMD5;\n        }\n        long time = System.currentTimeMillis();\n        long rand = 0;\n        if (secure) {\n            rand = mySecureRand.nextLong();\n        } else {\n            rand = myRand.nextLong();\n        }\n        sbValueBeforeMD5.append(s_id);\n        sbValueBeforeMD5.append("":"");\n        sbValueBeforeMD5.append(Long.toString(time));\n        sbValueBeforeMD5.append("":"");\n        sbValueBeforeMD5.append(Long.toString(rand));\n        valueBeforeMD5 = sbValueBeforeMD5.toString();\n        md5.update(valueBeforeMD5.getBytes());\n        byte[] array = md5.digest();\n        String strTemp = """";\n        for (int i = 0; i < array.length; i++) {\n            strTemp = (Integer.toHexString(array[i] & 0XFF));\n            if (strTemp.length() == 1) {\n                valueAfterMD5 = valueAfterMD5 + ""0"" + strTemp;\n            } else {\n                valueAfterMD5 = valueAfterMD5 + strTemp;\n            }\n        }\n        return valueAfterMD5.toUpperCase();\n    }\n', '    public static void init(Locale lng) {\n        try {\n            Locale toLoad = lng != null ? lng : DEFAULT_LOCALE;\n            URL url = ClassLoader.getSystemResource(""locales/"" + toLoad.getISO3Language() + "".properties"");\n            if (url == null) {\n                url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");\n            }\n            PROPS.clear();\n            PROPS.load(url.openStream());\n        } catch (IOException ioe) {\n            try {\n                URL url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");\n                PROPS.clear();\n                PROPS.load(url.openStream());\n            } catch (Exception e) {\n                e.printStackTrace();\n                System.exit(99);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(99);\n        }\n    }\n']",256,"    private static String  genRandomSID(boolean encrypted) {
        String valueBeforeRDInvalid = """";
        String valueWithoutmd5 = """";
        MessageDigest metadata5 = null;
        StringBuffer sbValueBeforemd45 = new StringBuffer();
        try {
            metadata5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
            return valueBeforeRDInvalid;
        }
        long year = System.currentTimeMillis();
        long md = 0;
        if (encrypted) {
            md = mySecureRand.nextLong();
        } else {
            md = myRand.nextLong();
        }
        sbValueBeforemd45.append(s_id);
        sbValueBeforemd45.append("":"");
        sbValueBeforemd45.append(Long.toString(year));
        sbValueBeforemd45.append("":"");
        sbValueBeforemd45.append(Long.toString(md));
        valueBeforeRDInvalid = sbValueBeforemd45.toString();
        metadata5.update(valueBeforeRDInvalid.getBytes());
        byte[] rays = metadata5.digest();
        String drMods = """";
        for (int qi = 0; qi < rays.length; qi++) {
            drMods = (Integer.toHexString(rays[qi] & 0XFF));
            if (drMods.length() == 1) {
                valueWithoutmd5 = valueWithoutmd5 + ""0"" + drMods;
            } else {
                valueWithoutmd5 = valueWithoutmd5 + drMods;
            }
        }
        return valueWithoutmd5.toUpperCase();
    }
",0,0,0,-1,"genRandomGUID,secure,valueBeforeMD5,valueAfterMD5,md5,sbValueBeforeMD5,time,rand,array,strTemp,i","genRandomGUID:3.760769253685361e-07,secure:8.032435462588356e-07,valueBeforeMD5:-6.528127761114211e-07,valueAfterMD5:1.4390264238630022e-06,md5:-1.0217939104352678e-06,sbValueBeforeMD5:3.7749608357747394e-07,time:8.912313552129835e-07,rand:1.8221991402762276e-06,array:1.4816011701311382e-06,strTemp:3.4059797014508924e-07,i:-5.790165492466517e-07,",11,42,"md5:metadata5,i:qi,time:year,valueBeforeMD5:valueBeforeRDInvalid,sbValueBeforeMD5:sbValueBeforemd45,rand:md,genRandomGUID: genRandomSID,secure:encrypted,valueAfterMD5:valueWithoutmd5,array:rays,strTemp:drMods,",Greedy,,
,,,,,,,,,,,,,,,
185,"['16511008', '9109613', '    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {\n        ProgramProfilingMessageSymbol profilingMessageSymbol = null;\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultSet = null;\n        try {\n            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";\n            connection = DriverManager.getConnection(CONN_STR);\n            statement = connection.createStatement();\n            statement.executeUpdate(query);\n            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;\n            resultSet = statement.executeQuery(query);\n            if (!resultSet.next()) {\n                connection.rollback();\n                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";\n                log.error(msg);\n                throw new AdaptationException(msg);\n            }\n            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);\n            connection.commit();\n        } catch (SQLException ex) {\n            try {\n                connection.rollback();\n            } catch (Exception e) {\n            }\n            String msg = ""SQLException in createNewProfilingMessageSymbol"";\n            log.error(msg, ex);\n            throw new AdaptationException(msg, ex);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Exception ex) {\n            }\n            try {\n                statement.close();\n            } catch (Exception ex) {\n            }\n            try {\n                connection.close();\n            } catch (Exception ex) {\n            }\n        }\n        return profilingMessageSymbol;\n    }\n', '    public static void fileCopy(String from_name, String to_name) throws IOException {\n        File fromFile = new File(from_name);\n        File toFile = new File(to_name);\n        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);\n        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);\n        if (!fromFile.isFile()) abort(""can\'t copy directory: "" + from_name);\n        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) abort(""destination directory doesn\'t exist: "" + parent);\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n']",253,,0,0,,-3,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg",,,,,Greedy,,
,,,,,,,,,,,,,,,
186,"['2676365', '7468819', '    public void reset(int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");\n            psta.setInt(1, currentPilot);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }\n', '        public void run() {\n            try {\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(""GET"");\n                con.setDoInput(true);\n                byte[] encodedPassword = (username + "":"" + password).getBytes();\n                BASE64Encoder encoder = new BASE64Encoder();\n                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));\n                InputStream is = con.getInputStream();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n                String line;\n                StringBuffer response = new StringBuffer();\n                while ((line = rd.readLine()) != null) {\n                    response.append(line);\n                    response.append(\'\\n\');\n                    lastIteraction = System.currentTimeMillis();\n                }\n                rd.close();\n                is.close();\n                con.disconnect();\n                result = response.toString();\n                finish = true;\n            } catch (Throwable e) {\n                this.e = e;\n            }\n        }\n']",66,"    public void clear(int currentpail) {
        try {
            PreparedStatement apsa = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");
            apsa.setInt(1, currentpail);
            apsa.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
",0,0,0,-1,"reset,currentPilot,psta","reset:-4.356106122334798e-05,currentPilot:3.9120515187581376e-05,psta:-0.0002936422824859619,",3,6,"psta:apsa,reset:clear,currentPilot:currentpail,",Greedy,,
,,,,,,,,,,,,,,,
187,"['9275622', '22264586', '    private boolean copyFile(File _file1, File _file2) {\n        FileInputStream fis;\n        FileOutputStream fos;\n        try {\n            fis = new FileInputStream(_file1);\n            fos = new FileOutputStream(_file2);\n            FileChannel canalFuente = fis.getChannel();\n            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n            fis.close();\n            fos.close();\n            return true;\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n        return false;\n    }\n', '    private static void copyFiles(String strPath, String dstPath) throws Exception {\n        File src = new File(strPath);\n        File dest = new File(dstPath);\n        if (src.isDirectory()) {\n            dest.mkdirs();\n            String list[] = src.list();\n            for (int i = 0; i < list.length; i++) {\n                String dest1 = dest.getAbsolutePath() + ""\\\\"" + list[i];\n                String src1 = src.getAbsolutePath() + ""\\\\"" + list[i];\n                copyFiles(src1, dest1);\n            }\n        } else {\n            FileChannel sourceChannel = new FileInputStream(src).getChannel();\n            FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n            sourceChannel.close();\n            targetChannel.close();\n        }\n    }\n']",98,,1,1,,-3,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,,Greedy,,
,,,,,,,,,,,,,,,
188,"['19147279', '2198730', '    public boolean actualizarDatosFinal(int idJugadorDiv, int idRonda, jugadorxDivxRonda unjxdxr) {\n        int intResult = 0;\n        String sql = ""UPDATE jugadorxdivxronda "" + "" SET resultado = ?, puntajeRonda = ? "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            populatePreparedStatementActFinal(unjxdxr);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n', '    public void importCSV(InputStream csvfile) throws Exception {\n        try {\n            String[] qmarks = new String[columns.length];\n            for (int i = 0; i < qmarks.length; i++) {\n                qmarks[i] = ""?"";\n            }\n            if (cleartable) {\n                String delsql = ""delete from "" + table;\n                Statement delstm = conn.createStatement();\n                delstm.executeUpdate(delsql);\n            }\n            String sql = ""insert into "" + table + "" ("" + StringUtils.join(columns, "", "") + "") values ("" + StringUtils.join(qmarks, "", "") + "")"";\n            log.debug(""SQL: "" + sql);\n            PreparedStatement stm = conn.prepareStatement(sql);\n            int datatypes[] = new int[columns.length];\n            for (int i = 0; i < columns.length; i++) {\n                Table tbl = project.getTableByName(table);\n                if (tbl == null) throw new OntopiaRuntimeException(""Unknown table: "" + table);\n                Column col = tbl.getColumnByName(columns[i]);\n                if (col == null) throw new OntopiaRuntimeException(""Unknown table column: "" + columns[i]);\n                if (col.getType() == null) throw new OntopiaRuntimeException(""Column type is null: "" + col.getType());\n                DataType datatype = project.getDataTypeByName(col.getType(), ""generic"");\n                if (datatype == null) throw new OntopiaRuntimeException(""Unknown column type: "" + col.getType());\n                String dtype = datatype.getType();\n                if (""varchar"".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (""integer"".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(""Unknown datatype: "" + dtype);\n            }\n            LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\n            for (int i = 0; i < ignorelines; i++) {\n                String line = reader.readLine();\n                if (line == null) break;\n            }\n            log.debug(""["" + StringUtils.join(columns, "", "") + ""]"");\n            int lineno = 0;\n            while (true) {\n                lineno++;\n                String line = reader.readLine();\n                if (line == null) break;\n                try {\n                    String[] cols = StringUtils.split(line, separator);\n                    if (cols.length > columns.length && !ignorecolumns) log.debug(""Ignoring columns: "" + (columns.length + 1) + ""-"" + cols.length + "" \'"" + line + ""\'"");\n                    log.debug(""CVALUES: "" + (columns.length + 1) + ""-"" + cols.length + "" \'"" + line + ""\'"");\n                    String dmesg = ""("";\n                    for (int i = 0; i < columns.length; i++) {\n                        String col = cols[i];\n                        if (stripquotes) {\n                            int len = col.length();\n                            if (len > 1 && ((col.charAt(0) == \'""\' && col.charAt(len - 1) == \'""\') || (col.charAt(0) == \'\\\'\' && col.charAt(len - 1) == \'\\\'\'))) col = col.substring(1, len - 1);\n                        }\n                        if (col != null && col.equals("""")) col = null;\n                        dmesg = dmesg + col;\n                        if (i < columns.length - 1) dmesg = dmesg + "", "";\n                        stm.setObject(i + 1, col, datatypes[i]);\n                    }\n                    dmesg = dmesg + "")"";\n                    log.debug(dmesg);\n                    stm.execute();\n                } catch (Exception e) {\n                    conn.rollback();\n                    throw new OntopiaRuntimeException(""Cannot read line "" + lineno + "": \'"" + line + ""\'"", e);\n                }\n            }\n            conn.commit();\n        } finally {\n            if (conn != null) conn.close();\n        }\n    }\n']",141,"    public boolean  actualizarDataosFinal(int idJugadorApp, int IDDona, jugadorxDivxRonda unjxdxer) {
        int INTSuccess = 0;
        String scl = ""UPDATE jugadorxdivxronda "" + "" SET resultado = ?, puntajeRonda = ? "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorApp + "" AND ronda_numeroRonda = "" + IDDona;
        try {
            character = conexionBD.getConnection();
            character.setAutoCommit(false);
            fps = character.prepareStatement(scl);
            populatePreparedStatementActFinal(unjxdxer);
            INTSuccess = fps.executeUpdate();
            character.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                character.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(fps);
            conexionBD.close(character);
        }
        return (INTSuccess > 0);
    }
",1,1,1,-1,"actualizarDatosFinal,idJugadorDiv,idRonda,unjxdxr,intResult,sql,connection,ps","actualizarDatosFinal:-1.3453619820731026e-06,idJugadorDiv:1.8903187343052454e-06,idRonda:4.745665050688244e-06,unjxdxr:1.3226554507300967e-06,intResult:-2.392700740269252e-06,sql:6.726809910365513e-06,connection:6.447519574846539e-05,ps:8.063656943184988e-06,",8,21,"idJugadorDiv:idJugadorApp,idRonda:IDDona,sql:scl,connection:character,ps:fps,actualizarDatosFinal: actualizarDataosFinal,unjxdxr:unjxdxer,intResult:INTSuccess,",Greedy,,
,,,,,,,,,,,,,,,
189,"['9796161', '4798332', '    public static String getMD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(""MD5"");\n            m.update(s.getBytes(), 0, s.length());\n            return """" + new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(""MD5 is not supported !!!"");\n        }\n        return s;\n    }\n', '    public static String SHA(String source) {\n        logger.info(source);\n        String result = null;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""SHA"");\n            digest.update(source.getBytes());\n            byte[] bytes = digest.digest();\n            result = EncodeUtils.hexEncode(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        logger.info(result);\n        return result;\n    }\n']",80,"    public static String toMD7(String is) {
        try {
            MessageDigest managed = MessageDigest.getInstance(""MD5"");
            managed.update(is.getBytes(), 0, is.length());
            return """" + new BigInteger(1, managed.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return is;
    }
",1,1,1,-1,"getMD5,s,m","getMD5:2.332031726837158e-06,s:2.0802021026611328e-05,m:-8.471310138702393e-06,",3,8,"s:is,m:managed,getMD5:toMD7,",Greedy,,
,,,,,,,,,,,,,,,
190,"['12236729', '11562173', '        private void copy(File inputFile, File outputFile) throws Exception {\n            FileReader in = new FileReader(inputFile);\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n        }\n', '    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        IOUtils.copy(in, stream);\n        byte[] out = stream.toByteArray();\n        if (all) assertEquals(cmp.length, out.length);\n        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);\n    }\n']",70,,1,1,,-3,"copy,inputFile,outputFile,in,out,c",,,,,Greedy,,
,,,,,,,,,,,,,,,
191,"['14783950', '22046596', '    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n        if (fileList == null || fileList.size() == 0) return;\n        FileOutputStream fos = new FileOutputStream(zipFileName);\n        ZipOutputStream zos = new ZipOutputStream(fos);\n        Iterator iter = fileList.iterator();\n        while (iter.hasNext()) {\n            String fileName = (String) iter.next();\n            int ind = Math.max(fileName.lastIndexOf(\'/\'), fileName.lastIndexOf(\'\\\\\'));\n            String shortName = ""unknown"";\n            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n            zos.putNextEntry(new ZipEntry(shortName));\n            FileInputStream fis = new FileInputStream(fileName);\n            byte[] buf = new byte[10000];\n            int bytesRead;\n            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n            fis.close();\n            zos.closeEntry();\n        }\n        zos.close();\n    }\n', '        public void copy(File s, File t) throws IOException {\n            FileChannel in = (new FileInputStream(s)).getChannel();\n            FileChannel out = (new FileOutputStream(t)).getChannel();\n            in.transferTo(0, s.length(), out);\n            in.close();\n            out.close();\n        }\n']",209,,1,1,,-3,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,,,,Greedy,,
,,,,,,,,,,,,,,,
192,"['12066447', '8150996', '    protected void truncate(final File file) {\n        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");\n        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            final File backupRoot = new File(this.getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(""Can\'t create backup dir for backup storage"");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(this.getBackupDateFormat());\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);\n            }\n            final String date = df.format(new Date(file.lastModified()));\n            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                final ZipEntry entry = new ZipEntry(file.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(file));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(file);\n                final byte[] buffer = new byte[1024];\n                int readed;\n                while ((readed = fis.read(buffer)) != -1) {\n                    zos.write(buffer, 0, readed);\n                }\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(""Can\'t create zip file"", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(""Can\'t close zip file"", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(""Can\'t close zipped file"", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(""Can\'t delete old log file "" + file.getAbsolutePath());\n            }\n        }\n    }\n', '    private static boolean copyFile(File in, File out) {\n        boolean ok = true;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(in);\n            os = new FileOutputStream(out);\n            byte[] buffer = new byte[0xFFFF];\n            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n        } catch (IOException e) {\n            System.err.println(e);\n            ok = false;\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n        }\n        return ok;\n    }\n']",400,,1,1,,-3,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed",,,,,Greedy,,
,,,,,,,,,,,,,,,
193,"['18891988', '7425022', '    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {\n        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);\n        mLog.debug(""Received endpoint: "" + endpoint);\n        String fileLocation = null;\n        try {\n            String tempDir = System.getProperty(""java.io.tmpdir"");\n            URL url = new URL(wsdlLocation);\n            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";\n            String tmpWSDLFile = WSDLFile + "".tmp"";\n            File inputFile = new File(WSDLFile);\n            File tmpFile = new File(tmpWSDLFile);\n            if (!inputFile.exists() || inputFile.length() == 0) {\n                mLog.debug(""Downloading the WSDL"");\n                inputFile.createNewFile();\n                InputStream in = url.openStream();\n                FileOutputStream out = new FileOutputStream(inputFile);\n                URLConnection con = url.openConnection();\n                int fileLength = con.getContentLength();\n                ReadableByteChannel channelIn = Channels.newChannel(in);\n                FileChannel channelOut = out.getChannel();\n                channelOut.transferFrom(channelIn, 0, fileLength);\n                channelIn.close();\n                channelOut.close();\n                out.flush();\n                out.close();\n                in.close();\n                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));\n                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");\n                for (int i = 0; i < nl1.getLength(); i++) {\n                    Node node1 = nl1.item(i);\n                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {\n                        ((Element) node1).setAttribute(""location"", endpoint);\n                    }\n                }\n                FileOutputStream tmpOut = new FileOutputStream(tmpFile);\n                XMLUtils.DocumentToStream(tmpDocument, tmpOut);\n                tmpOut.flush();\n                tmpOut.close();\n                boolean retVal = inputFile.delete();\n                if (retVal) {\n                    retVal = tmpFile.renameTo(new File(WSDLFile));\n                }\n                mLog.debug(""Return Value: "" + retVal);\n            } else {\n                mLog.debug(""The WSDL is already at the ServiceProvider"");\n            }\n            fileLocation = WSDLFile;\n        } catch (MalformedURLException mx) {\n            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());\n            throw new AxisFault(mx.getMessage(), mx.getCause());\n        } catch (IOException ix) {\n            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());\n            throw new AxisFault(ix.getMessage(), ix.getCause());\n        } catch (ParserConfigurationException px) {\n            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());\n            throw new AxisFault(px.getMessage(), px.getCause());\n        } catch (SAXException sx) {\n            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());\n            throw new AxisFault(sx.getMessage(), sx.getCause());\n        }\n        return fileLocation;\n    }\n', '    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n        String filePath = null;\n        try {\n            URL endpoint = new URL(wsdlURL);\n            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n            conn.setDoOutput(false);\n            conn.setDoInput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(""GET"");\n            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");\n            conn.setRequestProperty(""Connection"", ""close"");\n            if (userPassword != null) {\n                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n            }\n            InputStream is = null;\n            if (conn.getResponseCode() == 200) {\n                is = conn.getInputStream();\n            } else {\n                is = conn.getErrorStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                StringWriter sw = new StringWriter();\n                char[] buf = new char[200];\n                int read = 0;\n                while (read != -1) {\n                    read = isr.read(buf);\n                    sw.write(buf);\n                }\n                throw new WiseConnectionException(""Remote server\'s response is an error: "" + sw.toString());\n            }\n            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));\n            if (!outputDir.exists()) {\n                outputDir.mkdir();\n                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");\n            }\n            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());\n            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n            IOUtils.copyStream(fos, is);\n            fos.close();\n            is.close();\n            filePath = file.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(""Wsdl download failed!"", e);\n        }\n        return filePath;\n    }\n']",593,,1,0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,,Greedy,,
,,,,,,,,,,,,,,,
194,"['21488518', '9846843', '    @Override\n    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n        File dest = new File(this.realFile, name);\n        if (allowedClient) {\n            if ("".request"".equals(name) || "".tokens"".equals(name)) {\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n                if ("".request"".equals(name)) {\n                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);\n                    RequestManager.manageRequest(request, null, true);\n                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);\n                }\n                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);\n            } else {\n                return null;\n            }\n        } else {\n            LOGGER.error(""User isn\'t owner of this folder"");\n            return null;\n        }\n    }\n', '    public byte[] getResponse() {\n        final ByteArrayInputStream bais = new ByteArrayInputStream(request);\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        List<String> lines = Collections.emptyList();\n        try {\n            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);\n            lines = dl;\n        } catch (IOException ioex) {\n            throw new AssertionError(ioex);\n        }\n        String resource = null;\n        for (String line : lines) {\n            if (line.startsWith(""GET "")) {\n                int endIndex = line.lastIndexOf(\' \');\n                resource = line.substring(4, endIndex);\n            }\n        }\n        final PrintStream printStream = new PrintStream(baos);\n        if (resource == null) {\n            printStream.println(""HTTP/1.1 400 Bad Request"");\n        } else {\n            final InputStream inputStream = getClass().getResourceAsStream(resource);\n            if (inputStream == null) {\n                printStream.println(""HTTP/1.1 404 Not Found"");\n                printStream.println();\n            } else {\n                printStream.println(""HTTP/1.1 200 OK"");\n                printStream.println();\n                try {\n                    IOUtils.copy(inputStream, printStream);\n                } catch (IOException ioex) {\n                    throw new AssertionError(ioex);\n                }\n            }\n        }\n        printStream.flush();\n        printStream.close();\n        return baos.toByteArray();\n    }\n']",181,"    @Override
    public Resource createNext(String format, InputStream xml, Long description, String ContentTypes) throws IOException {
        File copy = new File(this.realFile, format);
        if (allowedClient) {
            if ("".request"".equals(format) || "".tokens"".equals(format)) {
                FileOutputStream null = null;
                try {
                    null = new FileOutputStream(copy);
                    IOUtils.copy(xml, null);
                } finally {
                    IOUtils.closeQuietly(null);
                }
                if ("".request"".equals(format)) {
                    File query = new File(realFile.getAbsolutePath() + ""/"" + format);
                    RequestManager.manageRequest(query, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + format, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",1,1,1,-1,"createNew,name,in,length,contentType,dest,out,request","createNew:0.0,name:2.086162567138672e-07,in:3.3378601074218753e-07,length:6.556510925292969e-08,contentType:-2.9802322387695312e-08,dest:2.5033950805664064e-07,out:5.960464477539062e-07,request:-2.384185791015625e-08,",8,20,"name:format,request:query,dest:copy,createNew:createNext,in:xml,length:description,contentType:ContentTypes,out:null,",Greedy,,
,,,,,,,,,,,,,,,
195,"['13233761', '23531898', '    public void executeUpdateTransaction(List queries) throws SQLException {\n        assert connection != null;\n        boolean autoCommit = connection.getAutoCommit();\n        connection.setAutoCommit(false);\n        try {\n            Iterator iterator = queries.iterator();\n            while (iterator.hasNext()) {\n                String query = (String) iterator.next();\n                Statement statement = connection.createStatement();\n                statement.executeUpdate(query);\n            }\n            connection.commit();\n            connection.setAutoCommit(autoCommit);\n        } catch (SQLException e) {\n            connection.rollback();\n            throw new SQLException(e.getMessage());\n        }\n    }\n', '    public void doUpdateByLoginID() throws Exception {\n        if (!isValidate()) {\n            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");\n        }\n        Connection con = null;\n        PreparedStatement ps = null;\n        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";\n        DBOperation dbo = factory.createDBOperation(POOL_NAME);\n        try {\n            con = dbo.getConnection();\n            con.setAutoCommit(false);\n            ps = con.prepareStatement(strQuery);\n            ps.setString(1, this.sessionID);\n            ps.setInt(2, this.user.getUserID());\n            ps.setTimestamp(3, this.beginDate);\n            ps.setString(4, this.ipAddress);\n            ps.setString(5, this.macNO);\n            ps.setString(6, this.loginID);\n            int resultCount = ps.executeUpdate();\n            if (resultCount != 1) {\n                con.rollback();\n                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);\n            }\n            con.commit();\n        } catch (SQLException se) {\n            if (con != null) {\n                con.rollback();\n            }\n            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\\n\\t"" + se);\n        } finally {\n            con.setAutoCommit(true);\n            closePreparedStatement(ps);\n            closeConnection(dbo);\n        }\n    }\n']",120,,1,1,,-3,"executeUpdateTransaction,queries,autoCommit,iterator,query,statement",,,,,Greedy,,
,,,,,,,,,,,,,,,
196,"['12146394', '8164056', '    public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\n        if (key == null || key.length == 0) {\n            throw new IllegalArgumentException(""Argument \'key\' cannot be null or an empty array."");\n        }\n        if (salt == null || salt.length == 0) {\n            throw new IllegalArgumentException(""Argument \'salt\' cannot be null or an empty array."");\n        }\n        final MessageDigest _md = MessageDigest.getInstance(""MD5"");\n        _md.update(key);\n        _md.update(MAGIC.getBytes());\n        _md.update(salt);\n        final MessageDigest md2 = MessageDigest.getInstance(""MD5"");\n        md2.update(key);\n        md2.update(salt);\n        md2.update(key);\n        byte[] abyFinal = md2.digest();\n        for (int n = key.length; n > 0; n -= 16) {\n            _md.update(abyFinal, 0, n > 16 ? 16 : n);\n        }\n        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n        for (int j = 0, i = key.length; i != 0; i >>>= 1) {\n            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);\n        }\n        final StringBuilder sbPasswd = new StringBuilder();\n        sbPasswd.append(MAGIC);\n        sbPasswd.append(new String(salt));\n        sbPasswd.append(\'$\');\n        abyFinal = _md.digest();\n        for (int n = 0; n < 1000; n++) {\n            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");\n            if ((n & 1) != 0) {\n                md3.update(key);\n            } else {\n                md3.update(abyFinal);\n            }\n            if ((n % 3) != 0) {\n                md3.update(salt);\n            }\n            if ((n % 7) != 0) {\n                md3.update(key);\n            }\n            if ((n & 1) != 0) {\n                md3.update(abyFinal);\n            } else {\n                md3.update(key);\n            }\n            abyFinal = md3.digest();\n        }\n        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };\n        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\n        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\n        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\n        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\n        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\n        to64(sbPasswd, anFinal[11], 2);\n        return sbPasswd.toString();\n    }\n', '    private String encode(String str) {\n        StringBuffer buf = new StringBuffer();\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.update(str.getBytes());\n            byte bytes[] = md5.digest();\n            for (int i = 0; i < bytes.length; i++) {\n                String s = Integer.toHexString(bytes[i] & 0xff);\n                if (s.length() == 1) {\n                    buf.append(""0"");\n                }\n                buf.append(s);\n            }\n        } catch (Exception ex) {\n        }\n        return buf.toString();\n    }\n']",896,"    public static String md5Enc(final byte[] file, final byte[]  save) throws NoSuchAlgorithmException {
        if (file == null || file.length == 0) {
            throw new IllegalArgumentException(""Argument 'key' cannot be null or an empty array."");
        }
        if ( save == null ||  save.length == 0) {
            throw new IllegalArgumentException(""Argument 'salt' cannot be null or an empty array."");
        }
        final MessageDigest _mg = MessageDigest.getInstance(""MD5"");
        _mg.update(file);
        _mg.update(MAGIC.getBytes());
        _mg.update( save);
        final MessageDigest mdto = MessageDigest.getInstance(""MD5"");
        mdto.update(file);
        mdto.update( save);
        mdto.update(file);
        byte[] satFinal = mdto.digest();
        for (int num = file.length; num > 0; num -= 16) {
            _mg.update(satFinal, 0, num > 16 ? 16 : num);
        }
        satFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int out = 0, ic = file.length; ic != 0; ic >>>= 1) {
            if ((ic & 1) == 1) _mg.update(satFinal, out, 1); else _mg.update(file, out, 1);
        }
        final StringBuilder ebChainWD = new StringBuilder();
        ebChainWD.append(MAGIC);
        ebChainWD.append(new String( save));
        ebChainWD.append('$');
        satFinal = _mg.digest();
        for (int num = 0; num < 1000; num++) {
            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");
            if ((num & 1) != 0) {
                md3.update(file);
            } else {
                md3.update(satFinal);
            }
            if ((num % 3) != 0) {
                md3.update( save);
            }
            if ((num % 7) != 0) {
                md3.update(file);
            }
            if ((num & 1) != 0) {
                md3.update(satFinal);
            } else {
                md3.update(file);
            }
            satFinal = md3.digest();
        }
        int[] anFinal = new int[] { (satFinal[0] & 0x7f) | (satFinal[0] & 0x80), (satFinal[1] & 0x7f) | (satFinal[1] & 0x80), (satFinal[2] & 0x7f) | (satFinal[2] & 0x80), (satFinal[3] & 0x7f) | (satFinal[3] & 0x80), (satFinal[4] & 0x7f) | (satFinal[4] & 0x80), (satFinal[5] & 0x7f) | (satFinal[5] & 0x80), (satFinal[6] & 0x7f) | (satFinal[6] & 0x80), (satFinal[7] & 0x7f) | (satFinal[7] & 0x80), (satFinal[8] & 0x7f) | (satFinal[8] & 0x80), (satFinal[9] & 0x7f) | (satFinal[9] & 0x80), (satFinal[10] & 0x7f) | (satFinal[10] & 0x80), (satFinal[11] & 0x7f) | (satFinal[11] & 0x80), (satFinal[12] & 0x7f) | (satFinal[12] & 0x80), (satFinal[13] & 0x7f) | (satFinal[13] & 0x80), (satFinal[14] & 0x7f) | (satFinal[14] & 0x80), (satFinal[15] & 0x7f) | (satFinal[15] & 0x80) };
        to64(ebChainWD, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
        to64(ebChainWD, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
        to64(ebChainWD, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
        to64(ebChainWD, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
        to64(ebChainWD, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
        to64(ebChainWD, anFinal[11], 2);
        return ebChainWD.toString();
    }
",1,1,1,-1,"md5Crypt,key,salt,_md,md2,abyFinal,n,j,i,sbPasswd,md3","md5Crypt:1.7559206163561023e-07,key:3.750259811813767e-06,salt:1.5561645095412794e-06,_md:2.036223540434966e-06,md2:1.1222856538789767e-06,abyFinal:3.050039480398367e-06,n:3.608497413429054e-07,j:1.7398112529032941e-07,i:-5.154996304898649e-08,sbPasswd:2.008300643783432e-07,md3:-2.1479151270411036e-07,",10,103,"abyFinal:satFinal,n:num,i:ic,key:file,j:out,_md:_mg,md2:mdto,md5Crypt:md5Enc,salt: save,md3:md3,sbPasswd:ebChainWD,",Greedy,,
,,,,,,,,,,,,,,,
197,"['18504192', '15797402', '    static void copyFile(File in, File out) throws IOException {\n        FileChannel source = new FileInputStream(in).getChannel();\n        FileChannel destination = new FileOutputStream(out).getChannel();\n        source.transferTo(0, source.size(), destination);\n        source.close();\n        destination.close();\n    }\n', '    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {\n        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);\n        if (name != null && wanted.containsKey(name)) {\n            FileOutputStream out = new FileOutputStream(wanted.get(name));\n            IOUtils.copy(stream, out);\n            out.close();\n        } else {\n            if (downstreamParser != null) {\n                downstreamParser.parse(stream, handler, metadata, context);\n            }\n        }\n    }\n']",68,,1,1,,-3,"copyFile,in,out,source,destination",,,,,Greedy,,
,,,,,,,,,,,,,,,
198,"['7351534', '8770016', '    public static InputStream getStreamFromSystemIdentifier(String systemId, EntityResolver resolver) throws Exception {\n        InputSource source = null;\n        InputStream stream = null;\n        if (resolver != null) {\n            try {\n                source = resolver.resolveEntity(null, systemId);\n            } catch (Exception e) {\n                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to resolve \'"" + systemId + ""\'"");\n                LogService.instance().log(LogService.ERROR, e);\n            }\n        }\n        if (source != null) {\n            try {\n                stream = source.getByteStream();\n            } catch (Exception e) {\n                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to get bytestream from \'"" + source.getSystemId() + ""\'"");\n                LogService.instance().log(LogService.ERROR, e);\n            }\n        }\n        if (stream == null) {\n            URL url = new URL(systemId);\n            stream = url.openStream();\n        }\n        return stream;\n    }\n', '    public InputStream loadResource(String location) throws GenericConfigException {\n        URL url = getURL(location);\n        try {\n            return url.openStream();\n        } catch (java.io.IOException e) {\n            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);\n        }\n    }\n']",181,"    public static InputStream getStreamFromSystemIdifiers(String ystemIs, EntityResolver resolver) throws Exception {
        InputSource reader = null;
        InputStream null = null;
        if (resolver != null) {
            try {
                reader = resolver.resolveEntity(null, ystemIs);
            } catch (Exception e) {
                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to resolve '"" + ystemIs + ""'"");
                LogService.instance().log(LogService.ERROR, e);
            }
        }
        if (reader != null) {
            try {
                null = reader.getByteStream();
            } catch (Exception e) {
                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to get bytestream from '"" + reader.getSystemId() + ""'"");
                LogService.instance().log(LogService.ERROR, e);
            }
        }
        if (null == null) {
            URL browser = new URL(ystemIs);
            null = browser.openStream();
        }
        return null;
    }
",0,0,0,-1,"getStreamFromSystemIdentifier,systemId,resolver,source,stream,url","getStreamFromSystemIdentifier:-1.1920928955078126e-08,systemId:2.384185791015625e-08,resolver:-3.5762786865234374e-08,source:-8.940696716308594e-08,stream:-8.940696716308594e-08,url:-1.1920928955078126e-08,",5,17,"systemId:ystemIs,resolver:resolver,source:reader,getStreamFromSystemIdentifier:getStreamFromSystemIdifiers,stream:null,url:browser,",Greedy,,
,,,,,,,,,,,,,,,
199,"['350482', '742465', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",201,"    public static void  doVersionTest(View iew) {
        iew.showWaitCursor();
        try {
            URL http = new URL(jEdit.getProperty(""version-check.url""));
            InputStream ln = http.openStream();
            BufferedReader ln = new BufferedReader(new InputStreamReader(ln));
            String line;
            String deployBuilt = null;
            String devbuild = null;
            while ((line = ln.readLine()) != null) {
                if (line.startsWith("".build"")) deployBuilt = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) devbuild = line.substring(12).trim();
            }
            ln.close();
            if (deployBuilt != null && devbuild != null) {
                 doVersionTest(iew, devbuild, deployBuilt);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(iew, ""read-error"", args);
        }
        iew.hideWaitCursor();
    }
",1,1,1,-1,"doVersionCheck,view,url,in,bin,line,develBuild,stableBuild","doVersionCheck:-9.485653468540736e-06,view:1.4273183686392648e-05,url:1.070329121180943e-05,in:1.5582357134137832e-05,bin:-7.047184876033237e-05,line:-4.195741244724819e-05,develBuild:-2.7358531951904297e-05,stableBuild:-2.943617956978934e-05,",7,22,"in:ln,line:line,develBuild:deployBuilt,stableBuild:devbuild,url:http,bin:ln,doVersionCheck: doVersionTest,view:iew,",Greedy,,
,,,,,,,,,,,,,,,
200,"['6271502', '18613870', '    @Override\n    public InputStream getResourceByClassName(String className) {\n        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");\n        if (url == null) {\n            return null;\n        } else {\n            try {\n                return url.openStream();\n            } catch (IOException e) {\n                return null;\n            }\n        }\n    }\n', '    private static void copyFile(File src, File dst) throws IOException {\n        FileChannel in = new FileInputStream(src).getChannel();\n        FileChannel out = new FileOutputStream(dst).getChannel();\n        in.transferTo(0, in.size(), out);\n        in.close();\n        out.close();\n    }\n']",60,"    @Override
    public InputStream getResourceByFileNames(String className) {
        URL name = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (name == null) {
            return null;
        } else {
            try {
                return name.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
",0,0,0,-1,"getResourceByClassName,className,url","getResourceByClassName:4.510084788004557e-06,className:1.1086463928222656e-05,url:6.729364395141602e-05,",2,4,"className:className,url:name,getResourceByClassName:getResourceByFileNames,",Greedy,,
,,,,,,,,,,,,,,,
201,"['9826240', '14691829', '    private boolean checkHashBack(Facade facade, HttpServletRequest req) {\n        String txtTransactionID = req.getParameter(""txtTransactionID"");\n        String txtOrderTotal = req.getParameter(""txtOrderTotal"");\n        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);\n        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);\n        String txtHashBack = req.getParameter(""txtHashBack"");\n        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);\n        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;\n        MessageDigest digest;\n        try {\n            digest = java.security.MessageDigest.getInstance(""MD5"");\n            digest.update(securityValue.getBytes());\n            byte[] array = digest.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            String hash = sb.toString();\n            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + hash + "" "" + txtHashBack);\n            if (txtHashBack.equals(hash)) {\n                return true;\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n', '    public static String getMD5Hash(String in) {\n        StringBuffer result = new StringBuffer(32);\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.update(in.getBytes());\n            Formatter f = new Formatter(result);\n            for (byte b : md5.digest()) {\n                f.format(""%02x"", b);\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return result.toString();\n    }\n']",248,"    private boolean checkLockDown(Facade facade, HttpServletRequest request) {
        String xtTransactionID = request.getParameter(""txtTransactionID"");
        String txtTradeBase = request.getParameter(""txtOrderTotal"");
        String txtServerId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);
        String txtArtCocurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);
        String xtHashback = request.getParameter(""txtHashBack"");
        String hoAseder = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);
        String SecurityValue = txtServerId + txtArtCocurrency + txtTradeBase + hoAseder + xtTransactionID;
        MessageDigest dest;
        try {
            dest = java.security.MessageDigest.getInstance(""MD5"");
            dest.update(SecurityValue.getBytes());
            byte[] response = dest.dest();
            StringBuffer bps = new StringBuffer();
            for (int msg = 0; msg < response.length; ++msg) {
                int be = response[msg] & 0xFF;
                if (be < 0x10) bps.append('0');
                bps.append(Integer.toHexString(be));
            }
            String href = bps.toString();
            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + href + "" "" + xtHashback);
            if (xtHashback.equals(href)) {
                return true;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return false;
    }
",1,1,1,-1,"checkHashBack,facade,req,txtTransactionID,txtOrderTotal,txtShopId,txtArtCurrency,txtHashBack,hashSeed,securityValue,digest,array,sb,j,b,hash","checkHashBack:4.1464100713315216e-08,facade:3.052794415017833e-06,req:3.234199855638587e-06,txtTransactionID:1.1920928955078125e-07,txtOrderTotal:1.6585640285326086e-07,txtShopId:-7.256217624830164e-08,txtArtCurrency:-2.539676168690557e-07,txtHashBack:3.731769064198369e-07,hashSeed:5.131182463272758e-07,securityValue:6.7120013029679e-07,digest:-2.3582707280698028e-06,array:1.0106874548870584e-07,sb:-8.189159890879755e-07,j:-1.3994133990743884e-06,b:2.798826798148777e-07,hash:-1.6326489655867865e-07,",15,42,"txtTransactionID:xtTransactionID,txtOrderTotal:txtTradeBase,txtShopId:txtServerId,txtArtCurrency:txtArtCocurrency,hashSeed:hoAseder,securityValue:SecurityValue,hash:href,digest:dest,j:msg,facade:facade,b:be,req:request,txtHashBack:xtHashback,checkHashBack:checkLockDown,array:response,sb:bps,",Greedy,,
,,,,,,,,,,,,,,,
202,"['10385815', '6403868', '    public static void copy(String fileFrom, String fileTo) throws IOException {\n        FileInputStream inputStream = null;\n        FileOutputStream outputStream = null;\n        FileChannel inputChannel = null;\n        FileChannel outputChannel = null;\n        try {\n            inputStream = new FileInputStream(fileFrom);\n            outputStream = new FileOutputStream(fileTo);\n            inputChannel = inputStream.getChannel();\n            outputChannel = outputStream.getChannel();\n            inputChannel.transferTo(0, inputChannel.size(), outputChannel);\n        } finally {\n            try {\n                inputChannel.close();\n            } finally {\n                try {\n                    outputChannel.close();\n                } finally {\n                    try {\n                        inputStream.close();\n                    } finally {\n                        outputStream.close();\n                    }\n                }\n            }\n        }\n    }\n', '    private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n        File oldlog = null;\n        try {\n            boolean oldClassCopied = false;\n            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);\n            if (upgrade) {\n                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);\n                if (destPath.equals(lastVerPath)) {\n                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");\n                    if (!destPath.renameTo(bkdir)) {\n                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                    }\n                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                    lastVerPath = bkdir;\n                } else {\n                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                }\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n            } else {\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n            }\n            dirty_ = true;\n            File[] ls = destPath.listFiles();\n            for (int i = 0; i < ls.length; i++) {\n                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();\n            }\n            byte[] buf = new byte[0];\n            int read = 0;\n            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                if (outClassFile.exists() && !outClassFile.delete()) {\n                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outClassFile.getName()));\n                }\n                final FileOutputStream out = new FileOutputStream(outClassFile);\n                final FileInputStream in = new FileInputStream(fileWithArchive_);\n                if (installClassOffset_ > 0) {\n                    in.skip(installClassOffset_);\n                }\n                buf = new byte[0];\n                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];\n                read = in.read(buf, 0, buf.length);\n                out.write(buf, 0, read);\n                out.close();\n                in.close();\n            }\n            final FileInputStream in = new FileInputStream(fileWithArchive_);\n            if (jarOffset_ > 0) {\n                in.skip(jarOffset_);\n            }\n            JarInputStream jar = new JarInputStream(in);\n            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");\n            if (outJarFile.exists() && !outJarFile.delete()) {\n                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outJarFile.getName()));\n            }\n            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n            ZipEntry entry = jar.getNextEntry();\n            final int bufSize = 32768;\n            buf = new byte[bufSize];\n            while (entry != null) {\n                String entryName = entry.getName();\n                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {\n                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {\n                    FileOutputStream out = null;\n                    try {\n                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                        VAGlobals.copyStream(jar, out, buf);\n                    } catch (IOException e) {\n                        throw e;\n                    } finally {\n                        if (out != null) out.close();\n                    }\n                } else if (!entryName.endsWith("".zip"")) {\n                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);\n                    ZipEntry outEntry = new ZipEntry(entryName);\n                    CRC32 crc = new CRC32();\n                    outJar.putNextEntry(outEntry);\n                    int size = 0;\n                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n                        size += read;\n                        if (read == 0) {\n                            Thread.yield();\n                        } else {\n                            outJar.write(buf, 0, read);\n                            crc.update(buf, 0, read);\n                        }\n                    }\n                    outEntry.setSize(size);\n                    outEntry.setCrc(crc.getValue());\n                    outJar.flush();\n                    outJar.closeEntry();\n                }\n                jar.closeEntry();\n                entry = jar.getNextEntry();\n            }\n            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");\n            Properties prop = new Properties();\n            try {\n                prop.load(pin);\n            } catch (IOException exc) {\n            }\n            if (language == null) language = ""default"";\n            prop.setProperty(""vainstall.destination.language"", language);\n            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");\n            CRC32 crc = new CRC32();\n            outEntry.setCrc(crc.getValue());\n            outEntry.setSize(prop.size());\n            outJar.putNextEntry(outEntry);\n            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);\n            outEntry.setCrc(crc.getValue());\n            outJar.closeEntry();\n            jar.close();\n            outJar.close();\n            in.close();\n        } catch (IOException e) {\n            String message = e.getLocalizedMessage();\n            message += ""\\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");\n            e.printStackTrace();\n            exitOnError(new IOException(message));\n        }\n        return oldlog;\n    }\n']",131,,1,1,,-3,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
203,"['2642914', '8490297', '    private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\n        File f = new File(path);\n        String entryName = base + f.getName();\n        FileInputStream goIn = new FileInputStream(f);\n        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n        taro.putArchiveEntry(tarEntry);\n        if (f.isFile()) {\n            IOUtils.copy(goIn, taro);\n            taro.closeArchiveEntry();\n        } else {\n            taro.closeArchiveEntry();\n            File[] children = f.listFiles();\n            if (children != null) {\n                for (File child : children) {\n                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");\n                }\n            }\n        }\n        taro.close();\n        goIn.close();\n    }\n', '    public static void copyFile(File src, File dst) throws IOException {\n        try {\n            InputStream in = new FileInputStream(src);\n            OutputStream out = new FileOutputStream(dst);\n            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n            int len;\n            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e1) {\n            MLUtil.runtimeError(e1, src.toString());\n        } catch (IOException e2) {\n            MLUtil.runtimeError(e2, src.toString());\n        }\n    }\n']",164,"    private static void addFileToTarGzip(TarArchiveOutputStream tosa, String w, String default) throws IOException {
        File fac = new File(w);
        String rowType = default + fac.getName();
        FileInputStream geIns = new FileInputStream(fac);
        TarArchiveEntry  tarEnt = new TarArchiveEntry(fac, rowType);
        tosa.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        tosa.putArchiveEntry( tarEnt);
        if (fac.isFile()) {
            IOUtils.copy(geIns, tosa);
            tosa.closeArchiveEntry();
        } else {
            tosa.closeArchiveEntry();
            File[] json = fac.listFiles();
            if (json != null) {
                for (File cell : json) {
                    addFileToTarGzip(tosa, cell.getAbsolutePath(), rowType + ""/"");
                }
            }
        }
        tosa.close();
        geIns.close();
    }
",1,1,1,-1,"addFileToTarGz,taro,path,base,f,entryName,goIn,tarEntry,children,child","addFileToTarGz:3.8291468764796405e-07,taro:2.1385424064867426e-06,path:7.224805427320076e-09,base:1.0837208140980115e-07,f:4.985115744850852e-07,entryName:2.167441628196023e-07,goIn:-5.635348233309659e-07,tarEntry:1.517209139737216e-07,children:6.502324884588068e-08,child:8.669766512784091e-08,",10,33,"addFileToTarGz:addFileToTarGzip,taro:tosa,path:w,base:default,f:fac,entryName:rowType,tarEntry: tarEnt,child:cell,goIn:geIns,children:json,",Greedy,,
,,,,,,,,,,,,,,,
204,"['22603577', '18989018', '    public static String getFileContentFromPlugin(String path) {\n        URL url = getURLFromPlugin(path);\n        StringBuffer sb = new StringBuffer();\n        try {\n            Scanner scanner = new Scanner(url.openStream());\n            while (scanner.hasNextLine()) {\n                String line = scanner.nextLine();\n                sb.append(line + ""\\n"");\n            }\n            scanner.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return """";\n        }\n        return sb.toString();\n    }\n', '    protected void doSetInput(IEditorInput input, IProgressMonitor monitor) throws CoreException {\n        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n        IFileFormat format = null;\n        Object source = null;\n        InputStream in = null;\n        try {\n            IPath path;\n            if (input instanceof IStorageEditorInput) {\n                IStorage s = ((IStorageEditorInput) input).getStorage();\n                in = s.getContents();\n                if (s instanceof IFile) {\n                    IFile file = (IFile) s;\n                    path = file.getRawLocation();\n                    if (root.exists(path)) {\n                        path = root.getLocation().append(path);\n                    }\n                    source = path.toFile();\n                }\n            } else if (input instanceof IPathEditorInput) {\n                path = ((IPathEditorInput) input).getPath();\n                source = path.toFile();\n            } else if (input instanceof IURIEditorInput) {\n                URI uri = ((IURIEditorInput) input).getURI();\n                if (URIUtil.isFileURI(uri)) {\n                    source = URIUtil.toFile(uri);\n                } else {\n                    URL url = URIUtil.toURL(uri);\n                    in = url.openStream();\n                }\n            }\n            if (source == null) {\n                if (!in.markSupported()) {\n                    in = new BufferedInputStream(in);\n                }\n                in.mark(10);\n                source = in;\n            }\n            IContentDescription cd = Platform.getContentTypeManager().getDescriptionFor(in, input.getName(), new QualifiedName[] { ImageCore.VALID_FORMATS });\n            if (in != null) {\n                in.reset();\n            }\n            Collection<?> valid = (Collection<?>) cd.getProperty(ImageCore.VALID_FORMATS);\n            if (valid.isEmpty()) throw new CoreException(new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""Unsupported file format.""));\n            ImageInputStream stream = ImageIO.createImageInputStream(source);\n            format = (IFileFormat) valid.iterator().next();\n            IDocument document = format.decode(stream, monitor);\n            setDocument(document);\n        } catch (IOException e) {\n            Status status = new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""IO Error"", e);\n            throw new CoreException(status);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n        super.setInput(input);\n    }\n']",100,"    public static String getFileContentsForPlugin(String log) {
        URL file = getURLFromPlugin(log);
        StringBuffer wb = new StringBuffer();
        try {
            Scanner  Scanifier = new Scanner(file.openStream());
            while ( Scanifier.hasNextLine()) {
                String statement =  Scanifier.nextLine();
                wb.append(statement + ""
"");
            }
             Scanifier.close();
        } catch (Exception e) {
            e.printStackTrace();
            return """";
        }
        return wb.toString();
    }
",0,0,0,-1,"getFileContentFromPlugin,path,url,sb,scanner,line","getFileContentFromPlugin:7.637909480503627e-06,path:1.0907649993896484e-05,url:3.4885747092110766e-05,sb:3.2046011516026086e-05,scanner:0.00011818749564034597,line:4.930155617850167e-06,",6,14,"url:file,scanner: Scanifier,path:log,sb:wb,getFileContentFromPlugin:getFileContentsForPlugin,line:statement,",Greedy,,
,,,,,,,,,,,,,,,
205,"['7122523', '8778962', '    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);\n        if (delegate == null) {\n            ActionErrors errors = new ActionErrors();\n            errors.add(null, new ActionError(""errors.session""));\n            saveErrors(request, errors);\n            return mapping.findForward(""fail"");\n        }\n        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();\n        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();\n        String urlSonido = traAyudaPantalla.getUrlSonido();\n        if (urlSonido == null) {\n            return null;\n        }\n        URL url = new URL(urlSonido);\n        URLConnection urlConnection = url.openConnection();\n        urlConnection.connect();\n        String tipoMime = urlConnection.getContentType();\n        log.debug(""Tipo Mime: "" + tipoMime);\n        Map audioOptions = new HashMap();\n        if (tipoMime.indexOf(""audio"") != -1 || tipoMime.indexOf(""asf"") != -1 || tipoMime.equals(""unknown/unknown"")) {\n            audioOptions.put(""id"", ""MediaPlayer"");\n            audioOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");\n            audioOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");\n            audioOptions.put(""mimeType"", ""application/x-mplayer2"");\n            audioOptions.put(""urlSonido"", urlSonido);\n            audioOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");\n        } else if (tipoMime.indexOf(""real"") != -1) {\n            audioOptions.put(""id"", ""RVOCX"");\n            audioOptions.put(""codeBase"", """");\n            audioOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");\n            audioOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");\n            audioOptions.put(""urlSonido"", urlSonido);\n            audioOptions.put(""pluginSpage"", """");\n        }\n        request.setAttribute(""audioOptions"", audioOptions);\n        log.debug(""entra success"");\n        return mapping.findForward(""success"");\n    }\n', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",344,"    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);
        if (delegate == null) {
            ActionErrors values = new ActionErrors();
            values.add(null, new ActionError(""errors.session""));
            saveErrors(request, values);
            return mapping.findForward(""fail"");
        }
        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();
        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();
        String strSonido = traAyudaPantalla.getUrlSonido();
        if (strSonido == null) {
            return null;
        }
        URL html = new URL(strSonido);
        URLConnection httpConnector = html.openConnection();
        httpConnector.connect();
        String tipologyMimer = httpConnector.getContentType();
        log.debug(""Tipo Mime: "" + tipologyMimer);
        Map applicationOptions = new HashMap();
        if (tipologyMimer.indexOf(""audio"") != -1 || tipologyMimer.indexOf(""asf"") != -1 || tipologyMimer.equals(""unknown/unknown"")) {
            applicationOptions.put(""id"", ""MediaPlayer"");
            applicationOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");
            applicationOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");
            applicationOptions.put(""mimeType"", ""application/x-mplayer2"");
            applicationOptions.put(""urlSonido"", strSonido);
            applicationOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");
        } else if (tipologyMimer.indexOf(""real"") != -1) {
            applicationOptions.put(""id"", ""RVOCX"");
            applicationOptions.put(""codeBase"", """");
            applicationOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");
            applicationOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");
            applicationOptions.put(""urlSonido"", strSonido);
            applicationOptions.put(""pluginSpage"", """");
        }
        request.setAttribute(""audioOptions"", applicationOptions);
        log.debug(""entra success"");
        return mapping.findForward(""success"");
    }
",0,0,0,-1,"execute,mapping,form,request,response,delegate,errors,ayudaPantalla,traAyudaPantalla,urlSonido,url,urlConnection,tipoMime,audioOptions","execute:-6.914138793945312e-08,mapping:-4.434585571289062e-07,form:-8.58306884765625e-08,request:-1.1444091796875e-06,response:-9.775161743164063e-08,delegate:-1.0514259338378907e-06,errors:-7.867813110351562e-07,ayudaPantalla:5.7220458984375e-08,traAyudaPantalla:-5.7220458984375e-08,urlSonido:2.5033950805664064e-07,url:1.2969970703125e-06,urlConnection:2.903938293457031e-06,tipoMime:7.581710815429687e-07,audioOptions:3.4046173095703128e-06,",6,33,"request:request,delegate:delegate,ayudaPantalla:ayudaPantalla,traAyudaPantalla:traAyudaPantalla,execute:execute,mapping:mapping,form:form,response:response,urlSonido:strSonido,url:html,tipoMime:tipologyMimer,urlConnection:httpConnector,errors:values,audioOptions:applicationOptions,",Greedy,,
,,,,,,,,,,,,,,,
206,"['14820302', '11968328', '    protected void innerProcess(ProcessorURI curi) throws InterruptedException {\n        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);\n        ReplayCharSequence cs = null;\n        try {\n            cs = curi.getRecorder().getReplayCharSequence();\n        } catch (Exception e) {\n            curi.getNonFatalFailures().add(e);\n            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());\n            return;\n        }\n        MessageDigest digest = null;\n        try {\n            try {\n                digest = MessageDigest.getInstance(SHA1);\n            } catch (NoSuchAlgorithmException e1) {\n                e1.printStackTrace();\n                return;\n            }\n            digest.reset();\n            String s = null;\n            if (regexpr != null) {\n                s = cs.toString();\n            } else {\n                Matcher m = regexpr.matcher(cs);\n                s = m.replaceAll("" "");\n            }\n            digest.update(s.getBytes());\n            byte[] newDigestValue = digest.digest();\n            curi.setContentDigest(SHA1, newDigestValue);\n        } finally {\n            if (cs != null) {\n                try {\n                    cs.close();\n                } catch (IOException ioe) {\n                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));\n                }\n            }\n        }\n    }\n', '    public static String getMD5(String _pwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(_pwd.getBytes());\n            return toHexadecimal(new String(md.digest()).getBytes());\n        } catch (NoSuchAlgorithmException x) {\n            x.printStackTrace();\n            return """";\n        }\n    }\n']",254,,1,1,,-3,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,,,,Greedy,,
,,,,,,,,,,,,,,,
207,"['13657103', '5951961', '    private void forBundle(BundleManipulator manip) {\n        ByteArrayOutputStream bout = null;\n        try {\n            bout = new ByteArrayOutputStream();\n            ZipOutputStream zout = new ZipOutputStream(bout);\n            Bundle bundle = getBundle();\n            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);\n            if (files != null) {\n                while (files.hasMoreElements()) {\n                    URL url = files.nextElement();\n                    String name = url.getFile();\n                    if (name.startsWith(""/"")) {\n                        name = name.substring(1);\n                    }\n                    if (manip.includeEntry(name)) {\n                        zout.putNextEntry(new ZipEntry(name));\n                        IOUtils.copy(url.openStream(), zout);\n                    }\n                }\n            }\n            manip.finish(bundle, zout);\n            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());\n            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));\n            mf.write(zout);\n            zout.close();\n            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");\n            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n            }\n            pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n            tmpFile.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(bout);\n        }\n    }\n', '    public static void main(String[] args) {\n        try {\n            URL url = new URL(args[0]);\n            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();\n            httpCon.setDoOutput(true);\n            httpCon.setRequestMethod(""PUT"");\n            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());\n            out.write(""fatal error"");\n            out.close();\n            System.out.println(""end"");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",349,,0,0,,-3,"forBundle,manip,bout,zout,bundle,files,url,name,mf,tmpFile,ref",,,,,Greedy,,
,,,,,,,,,,,,,,,
208,"['18504192', '9033639', '    static void copyFile(File in, File out) throws IOException {\n        FileChannel source = new FileInputStream(in).getChannel();\n        FileChannel destination = new FileOutputStream(out).getChannel();\n        source.transferTo(0, source.size(), destination);\n        source.close();\n        destination.close();\n    }\n', '    public void testHttpsConnection() throws Throwable {\n        setUpStoreProperties();\n        try {\n            SSLContext ctx = getContext();\n            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);\n            TestHostnameVerifier hnv = new TestHostnameVerifier();\n            HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n            URL url = new URL(""https://localhost:"" + ss.getLocalPort());\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);\n            checkConnectionStateParameters(connection, peerSocket);\n            connection.connect();\n        } finally {\n            tearDownStoreProperties();\n        }\n    }\n']",68,,0,0,,-3,"copyFile,in,out,source,destination",,,,,Greedy,,
,,,,,,,,,,,,,,,
209,"['364438', '536614', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",765,"    public void compprocess(File url, File test) throws IOException {
        InputStream reader = new BufferedInputStream(new FileInputStream(url));
        DcmParser d = pfact.newDcmParser(reader);
        Dataset aws = fact.newDataset();
        d.setDcmHandler(aws.getDcmHandler());
        try {
            FileFormat format = d.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            d.parseDcmFile(format, Tags.PixelData);
            if (aws.contains(Tags.StudyInstanceUID) || aws.contains(Tags.SeriesInstanceUID) || aws.contains(Tags.SOPInstanceUID) || aws.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not compprocess"");
                return;
            }
            boolean haspixelData = d.getReadTag() == Tags.PixelData;
            boolean  invalidicate = haspixelData && aws.getInt(Tags.BitsAllocated, 0) == 12;
            int pxls = d.getReadLength();
            if (haspixelData) {
                if ( invalidicate) {
                    aws.putUS(Tags.BitsAllocated, 16);
                    pxls = pxls * 4 / 3;
                }
                if (pxls != (aws.getInt(Tags.BitsAllocated, 0) >>> 3) * aws.getInt(Tags.Rows, 0) * aws.getInt(Tags.Columns, 0) * aws.getInt(Tags.NumberOfFrames, 1) * aws.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + src + "": mismatch pixel data length!"" + "" => do not compprocess"");
                    return;
                }
            }
            aws.putUI(Tags.StudyInstanceUID, uid(studyUID));
            aws.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            aws.putUI(Tags.SOPInstanceUID, uid(instUID));
            aws.putUI(Tags.SOPClassUID, classUID);
            if (!aws.contains(Tags.NumberOfSamples)) {
                aws.putUS(Tags.NumberOfSamples, 1);
            }
            if (!aws.contains(Tags.PhotometricInterpretation)) {
                aws.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                aws.setFileMetaInfo(fact.newFileMetaInfo(aws, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(test));
            try {
            } finally {
                aws.writeFile(out, encodeParam());
                if (haspixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxls + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxls);
                    out.write((byte) (pxls >> 8));
                    out.write((byte) (pxls >> 16));
                    out.write((byte) (pxls >> 24));
                }
                if ( invalidicate) {
                    int b2, b3;
                    for (; pxls > 0; pxls -= 3) {
                        out.write(reader.read());
                        b2 = reader.read();
                        b3 = reader.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxls > 0; --pxls) {
                        out.write(reader.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            reader.close();
        }
    }
",1,1,0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-1.2439230213994565e-07,src:6.478765736455502e-08,dest:1.5289887138034985e-07,in:-1.0884326437245245e-07,p:-1.7881393432617188e-07,ds:-2.798826798148777e-07,format:-3.887259441873302e-08,hasPixelData:-8.292820142663043e-08,inflate:1.5549037767493206e-08,pxlen:-6.737916365913722e-08,out:1.225782477337381e-06,",9,67,"src:url,in:reader,p:d,ds:aws,convert:compprocess,dest:test,pxlen:pxls,hasPixelData:haspixelData,inflate: invalidicate,",Greedy,,
,,,,,,,,,,,,,,,
210,"['7044153', '19006212', '    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {\n        try {\n            StringBuilder dataSB = new StringBuilder();\n            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));\n            dataSB.append(\'=\');\n            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));\n            dataSB.append(\'&\');\n            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));\n            dataSB.append(\'=\');\n            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));\n            dataSB.append(\'&\');\n            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));\n            dataSB.append(\'=\');\n            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));\n            dataSB.append(\'&\');\n            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));\n            dataSB.append(\'=\');\n            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));\n            dataSB.append(\'&\');\n            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));\n            dataSB.append(\'=\');\n            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));\n            ByteArrayOutputStream trace = new ByteArrayOutputStream();\n            ex.printStackTrace(new PrintStream(trace));\n            dataSB.append(\'&\');\n            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));\n            dataSB.append(\'=\');\n            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));\n            if (config != null) {\n                dataSB.append(\'&\');\n                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));\n                dataSB.append(\'=\');\n                dataSB.append(URLEncoder.encode(config, ""UTF-8""));\n            }\n            if (prob != null) {\n                dataSB.append(\'&\');\n                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));\n                dataSB.append(\'=\');\n                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));\n            }\n            URL url = new URL(errorServerURL);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(dataSB.toString());\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String response = null;\n            String line = null;\n            while ((line = rd.readLine()) != null) {\n                if (response == null) response = line; else System.out.println(line);\n            }\n            wr.close();\n            rd.close();\n            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);\n        } catch (IOException ex2) {\n            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());\n        }\n    }\n', '    public void Load(String fname) throws Exception {\n        File f = null;\n        try {\n            if ("""".equals(fname) || fname == null) throw new Exception();\n            System.out.println(""Loading mapfile "" + fname);\n        } catch (Exception e) {\n            throw new Exception(""File not found"");\n        }\n        aType = null;\n        fieldtype.clear();\n        creatures.clear();\n        aElement = new String("""");\n        content = null;\n        Ax = -1;\n        Ay = -1;\n        aTemplate = -1;\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        data_read = 0;\n        URL url = this.game.mainClass.getClassLoader().getResource(fname);\n        if (url == null) {\n            throw new Exception(""Can\'t load map from : "" + fname);\n        }\n        try {\n            SAXParser parser = factory.newSAXParser();\n            parser.parse(url.openStream(), this);\n        } catch (Exception e) {\n            System.out.println(""Can\'t open XML : "" + e);\n        }\n        for (int i = 0; i < fieldtype.size(); i++) {\n            System.out.println((MapField) fieldtype.get(i));\n        }\n        game.player.setpos(start_x, start_y);\n        System.out.println(""Player starting position set"");\n        start_x = -1;\n        start_y = -1;\n        System.out.println(""Map \\"""" + fname + ""\\"" loaded"");\n    }\n']",606,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder ataNB = new StringBuilder();
            ataNB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            ataNB.append('=');
            ataNB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            ataNB.append('&');
            ataNB.append(URLEncoder.encode(""version"", ""UTF-8""));
            ataNB.append('=');
            ataNB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            ataNB.append('&');
            ataNB.append(URLEncoder.encode(""os"", ""UTF-8""));
            ataNB.append('=');
            ataNB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            ataNB.append('&');
            ataNB.append(URLEncoder.encode(""user"", ""UTF-8""));
            ataNB.append('=');
            ataNB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            ataNB.append('&');
            ataNB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            ataNB.append('=');
            ataNB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream address = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(address));
            ataNB.append('&');
            ataNB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            ataNB.append('=');
            ataNB.append(URLEncoder.encode(address.toString(), ""UTF-8""));
            if (config != null) {
                ataNB.append('&');
                ataNB.append(URLEncoder.encode(""config"", ""UTF-8""));
                ataNB.append('=');
                ataNB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                ataNB.append('&');
                ataNB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                ataNB.append('=');
                ataNB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(ataNB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
",0,0,0,-1,"sendExceptionToServer,server,ex,config,prob,dataSB,trace","sendExceptionToServer:-3.0436414353390955e-08,server:0.0,ex:1.5218207176695478e-08,config:4.5654621530086436e-08,prob:-7.609103588347739e-09,dataSB:7.533012552464262e-07,trace:6.087282870678191e-08,",2,36,"sendExceptionToServer:sendExceptionToServer,server:server,ex:ex,config:config,prob:prob,dataSB:ataNB,trace:address,",Greedy,,
,,,,,,,,,,,,,,,
211,"['20375440', '411595', '    public static void copyFile(File srcFile, File destFile) throws IOException {\n        InputStream src = new FileInputStream(srcFile);\n        OutputStream dest = new FileOutputStream(destFile);\n        byte buffer[] = new byte[1024];\n        int read = 1;\n        while (read > 0) {\n            read = src.read(buffer);\n            if (read > 0) {\n                dest.write(buffer, 0, read);\n            }\n        }\n        src.close();\n        dest.close();\n    }\n', '    private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(""diff"", "".htm"");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(""<html><head><title>LOC Differences</title>\\n"" + SCRIPT + ""</head>\\n"" + ""<body bgcolor=\'#ffffff\'>\\n"" + ""<div onMouseOver=\\""window.defaultStatus=\'Metrics\'\\"">\\n"");\n        if (addedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");\n            out.write(addedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");\n            out.write(modifiedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");\n            out.write(deletedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        out.write(""<table name=METRICS BORDER>\\n"");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(""<tr><td>Base:&nbsp;</td><td>"");\n            out.write(Long.toString(base));\n            out.write(""</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>"");\n            out.write(Long.toString(deleted));\n            out.write(""</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>"");\n            out.write(Long.toString(modified));\n            out.write(""</td></tr>\\n<tr><td>Added:&nbsp;</td><td>"");\n            out.write(Long.toString(added));\n            out.write(""</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>"");\n            out.write(Long.toString(added + modified));\n            out.write(""</td></tr>\\n"");\n        }\n        out.write(""<tr><td>Total:&nbsp;</td><td>"");\n        out.write(Long.toString(total));\n        out.write(""</td></tr>\\n</table></div>"");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(""</BODY></HTML>"".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }\n']",98,"    public static void CopyDirectory(File subLine, File  destFilename) throws IOException {
        InputStream reader = new FileInputStream(subLine);
        OutputStream result = new FileOutputStream( destFilename);
        byte stream[] = new byte[1024];
        int open = 1;
        while (open > 0) {
            open = reader.open(stream);
            if (open > 0) {
                result.write(stream, 0, open);
            }
        }
        reader.close();
        result.close();
    }
",1,1,1,-1,"copyFile,srcFile,destFile,src,dest,buffer,read","copyFile:3.0994415283203126e-07,srcFile:3.218650817871094e-07,destFile:0.0,src:8.583068847656249e-07,dest:8.940696716308594e-08,buffer:5.543231964111327e-07,read:1.430511474609375e-07,",7,20,"srcFile:subLine,src:reader,destFile: destFilename,dest:result,buffer:stream,read:open,copyFile:CopyDirectory,",Greedy,,
,,,,,,,,,,,,,,,
212,"['14794404', '9081749', '    private String encryptPassword(String password) throws NoSuchAlgorithmException {\n        StringBuffer encryptedPassword = new StringBuffer();\n        MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n        md5.reset();\n        md5.update(password.getBytes());\n        byte digest[] = md5.digest();\n        for (int i = 0; i < digest.length; i++) {\n            String hex = Integer.toHexString(0xFF & digest[i]);\n            if (hex.length() == 1) {\n                encryptedPassword.append(\'0\');\n            }\n            encryptedPassword.append(hex);\n        }\n        return encryptedPassword.toString();\n    }\n', '    private static String encrypt(String password, String encryptType) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(encryptType);\n            md.update(password.getBytes());\n            byte[] hash = md.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                if ((0xff & hash[i]) < 0x10) {\n                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));\n                } else {\n                    hexString.append(Integer.toHexString(0xFF & hash[i]));\n                }\n            }\n            password = hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return password.toUpperCase();\n    }\n']",125,"    private String encryptionPass(String content) throws NoSuchAlgorithmException {
        StringBuffer initializedStatement = new StringBuffer();
        MessageDigest sha5 = MessageDigest.getInstance(""MD5"");
        sha5.reset();
        sha5.update(content.getBytes());
        byte Digests[] = sha5.Digests();
        for (int uri = 0; uri < Digests.length; uri++) {
            String serial = Integer.toHexString(0xFF & Digests[uri]);
            if (serial.length() == 1) {
                initializedStatement.append('0');
            }
            initializedStatement.append(serial);
        }
        return initializedStatement.toString();
    }
",1,1,1,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex","encryptPassword:4.3348832563920456e-08,password:8.019534024325284e-07,encryptedPassword:1.994046297940341e-06,md5:-5.7112086902965204e-06,digest:-2.2649765014648438e-06,i:-3.6413019353693183e-06,hex:-4.876743663441051e-07,",7,22,"md5:sha5,i:uri,encryptPassword:encryptionPass,password:content,digest:Digests,hex:serial,encryptedPassword:initializedStatement,",Greedy,,
,,,,,,,,,,,,,,,
213,"['3558512', '17996547', '    public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n        ensureParsed();\n        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n        parser.setContentPackage(cp);\n        if (on_disk != null) on_disk.delete();\n        on_disk = createTemporaryFile();\n        parser.serialize(on_disk);\n        InputStream in = new FileInputStream(on_disk);\n        IOUtils.copy(in, out);\n    }\n', '    public static File copyFile(File fileToCopy, File copiedFile) {\n        BufferedInputStream in = null;\n        BufferedOutputStream outWriter = null;\n        if (!copiedFile.exists()) {\n            try {\n                copiedFile.createNewFile();\n            } catch (IOException e1) {\n                e1.printStackTrace();\n                return null;\n            }\n        }\n        try {\n            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);\n            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);\n            int c;\n            while ((c = in.read()) != -1) outWriter.write(c);\n            in.close();\n            outWriter.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return copiedFile;\n    }\n']",81,"    public void serializer(OutputStream aos) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser writer = utils.getIMSCPParserFactory().createParser();
        writer.setContentPackage(cp);
        if ( on_download != null)  on_download.delete();
         on_download = createTemporaryFile();
        writer.serializer( on_download);
        InputStream and = new FileInputStream( on_download);
        IOUtils.copy(and, aos);
    }
",1,1,1,-1,"serialize,out,parser,on_disk,in","serialize:8.514949253627231e-08,out:3.0653817313058033e-07,parser:2.5544847760881696e-07,on_disk:-1.1495181492396763e-06,in:-2.724783761160714e-07,",5,14,"parser:writer,serialize:serializer,out:aos,on_disk: on_download,in:and,",Greedy,,
,,,,,,,,,,,,,,,
214,"['15797402', '822452', '    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {\n        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);\n        if (name != null && wanted.containsKey(name)) {\n            FileOutputStream out = new FileOutputStream(wanted.get(name));\n            IOUtils.copy(stream, out);\n            out.close();\n        } else {\n            if (downstreamParser != null) {\n                downstreamParser.parse(stream, handler, metadata, context);\n            }\n        }\n    }\n', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n']",105,,1,1,,-3,"parse,stream,handler,metadata,context,name,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
215,"['13563706', '17557289', '    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String selectedPage = request.getParameter(""SelectedPage"");\n        Page page = null;\n        PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n        if (selectedPage == null) {\n            try {\n                Property pageProp = Property.getProperty(""HomePage"");\n                selectedPage = pageProp.getValue();\n            } catch (PersistentModelException e) {\n                myLogger.info(""Page could not be found due to an exception"");\n                response.sendError(response.SC_NOT_FOUND);\n                return;\n            }\n        }\n        myLogger.info(""Handling Page Request for Page "" + selectedPage);\n        try {\n            if (page == null) {\n                try {\n                    page = Page.getPage(Long.parseLong(selectedPage));\n                } catch (NumberFormatException e) {\n                    List<Page> possiblePage = Page.findByName(selectedPage);\n                    if (possiblePage.size() > 0) {\n                        page = possiblePage.get(0);\n                    } else {\n                        response.sendError(response.SC_NOT_FOUND);\n                        return;\n                    }\n                }\n            }\n            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n                Property pageProp = Property.getProperty(""HomePage"");\n                selectedPage = pageProp.getValue();\n                page = Page.getPage(Long.parseLong(selectedPage));\n            }\n            try {\n                Property property = Property.getProperty(""LogPageRequests"");\n                if (property.getValue().toLowerCase().equals(""true"")) {\n                    String referer = request.getHeader(""Referer"");\n                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n                        referer = "" "";\n                    } else {\n                        if (referer.length() >= 200) {\n                            referer = referer.substring(0, 198);\n                        }\n                    }\n                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n                }\n            } catch (PersistentModelException e) {\n                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);\n            }\n            if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n                HttpSession session = request.getSession();\n                if (session != null) {\n                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");\n                    if (rvm == null) {\n                        rvm = new RecentlyViewedManager();\n                    }\n                    rvm.add(page);\n                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);\n                }\n                PageCacheEntry entry = null;\n                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n                    try {\n                        int pageCacheTime = 60000;\n                        try {\n                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");\n                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n                            pageCacheTime *= 1000;\n                        } catch (PersistentModelException pme) {\n                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");\n                        } catch (NumberFormatException nfe) {\n                        }\n                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n                    } catch (PersistentModelException e) {\n                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);\n                    }\n                }\n                response.setContentType(""text/html"");\n                response.setHeader(""Cache-Control"", ""no-cache"");\n                boolean processed = false;\n                if (entry != null) {\n                    String tempFile = entry.getTempFile();\n                    File file = new File(tempFile);\n                    if (file.exists() && file.isFile() && file.canRead()) {\n                        FileReader reader = new FileReader(file);\n                        BufferedReader br = new BufferedReader(reader);\n                        PrintWriter out = response.getWriter();\n                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\\n"");\n                        while (br.ready()) {\n                            out.write(br.readLine() + ""\\n"");\n                        }\n                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\\n"");\n                        reader.close();\n                        processed = true;\n                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);\n                    } else {\n                        entry.delete();\n                    }\n                }\n                if (!processed) {\n                    PrintWriter out = response.getWriter();\n                    out.write(""<!-- Output produced by iPoint Portal -->\\n"");\n                    PageRenderer renderer = new PageRenderer(page);\n                    long startTime = System.currentTimeMillis();\n                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n                    request.setAttribute(ELConstants.IPOINT_PAGE, page);\n                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n                    renderer.preProcess();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    long renderStart = System.currentTimeMillis();\n                    renderer.render();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\\n"");\n                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n                        if (response instanceof CachingResponseWrapper) {\n                            CachingResponseWrapper crw = (CachingResponseWrapper) response;\n                            crw.flushBuffer();\n                            Property tempProperty = Property.getProperty(""UploadLocation"");\n                            File tempDirectory = new File(tempProperty.getValue());\n                            if (tempDirectory.exists() && tempDirectory.canWrite()) {\n                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);\n                                try {\n                                    FileWriter fw = new FileWriter(file);\n                                    fw.write(crw.getOutput());\n                                    fw.flush();\n                                    fw.close();\n                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n                                } catch (IOException e) {\n                                }\n                            } else {\n                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());\n                            }\n                        }\n                    }\n                }\n            } else {\n                myLogger.info(""Current User is Forbidden from seeing this Page"");\n                response.sendError(response.SC_FORBIDDEN);\n            }\n        } catch (PersistentModelException e) {\n            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);\n            response.sendError(response.SC_NOT_FOUND);\n        } catch (PresentationException pe) {\n            pe.printStackTrace();\n            throw new ServletException(""Error processing the page"", pe);\n        }\n    }\n', '    private static void copyFile(File source, File dest) throws IOException {\n        FileChannel srcChannel = new FileInputStream(source).getChannel();\n        FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        srcChannel.close();\n        dstChannel.close();\n    }\n']",1303,"    public void DoPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""
"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->
"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->
"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
",1,1,0,1,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e","doGet:0.008996981758255142,request:-4.202127456665039e-05,response:-1.4796450331404403e-05,selectedPage:-0.00010069640907081398,page:-0.0002107346380079115,portalRequest:-0.00010026145625758816,pageProp:-1.8927428099486206e-05,possiblePage:-1.4719125386830924e-05,property:-8.631396938014675e-06,referer:4.288956925675676e-05,e:-3.4936376520105315e-05,",1,1,"doGet:DoPut,",Greedy,,
,,,,,,,,,,,,,,,
216,"['9371421', '22752444', '    public static String eventHash(String eventstr) {\n        try {\n            if (md == null) {\n                md = MessageDigest.getInstance(""MD5"");\n            }\n            md.update(eventstr.getBytes(""utf-8""));\n            byte[] theDigest = md.digest();\n            return new BASE64Encoder().encode(theDigest);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n', '    public synchronized String encrypt(String plainText) {\n        String hash = null;\n        try {\n            MessageDigest md = null;\n            try {\n                md = MessageDigest.getInstance(""SHA"");\n            } catch (NoSuchAlgorithmException e) {\n                throw new NoSuchAlgorithmException();\n            }\n            try {\n                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));\n            } catch (UnsupportedEncodingException e) {\n                throw new UnsupportedEncodingException();\n            }\n            byte raw[] = md.digest();\n            hash = (new BASE64Encoder()).encode(raw);\n        } catch (NoSuchAlgorithmException e) {\n            MessageLog.writeErrorMessage(e, this);\n        } catch (UnsupportedEncodingException e) {\n            MessageLog.writeErrorMessage(e, this);\n        }\n        return Util.stripChars(hash);\n    }\n']",94,"    public static String textRender(String eventStr) {
        try {
            if (der == null) {
                der = MessageDigest.getInstance(""MD5"");
            }
            der.update(eventStr.getBytes(""utf-8""));
            byte[] theDigests = der.digest();
            return new BASE64Encoder().encode(theDigests);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
",1,1,1,-1,"eventHash,eventstr,md,theDigest","eventHash:3.655751546223958e-06,eventstr:4.304779900444878e-06,md:-4.688898722330729e-06,theDigest:-3.258387247721354e-06,",4,9,"md:der,theDigest:theDigests,eventHash:textRender,eventstr:eventStr,",Greedy,,
,,,,,,,,,,,,,,,
217,"['18114701', '5744992', '    public InputSource resolveEntity(String publicId, String systemId) {\n        String resolved = getResolvedEntity(publicId, systemId);\n        if (resolved != null) {\n            try {\n                InputSource iSource = new InputSource(resolved);\n                iSource.setPublicId(publicId);\n                URL url = new URL(resolved);\n                InputStream iStream = url.openStream();\n                iSource.setByteStream(iStream);\n                return iSource;\n            } catch (Exception e) {\n                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);\n                return null;\n            }\n        }\n        return null;\n    }\n', '    public void dorequest(Map<String, String> ps, String method) throws IOException {\n        StringBuffer httpResponse = new StringBuffer();\n        URL ourl = new URL(url);\n        HttpURLConnection httpConnection = (HttpURLConnection) ourl.openConnection();\n        httpConnection.setRequestMethod(method);\n        httpConnection.setDoOutput(true);\n        this.setCookie(httpConnection);\n        OutputStream httpOutputStream = httpConnection.getOutputStream();\n        StringBuffer postParams = new StringBuffer("""");\n        for (Entry<String, String> entry : ps.entrySet()) {\n            postParams.append(entry.getKey());\n            postParams.append(""="");\n            postParams.append(entry.getValue());\n            postParams.append(""&"");\n        }\n        httpOutputStream.write(postParams.toString().getBytes());\n        BufferedReader httpBufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));\n        httpResponse.append(this.readBufferedContent(httpBufferedReader));\n        text = httpResponse.toString();\n        this.readCookie(httpConnection);\n    }\n']",112,"    public InputSource resolveEntity(String fullInt, String systemId) {
        String remolving = getResolvedEntity(fullInt, systemId);
        if (remolving != null) {
            try {
                InputSource ISource = new InputSource(remolving);
                ISource.setPublicId(fullInt);
                URL bel = new URL(remolving);
                InputStream sourcestream = bel.openStream();
                ISource.setByteStream(sourcestream);
                return ISource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", remolving);
                return null;
            }
        }
        return null;
    }
",0,0,0,-1,"resolveEntity,publicId,systemId,resolved,iSource,url,iStream","resolveEntity:-6.274173134251644e-09,publicId:-5.64675582082648e-08,systemId:-2.5096692537006578e-08,resolved:-1.254834626850329e-07,iSource:-7.529007761101973e-08,url:3.7645038805509866e-08,iStream:0.0,",5,16,"publicId:fullInt,systemId:systemId,resolved:remolving,resolveEntity:resolveEntity,url:bel,iStream:sourcestream,iSource:ISource,",Greedy,,
,,,,,,,,,,,,,,,
218,"['20073619', '7499186', '    public static String getPagina(String strurl) {\n        String resp = """";\n        Authenticator.setDefault(new Autenticador());\n        try {\n            URL url = new URL(strurl);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String str;\n            while ((str = in.readLine()) != null) {\n                resp += str;\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n            resp = e.toString();\n        } catch (IOException e) {\n            resp = e.toString();\n        } catch (Exception e) {\n            resp = e.toString();\n        }\n        return resp;\n    }\n', '    private void bootKernel(String conf) {\n        try {\n            AssetManager am = getResources().getAssets();\n            InputStream is = am.open(conf + "".conf"");\n            Properties props = new Properties();\n            props.load(is);\n            is.close();\n            Log.d(""bootKernel"", ""Listing sdcard assets..."");\n            String[] sdcardfiles = am.list(""sdcard"");\n            for (String file : sdcardfiles) {\n                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");\n                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);\n                FileInputStream fis = afd.createInputStream();\n                FileChannel fic = fis.getChannel();\n                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);\n                FileChannel foc = fos.getChannel();\n                fic.transferTo(0, fic.size(), foc);\n                fic.close();\n                foc.close();\n            }\n            Configuration gconf = new JavaPropertiesConfiguration(props);\n            Configuration bconf = gconf.subset(""boot"");\n            String kclass_name = bconf.getString(""kernel"");\n            Log.d(""bootKernel"", ""Attempting to load kernel from class \'"" + kclass_name + ""\'..."");\n            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\n            Kernel kernel = kclass.newInstance();\n            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");\n            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\n            kernel.boot(bctx).get();\n            Log.d(""bootKernel"", ""Kernel boot complete."");\n        } catch (Exception e) {\n            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);\n            finish();\n        }\n    }\n']",132,"    public static String getPageine(String  strrel) {
        String changes = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL null = new URL( strrel);
            BufferedReader by = new BufferedReader(new InputStreamReader(null.openStream()));
            String comment;
            while ((comment = by.readLine()) != null) {
                changes += comment;
            }
            by.close();
        } catch (MalformedURLException e) {
            changes = e.toString();
        } catch (IOException e) {
            changes = e.toString();
        } catch (Exception e) {
            changes = e.toString();
        }
        return changes;
    }
",0,0,0,-1,"getPagina,strurl,resp,url,in,str","getPagina:7.012311150045956e-08,strurl:2.1036933450137867e-07,resp:5.048864028033088e-07,url:2.384185791015625e-07,in:1.7250285429113052e-06,str:1.0097728056066177e-06,",6,17,"url:null,in:by,strurl: strrel,str:comment,resp:changes,getPagina:getPageine,",Greedy,,
,,,,,,,,,,,,,,,
219,"['8788371', '19134229', '    private void tail(String[] cmd, int pos) throws IOException {\n        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");\n        String src = null;\n        Path path = null;\n        try {\n            List<String> parameters = c.parse(cmd, pos);\n            src = parameters.get(0);\n        } catch (IllegalArgumentException iae) {\n            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);\n            throw iae;\n        }\n        boolean foption = c.getOpt(""f"") ? true : false;\n        path = new Path(src);\n        FileSystem srcFs = path.getFileSystem(getConf());\n        if (srcFs.isDirectory(path)) {\n            throw new IOException(""Source must be a file."");\n        }\n        long fileSize = srcFs.getFileStatus(path).getLen();\n        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n        while (true) {\n            FSDataInputStream in = srcFs.open(path);\n            in.seek(offset);\n            IOUtils.copyBytes(in, System.out, 1024, false);\n            offset = in.getPos();\n            in.close();\n            if (!foption) {\n                break;\n            }\n            fileSize = srcFs.getFileStatus(path).getLen();\n            offset = (fileSize > offset) ? offset : fileSize;\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n', '    private void copyFile(final String sourceFileName, final File path) throws IOException {\n        final File source = new File(sourceFileName);\n        final File destination = new File(path, source.getName());\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            srcChannel = new FileInputStream(source).getChannel();\n            dstChannel = new FileOutputStream(destination).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            try {\n                if (dstChannel != null) {\n                    dstChannel.close();\n                }\n            } catch (Exception exception) {\n            }\n            try {\n                if (srcChannel != null) {\n                    srcChannel.close();\n                }\n            } catch (Exception exception) {\n            }\n        }\n    }\n']",276,,1,1,,-3,"tail,cmd,pos,c,src,path,parameters,foption,srcFs,fileSize,offset,in",,,,,Greedy,,
,,,,,,,,,,,,,,,
220,"['22046596', '21348951', '        public void copy(File s, File t) throws IOException {\n            FileChannel in = (new FileInputStream(s)).getChannel();\n            FileChannel out = (new FileOutputStream(t)).getChannel();\n            in.transferTo(0, s.length(), out);\n            in.close();\n            out.close();\n        }\n', '        protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {\n            if (!this.hasError()) {\n                try {\n                    StringWriter xmlSourceWriter = new StringWriter();\n                    IOUtils.copy(url.openStream(), xmlSourceWriter);\n                    processSubmittedDoap(xmlSourceWriter.toString());\n                } catch (FileNotFoundException e) {\n                    Session.get().error(invalidUrlMsg);\n                    logger.warn(""Error processing URL: "" + invalidUrlMsg);\n                } catch (IOException e) {\n                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));\n                    logger.warn(""Error processing URL: "" + url + ""; "" + e.getMessage(), e);\n                }\n            }\n        }\n']",72,,1,1,,-3,"copy,s,t,in,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
221,"['14001795', '8047989', '    public static void copyOverWarFile() {\n        System.out.println(""Copy Over War File:"");\n        File dir = new File(theAppsDataDir);\n        FileFilter ff = new WildcardFileFilter(""*.war"");\n        if (dir.listFiles(ff).length == 0) {\n            dir = new File(System.getProperty(""user.dir"") + ""/war"");\n            if (dir.exists()) {\n                File[] files = dir.listFiles(ff);\n                for (File f : files) {\n                    try {\n                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());\n                        System.out.println(""Creating new file \\"""" + f.getAbsolutePath() + ""\\"""");\n                        newFile.createNewFile();\n                        InputStream fi = new FileInputStream(f);\n                        OutputStream fo = new FileOutputStream(newFile);\n                        IOUtils.copy(fi, fo);\n                        moveUnzipAndExtract(newFile);\n                    } catch (Exception ex) {\n                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n                    }\n                }\n            }\n        } else {\n            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");\n        }\n        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n        System.setProperty(""user.dir"", theAppsDataDir);\n        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));\n    }\n', '    protected byte[] getHashedID(String ID) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(ID.getBytes());\n            byte[] digest = md5.digest();\n            byte[] bytes = new byte[WLDB_ID_SIZE];\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = digest[i];\n            }\n            return bytes;\n        } catch (NoSuchAlgorithmException exception) {\n            System.err.println(""Java VM is not compatible"");\n            exit();\n            return null;\n        }\n    }\n']",256,"    public static void copyoverwarfile() {
        System.out.println(""Copy Over War File:"");
        File url = new File(theAppsDataDir);
        FileFilter fp = new WildcardFileFilter(""*.war"");
        if (url.listFiles(fp).length == 0) {
            url = new File(System.getProperty(""user.dir"") + ""/war"");
            if (url.exists()) {
                File[] lines = url.listFiles(fp);
                for (File fd : lines) {
                    try {
                        File NEWfile = new File("""" + theAppsDataDir + ""/"" + fd.getName());
                        System.out.println(""Creating new file \"""" + fd.getAbsolutePath() + ""\"""");
                        NEWfile.createNewFile();
                        InputStream fin = new FileInputStream(fd);
                        OutputStream tto = new FileOutputStream(NEWfile);
                        IOUtils.copy(fin, tto);
                        moveUnzipAndExtract(NEWfile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
",0,0,0,-1,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo","copyOverWarFile:1.5367632326872451e-06,dir:9.220579396123472e-05,ff:1.542464546535326e-05,files:8.101048676863961e-06,f:5.379967067552649e-06,newFile:1.8503354943316914e-05,fi:8.83185345193614e-06,fo:-1.4175539431364639e-05,",8,23,"dir:url,ff:fp,files:lines,f:fd,fi:fin,newFile:NEWfile,fo:tto,copyOverWarFile:copyoverwarfile,",Greedy,,
,,,,,,,,,,,,,,,
222,"['11475527', '13981689', '    void addDataFromURL(URL theurl) {\n        String line;\n        InputStream in = null;\n        try {\n            in = theurl.openStream();\n            BufferedReader data = new BufferedReader(new InputStreamReader(in));\n            while ((line = data.readLine()) != null) {\n                thetext.append(line + ""\\n"");\n            }\n        } catch (Exception e) {\n            System.out.println(e.toString());\n            thetext.append(theurl.toString());\n        }\n        try {\n            in.close();\n        } catch (Exception e) {\n        }\n    }\n', '    public static String md5Hash(String src) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(src.getBytes());\n            return bytesArrayToHexString(md.digest());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n']",112,"    void addTextFromURL(URL TheURL) {
        String online;
        InputStream reader = null;
        try {
            reader = TheURL.openStream();
            BufferedReader client = new BufferedReader(new InputStreamReader(reader));
            while ((online = client.readLine()) != null) {
                thetext.append(online + ""
"");
            }
        } catch (Exception entry) {
            System.out.println(entry.toString());
            thetext.append(TheURL.toString());
        }
        try {
            reader.close();
        } catch (Exception entry) {
        }
    }
",0,0,0,-1,"addDataFromURL,theurl,line,in,data,e","addDataFromURL:3.427267074584961e-07,theurl:1.0985881090164185e-05,line:8.393079042434692e-06,in:5.942583084106445e-05,data:1.1727213859558105e-05,e:1.9781291484832764e-06,",6,16,"in:reader,data:client,e:entry,theurl:TheURL,line:online,addDataFromURL:addTextFromURL,",Greedy,,
,,,,,,,,,,,,,,,
223,"['10936821', '8417584', '    @Override\n    public void doIt() {\n        try {\n            Shared.createBackup(""articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos"");\n            if (mode.equals(""FTP"")) {\n                FTPClient client = new FTPClient();\n                client.connect(Constants.ftpHost);\n                client.login(Constants.ftpUser, Constants.ftpPass);\n                client.changeDirectory(Constants.ftpDir);\n                File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\n                client.download(""GT99_A09.rar"", ff);\n                client.disconnect(false);\n                Shared.prepareMovements(ff);\n            } else if (mode.equals(""File"")) {\n                JFileChooser jfc = new JFileChooser();\n                FileFilter f = new ExtensionFileFilter(""Traslados de Total Pos"", ""rar"");\n                jfc.setFileFilter(f);\n                int selection = jfc.showOpenDialog(Shared.getMyMainWindows());\n                if (selection == JFileChooser.APPROVE_OPTION) {\n                    Shared.prepareMovements(jfc.getSelectedFile());\n                } else {\n                    return;\n                }\n            }\n            Shared.updateMovements();\n            if (Shared.isHadMovements()) {\n                MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, ""Fue cargado el nuevo inventario satisfactoriamente!"");\n                msg.show(Shared.getMyMainWindows());\n            } else {\n                MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, ""La tienda no tuvo ningun movimiento asociado."");\n                msg.show(Shared.getMyMainWindows());\n            }\n        } catch (Exception ex) {\n            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, ""Ha ocurrido un error."", ex);\n            msg.show(Shared.getMyMainWindows());\n        }\n    }\n', '    private String getResultFromHttpUrl(String href) {\n        String result = null;\n        try {\n            URL url = new URL(href);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            Object o = conn.getContent();\n            log.debug(""Opened "" + href + "" and got class "" + o.getClass().getName());\n            StringBuffer version = new StringBuffer();\n            String inputLine;\n            DataInputStream dis = new DataInputStream(conn.getInputStream());\n            while ((inputLine = dis.readLine()) != null) {\n                version.append(inputLine + ""\\n"");\n            }\n            result = version.toString();\n            log.debug(""Read from URL:\\n"" + result);\n            dis.close();\n        } catch (Exception e) {\n            log.debug(""Caught exception "" + e + "" whilst attempting to query URL "" + href);\n            e.printStackTrace();\n        } finally {\n            return result;\n        }\n    }\n']",286,"    @Override
    public void makeWhat() {
        try {
            Shared.createBackup(""articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos"");
            if (mode.equals(""FTP"")) {
                FTPClient conn = new FTPClient();
                conn.connect(Constants.ftpHost);
                conn.login(Constants.ftpUser, Constants.ftpPass);
                conn.changeDirectory(Constants.ftpDir);
                File buff = new File(Constants.tmpDir + Constants.tmpFtpFileName);
                conn.download(""GT99_A09.rar"", buff);
                conn.disconnect(false);
                Shared.prepareMovements(buff);
            } else if (mode.equals(""File"")) {
                JFileChooser ffc = new JFileChooser();
                FileFilter fa = new ExtensionFileFilter(""Traslados de Total Pos"", ""rar"");
                ffc.setFileFilter(fa);
                int sea = ffc.showOpenDialog(Shared.getMyMainWindows());
                if (sea == JFileChooser.APPROVE_OPTION) {
                    Shared.prepareMovements(ffc.getSelectedFile());
                } else {
                    return;
                }
            }
            Shared.updateMovements();
            if (Shared.isHadMovements()) {
                MessageBox news = new MessageBox(MessageBox.SGN_SUCCESS, ""Fue cargado el nuevo inventario satisfactoriamente!"");
                news.show(Shared.getMyMainWindows());
            } else {
                MessageBox news = new MessageBox(MessageBox.SGN_WARNING, ""La tienda no tuvo ningun movimiento asociado."");
                news.show(Shared.getMyMainWindows());
            }
        } catch (Exception ex) {
            MessageBox news = new MessageBox(MessageBox.SGN_DANGER, ""Ha ocurrido un error."", ex);
            news.show(Shared.getMyMainWindows());
        }
    }
",0,0,0,-1,"doIt,client,ff,jfc,f,selection,msg","doIt:0.00010434289773305257,client:-0.013102695345878601,ff:-0.0020994916558265686,jfc:-0.0003066559632619222,f:-0.0003847281138102213,selection:-0.0001316318909327189,msg:-0.00048638880252838135,",7,24,"ff:buff,f:fa,msg:news,jfc:ffc,selection:sea,client:conn,doIt:makeWhat,",Greedy,,
,,,,,,,,,,,,,,,
224,"['8747840', '5977352', '    public static void copy(File src, File dest) throws FileNotFoundException, IOException {\n        FileInputStream in = new FileInputStream(src);\n        FileOutputStream out = new FileOutputStream(dest);\n        try {\n            byte[] buf = new byte[1024];\n            int c = -1;\n            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);\n        } finally {\n            in.close();\n            out.close();\n        }\n    }\n', '    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());\n        byte[] buffer = new byte[bufSize];\n        int read = 0;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            while (true) {\n                read = in.read(buffer);\n                if (read == -1) break;\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) try {\n                in.close();\n            } finally {\n                if (out != null) out.close();\n            }\n        }\n    }\n']",97,"    public static void download(File pkg, File cont) throws FileNotFoundException, IOException {
        FileInputStream ln = new FileInputStream(pkg);
        FileOutputStream writer = new FileOutputStream(cont);
        try {
            byte[] batch = new byte[1024];
            int cb = -1;
            while ((cb = ln.read(batch)) > 0) writer.write(batch, 0, cb);
        } finally {
            ln.close();
            writer.close();
        }
    }
",1,1,1,-1,"copy,src,dest,in,out,buf,c","copy:2.1738164565142463e-07,src:2.6646782370174633e-07,dest:2.2439395680147059e-07,in:8.414773380055148e-07,out:5.259233362534467e-07,buf:1.8933240105124082e-07,c:-4.207386690027574e-08,",7,17,"in:ln,out:writer,buf:batch,c:cb,src:pkg,dest:cont,copy:download,",Greedy,,
,,,,,,,,,,,,,,,
225,"['16931472', '12172485', '    public void handler(Map<String, String> result, TargetPage target) {\n        try {\n            URL url = new URL(target.getUrl());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                for (Map.Entry<String, String> entry : result.entrySet()) {\n                    if (line.indexOf(target.getInclude()) != -1) {\n                        int fromIndex = line.indexOf(target.getFromStr());\n                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n                        entry.setValue(r);\n                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n                    }\n                }\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",212,,0,0,,-3,"handler,result,target,url,reader,line,entry,fromIndex,r",,,,,Greedy,,
,,,,,,,,,,,,,,,
226,"['838844', '18211588', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public static boolean copyTextFile(File src, File dst) {\n        try {\n            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));\n            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));\n            byte[] buf = new byte[1024];\n            int readsize = 0;\n            while ((readsize = bis.read(buf)) != -1) {\n                bos.write(buf, 0, readsize);\n            }\n            bos.flush();\n            bos.close();\n            bis.close();\n        } catch (IOException e) {\n            ServerConsoleServlet.printSystemLog(e.toString() + "" "" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);\n            return false;\n        }\n        return true;\n    }\n']",765,,1,1,,-3,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
227,"['11475527', '9327525', '    void addDataFromURL(URL theurl) {\n        String line;\n        InputStream in = null;\n        try {\n            in = theurl.openStream();\n            BufferedReader data = new BufferedReader(new InputStreamReader(in));\n            while ((line = data.readLine()) != null) {\n                thetext.append(line + ""\\n"");\n            }\n        } catch (Exception e) {\n            System.out.println(e.toString());\n            thetext.append(theurl.toString());\n        }\n        try {\n            in.close();\n        } catch (Exception e) {\n        }\n    }\n', '    @Test\n    public void test02_ok() throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpPost post = new HttpPost(chartURL);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);\n            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));\n            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));\n            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));\n            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));\n            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));\n            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));\n            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));\n            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));\n            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            HttpResponse response = client.execute(post);\n            HttpEntity entity = response.getEntity();\n            assertNotNull(entity);\n            InputStream instream = entity.getContent();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));\n            System.out.println(reader.readLine());\n            instream.close();\n            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n']",112,,0,0,,-3,"addDataFromURL,theurl,line,in,data,e",,,,,Greedy,,
,,,,,,,,,,,,,,,
228,"['17791385', '5125848', '    public static void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n', '    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })\n    public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {\n        File dir = File.createTempFile(""javascript"", """" + System.currentTimeMillis());\n        StringBuilder name = new StringBuilder();\n        try {\n            if (dir.delete() && dir.mkdirs()) {\n                File minDir = new File(dir, ""min"");\n                minDir.mkdir();\n                File combineFile = new File(minDir, ""script.js"");\n                File concatFile = new File(minDir, ""concat.js"");\n                Writer combineWriter = new FileWriter(combineFile);\n                Writer concatWriter = new FileWriter(concatFile);\n                final List<Boolean> fails = new LinkedList<Boolean>();\n                boolean first = true;\n                for (Node link : linkJs) {\n                    String path = ((Element) link).getAttribute(""src"");\n                    URL url = new URL(buildUrl(base, path));\n                    InputStream inputStream = url.openStream();\n                    File jsFile = new File(dir, fileName(url));\n                    FileOutputStream outputStream = new FileOutputStream(jsFile);\n                    IOUtils.copy(inputStream, outputStream);\n                    outputStream.close();\n                    inputStream.close();\n                    if (!first) {\n                        combineWriter.write(""\\n;\\n"");\n                        concatWriter.write(""\\n;\\n"");\n                    } else {\n                        first = false;\n                    }\n                    if (Configuration.jsMinification()) {\n                        Reader reader = new FileReader(jsFile);\n                        try {\n                            JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {\n\n                                @Override\n                                public void warning(String s, String s1, int i, String s2, int i1) {\n                                    fails.add(true);\n                                }\n\n                                @Override\n                                public void error(String s, String s1, int i, String s2, int i1) {\n                                    fails.add(true);\n                                }\n\n                                @Override\n                                public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {\n                                    fails.add(true);\n                                    return null;\n                                }\n                            });\n                            jsCompressor.compress(combineWriter, 0, false, false, true, true);\n                        } catch (Exception e) {\n                            fails.add(true);\n                        }\n                        reader.close();\n                    }\n                    Reader reader = new FileReader(jsFile);\n                    IOUtils.copy(reader, concatWriter);\n                    reader.close();\n                    String fileName = jsFile.getName();\n                    int pos = fileName.lastIndexOf(\'.\');\n                    if (pos >= 0) {\n                        fileName = fileName.substring(0, pos);\n                    }\n                    name.append(fileName).append("","");\n                }\n                combineWriter.close();\n                concatWriter.close();\n                FileReader reader;\n                if (fails.size() == 0 && Configuration.jsMinification()) {\n                    reader = new FileReader(combineFile);\n                } else {\n                    reader = new FileReader(concatFile);\n                }\n                name.append(hashCode(IOUtils.toString(reader))).append("".js"");\n                reader.close();\n                File targetFile = new File(Configuration.getJsLocalDir(), name.toString());\n                if (!targetFile.exists()) {\n                    targetFile.getParentFile().mkdirs();\n                    if (fails.size() == 0 && Configuration.jsMinification()) {\n                        FileUtils.copyFile(combineFile, targetFile);\n                    } else {\n                        FileUtils.copyFile(concatFile, targetFile);\n                    }\n                    newFiles.add(targetFile);\n                    logger.info(""Combined several js files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");\n                }\n            }\n        } finally {\n            FileUtils.deleteQuietly(dir);\n        }\n        if (name.length() != 0) {\n            Element element = (Element) linkJs.get(0);\n            element.setAttribute(""src"", Configuration.getJsUrlPrefix() + name.toString());\n            return element;\n        } else {\n            return null;\n        }\n    }\n']",86,"    public static void cloneResource(File rel, File snt) throws IOException {
        InputStream ln = new FileInputStream(rel);
        OutputStream writer = new FileOutputStream(snt);
        byte[] batch = new byte[1024];
        int size;
        while ((size = ln.read(batch)) > 0) writer.write(batch, 0, size);
        ln.close();
        writer.close();
    }
",1,1,1,-1,"copyFile,src,dst,in,out,buf,len","copyFile:2.875047571518842e-07,src:2.6646782370174633e-07,dst:1.4024622300091912e-08,in:1.0308097390567557e-06,out:4.207386690027574e-07,buf:2.524432014016544e-07,len:-1.6829546760110295e-07,",7,17,"in:ln,out:writer,buf:batch,len:size,src:rel,dst:snt,copyFile:cloneResource,",Greedy,,
,,,,,,,,,,,,,,,
229,"['16550855', '3197876', '    public String readPage(boolean ignoreComments) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        String inputLine;\n        String html = """";\n        if (ignoreComments) {\n            while ((inputLine = in.readLine()) != null) {\n                if (inputLine.length() > 0) {\n                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {\n                        html = html + inputLine + ""\\n"";\n                    }\n                }\n            }\n        } else {\n            while ((inputLine = in.readLine()) != null) {\n                html = html + inputLine + ""\\n"";\n            }\n        }\n        in.close();\n        return html;\n    }\n', '    public ArrayList<String> showTopLetters() {\n        int[] tempArray = new int[engCountLetters.length];\n        char[] tempArrayLetters = new char[abcEng.length];\n        ArrayList<String> resultTopFiveLetters = new ArrayList<String>();\n        tempArray = engCountLetters.clone();\n        tempArrayLetters = abcEng.clone();\n        int tempCount;\n        char tempLetters;\n        for (int j = 0; j < (abcEng.length * abcEng.length); j++) {\n            for (int i = 0; i < abcEng.length - 1; i++) {\n                if (tempArray[i] > tempArray[i + 1]) {\n                    tempCount = tempArray[i];\n                    tempLetters = tempArrayLetters[i];\n                    tempArray[i] = tempArray[i + 1];\n                    tempArrayLetters[i] = tempArrayLetters[i + 1];\n                    tempArray[i + 1] = tempCount;\n                    tempArrayLetters[i + 1] = tempLetters;\n                }\n            }\n        }\n        for (int i = tempArrayLetters.length - 1; i > tempArrayLetters.length - 6; i--) {\n            resultTopFiveLetters.add(tempArrayLetters[i] + "":"" + tempArray[i]);\n        }\n        return resultTopFiveLetters;\n    }\n']",139,"    public String readpage(boolean ignoreComments) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String InputNet;
        String url = """";
        if (ignoreComments) {
            while ((InputNet = reader.readLine()) != null) {
                if (InputNet.length() > 0) {
                    if (InputNet.substring(0, 1).compareTo(""#"") != 0) {
                        url = url + InputNet + ""
"";
                    }
                }
            }
        } else {
            while ((InputNet = reader.readLine()) != null) {
                url = url + InputNet + ""
"";
            }
        }
        reader.close();
        return url;
    }
",0,0,0,-1,"readPage,ignoreComments,in,inputLine,html","readPage:-0.00020160675048828126,ignoreComments:-0.00024156570434570314,in:-0.0027317047119140626,inputLine:-0.005634704232215881,html:-0.004338258504867553,",4,18,"in:reader,readPage:readpage,ignoreComments:ignoreComments,inputLine:InputNet,html:url,",Greedy,,
,,,,,,,,,,,,,,,
230,"['5399593', '13414771', '    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = null;\n        md = MessageDigest.getInstance(""SHA"");\n        md.update(plaintext.getBytes(""UTF-8""));\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n', '    @Digester(forField = ""password"")\n    public static String encriptPassword(String passwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(passwd.getBytes());\n            BigInteger hash = new BigInteger(1, md.digest());\n            return hash.toString(16);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n']",71,"    public synchronized String encode(String precontext) throws NoSuchAlgorithmException, UnsupportedCompodingEx {
        MessageDigest med = null;
        med = MessageDigest.getInstance(""SHA"");
        med.update(precontext.getBytes(""UTF-8""));
        byte was[] = med.digest();
        String dump = (new BASE64Encoder()).encode(was);
        return dump;
    }
",1,1,1,-1,"encrypt,plaintext,UnsupportedEncodingException,md,raw,hash","encrypt:2.0116567611694336e-06,plaintext:2.125898996988932e-06,UnsupportedEncodingException:-2.682209014892578e-07,md:-9.020169576009113e-06,raw:1.9868214925130206e-06,hash:1.9570191701253252e-06,",6,12,"md:med,raw:was,hash:dump,plaintext:precontext,encrypt:encode,UnsupportedEncodingException:UnsupportedCompodingEx,",Greedy,,
,,,,,,,,,,,,,,,
231,"['18504192', '9550506', '    static void copyFile(File in, File out) throws IOException {\n        FileChannel source = new FileInputStream(in).getChannel();\n        FileChannel destination = new FileOutputStream(out).getChannel();\n        source.transferTo(0, source.size(), destination);\n        source.close();\n        destination.close();\n    }\n', '    private String cookieString(String url, String ip) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-1"");\n            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());\n            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());\n            return hash.toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);\n            return null;\n        }\n    }\n']",68,,0,0,,-3,"copyFile,in,out,source,destination",,,,,Greedy,,
,,,,,,,,,,,,,,,
232,"['22135199', '16215393', '    public void testCodingEmptyFile() throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        WritableByteChannel channel = newChannel(baos);\n        HttpParams params = new BasicHttpParams();\n        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n        encoder.write(wrap(""stuff;""));\n        File tmpFile = File.createTempFile(""testFile"", ""txt"");\n        FileOutputStream fout = new FileOutputStream(tmpFile);\n        OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n        wrtout.flush();\n        wrtout.close();\n        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n        encoder.transfer(fchannel, 0, 20);\n        encoder.write(wrap(""more stuff""));\n        String s = baos.toString(""US-ASCII"");\n        assertTrue(encoder.isCompleted());\n        assertEquals(""stuff;more stuff"", s);\n        tmpFile.delete();\n    }\n', '    public void importSequences() {\n        names = new ArrayList<String>();\n        sequences = new ArrayList<String>();\n        try {\n            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();\n            ImportHelper helper = new ImportHelper(new InputStreamReader(is));\n            int ch = helper.read();\n            while (ch != \'>\') {\n                ch = helper.read();\n            }\n            do {\n                String line = helper.readLine();\n                StringTokenizer tokenizer = new StringTokenizer(line, "" \\t"");\n                String name = tokenizer.nextToken();\n                StringBuffer seq = new StringBuffer();\n                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);\n                ch = helper.getLastDelimiter();\n                names.add(name);\n                sequences.add(seq.toString());\n            } while (ch == \'>\');\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (EOFException e) {\n        } catch (IOException e) {\n        }\n    }\n']",189,,0,0,,-3,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s",,,,,Greedy,,
,,,,,,,,,,,,,,,
233,"['14001795', '15799935', '    public static void copyOverWarFile() {\n        System.out.println(""Copy Over War File:"");\n        File dir = new File(theAppsDataDir);\n        FileFilter ff = new WildcardFileFilter(""*.war"");\n        if (dir.listFiles(ff).length == 0) {\n            dir = new File(System.getProperty(""user.dir"") + ""/war"");\n            if (dir.exists()) {\n                File[] files = dir.listFiles(ff);\n                for (File f : files) {\n                    try {\n                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());\n                        System.out.println(""Creating new file \\"""" + f.getAbsolutePath() + ""\\"""");\n                        newFile.createNewFile();\n                        InputStream fi = new FileInputStream(f);\n                        OutputStream fo = new FileOutputStream(newFile);\n                        IOUtils.copy(fi, fo);\n                        moveUnzipAndExtract(newFile);\n                    } catch (Exception ex) {\n                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n                    }\n                }\n            }\n        } else {\n            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");\n        }\n        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n        System.setProperty(""user.dir"", theAppsDataDir);\n        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));\n    }\n', '    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n        if (part.getBody() != null) {\n            long attachmentId = localAttachment.mId;\n            InputStream in = part.getBody().getInputStream();\n            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n            if (!saveIn.exists()) {\n                saveIn.mkdirs();\n            }\n            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n            saveAs.createNewFile();\n            FileOutputStream out = new FileOutputStream(saveAs);\n            long copySize = IOUtils.copy(in, out);\n            in.close();\n            out.close();\n            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n            localAttachment.mSize = copySize;\n            localAttachment.mContentUri = contentUriString;\n            ContentValues cv = new ContentValues();\n            cv.put(AttachmentColumns.SIZE, copySize);\n            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n            context.getContentResolver().update(uri, cv, null, null);\n        }\n    }\n']",256,,1,1,,-3,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,,,,Greedy,,
,,,,,,,,,,,,,,,
234,"['3187685', '4750967', '    private void copyJar(File src, File dst) throws IOException {\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            srcChannel = new FileInputStream(src).getChannel();\n            dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } catch (IOException e) {\n            fLog.log(Level.SEVERE, e.getMessage(), e);\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n', '    public void patch() throws IOException {\n        if (mods.isEmpty()) {\n            return;\n        }\n        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\n        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n    }\n']",106,,1,1,,-3,"copyJar,src,dst,srcChannel,dstChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
235,"['17683082', '22338097', '    HttpRepository(Path path) throws IOException {\n        super(path);\n        this.url = new URL(path.toURLString());\n        HttpURLConnection.setFollowRedirects(true);\n        this.connection = (HttpURLConnection) url.openConnection();\n        this.ns = Names.getNamespace(path);\n    }\n', '    private final String createMD5(String pwd) throws Exception {\n        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();\n        md.update(pwd.getBytes(""UTF-8""));\n        byte[] pd = md.digest();\n        StringBuffer app = new StringBuffer();\n        for (int i = 0; i < pd.length; i++) {\n            String s2 = Integer.toHexString(pd[i] & 0xFF);\n            app.append((s2.length() == 1) ? ""0"" + s2 : s2);\n        }\n        return app.toString();\n    }\n']",61,"    HttpRepository(Path path) throws DownloadException {
        super(path);
        this.log = new URL(path.toURLString());
        HttpURLConnection.setFollowRedirects(true);
        this.handler = (HttpURLConnection) log.openConnection();
        this.fs = Names.getNamespace(path);
    }
",0,0,0,-1,"IOException,url,connection,ns","IOException:5.602836608886719e-06,url:-1.3327598571777345e-05,connection:-3.862380981445312e-06,ns:-4.1961669921875e-06,",4,5,"url:log,connection:handler,ns:fs,IOException:DownloadException,",Greedy,,
,,,,,,,,,,,,,,,
236,"['4686922', '20619879', '    public void extractResourceToFile(String resourcePath, File dest) {\n        InputStream in = getClass().getResourceAsStream(resourcePath);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n', '    public void copyLogic() {\n        if (getState() == States.Idle) {\n            setState(States.Synchronizing);\n            try {\n                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();\n                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();\n                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n                sourceChannel.close();\n                destinationChannel.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            setState(States.Idle);\n        }\n    }\n']",84,,1,1,,-3,"extractResourceToFile,resourcePath,dest,in,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
237,"['15051083', '23118425', '    @Override\n    public String getMessageDigest() throws SarasvatiLoadException {\n        if (messageDigest == null) {\n            Collections.sort(nodes);\n            Collections.sort(externals);\n            try {\n                MessageDigest digest = MessageDigest.getInstance(""SHA1"");\n                digest.update(name.getBytes());\n                for (XmlNode node : nodes) {\n                    node.addToDigest(digest);\n                }\n                for (XmlExternal external : externals) {\n                    external.addToDigest(digest);\n                }\n                messageDigest = SvUtil.getHexString(digest.digest());\n            } catch (NoSuchAlgorithmException nsae) {\n                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);\n            }\n        }\n        return messageDigest;\n    }\n', '    public synchronized String encrypt(String plaintext) throws Exception {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n        } catch (Exception e) {\n        }\n        try {\n            md.update(plaintext.getBytes(""UTF-8""));\n        } catch (Exception e) {\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n']",122,"    @Override
    public String getContentDigest() throws SarasvatiLoadException {
        if (messageGuEST == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest signest = MessageDigest.getInstance(""SHA1"");
                signest.update(name.getBytes());
                for (XmlNode inner : nodes) {
                    inner.addToDigest(signest);
                }
                for (XmlExternal reference : externals) {
                    reference.addToDigest(signest);
                }
                messageGuEST = SvUtil.getHexString(signest.signest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageGuEST;
    }
",1,1,1,-1,"getMessageDigest,digest,node,external,messageDigest","getMessageDigest:6.811959402901785e-08,digest:-4.393713814871651e-06,node:-1.992498125348772e-06,external:-7.493155343191964e-07,messageDigest:-1.1495181492396763e-06,",5,14,"node:inner,external:reference,digest:signest,messageDigest:messageGuEST,getMessageDigest:getContentDigest,",Greedy,,
,,,,,,,,,,,,,,,
238,"['20091126', '6403868', '    static File copy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n            return out;\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n', '    private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n        File oldlog = null;\n        try {\n            boolean oldClassCopied = false;\n            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);\n            if (upgrade) {\n                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);\n                if (destPath.equals(lastVerPath)) {\n                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");\n                    if (!destPath.renameTo(bkdir)) {\n                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                    }\n                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                    lastVerPath = bkdir;\n                } else {\n                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                }\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n            } else {\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n            }\n            dirty_ = true;\n            File[] ls = destPath.listFiles();\n            for (int i = 0; i < ls.length; i++) {\n                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();\n            }\n            byte[] buf = new byte[0];\n            int read = 0;\n            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                if (outClassFile.exists() && !outClassFile.delete()) {\n                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outClassFile.getName()));\n                }\n                final FileOutputStream out = new FileOutputStream(outClassFile);\n                final FileInputStream in = new FileInputStream(fileWithArchive_);\n                if (installClassOffset_ > 0) {\n                    in.skip(installClassOffset_);\n                }\n                buf = new byte[0];\n                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];\n                read = in.read(buf, 0, buf.length);\n                out.write(buf, 0, read);\n                out.close();\n                in.close();\n            }\n            final FileInputStream in = new FileInputStream(fileWithArchive_);\n            if (jarOffset_ > 0) {\n                in.skip(jarOffset_);\n            }\n            JarInputStream jar = new JarInputStream(in);\n            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");\n            if (outJarFile.exists() && !outJarFile.delete()) {\n                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outJarFile.getName()));\n            }\n            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n            ZipEntry entry = jar.getNextEntry();\n            final int bufSize = 32768;\n            buf = new byte[bufSize];\n            while (entry != null) {\n                String entryName = entry.getName();\n                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {\n                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {\n                    FileOutputStream out = null;\n                    try {\n                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                        VAGlobals.copyStream(jar, out, buf);\n                    } catch (IOException e) {\n                        throw e;\n                    } finally {\n                        if (out != null) out.close();\n                    }\n                } else if (!entryName.endsWith("".zip"")) {\n                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);\n                    ZipEntry outEntry = new ZipEntry(entryName);\n                    CRC32 crc = new CRC32();\n                    outJar.putNextEntry(outEntry);\n                    int size = 0;\n                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n                        size += read;\n                        if (read == 0) {\n                            Thread.yield();\n                        } else {\n                            outJar.write(buf, 0, read);\n                            crc.update(buf, 0, read);\n                        }\n                    }\n                    outEntry.setSize(size);\n                    outEntry.setCrc(crc.getValue());\n                    outJar.flush();\n                    outJar.closeEntry();\n                }\n                jar.closeEntry();\n                entry = jar.getNextEntry();\n            }\n            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");\n            Properties prop = new Properties();\n            try {\n                prop.load(pin);\n            } catch (IOException exc) {\n            }\n            if (language == null) language = ""default"";\n            prop.setProperty(""vainstall.destination.language"", language);\n            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");\n            CRC32 crc = new CRC32();\n            outEntry.setCrc(crc.getValue());\n            outEntry.setSize(prop.size());\n            outJar.putNextEntry(outEntry);\n            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);\n            outEntry.setCrc(crc.getValue());\n            outJar.closeEntry();\n            jar.close();\n            outJar.close();\n            in.close();\n        } catch (IOException e) {\n            String message = e.getLocalizedMessage();\n            message += ""\\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");\n            e.printStackTrace();\n            exitOnError(new IOException(message));\n        }\n        return oldlog;\n    }\n']",99,"    static File download(File cin, File log) throws IOException {
        FileChannel outCommand = new FileInputStream(cin).getChannel();
        FileChannel moduleManager = new FileOutputStream(log).getChannel();
        try {
            outCommand.transferTo(0, outCommand.size(), moduleManager);
            return log;
        } catch (IOException e) {
            throw e;
        } finally {
            if (outCommand != null) outCommand.close();
            if (moduleManager != null) moduleManager.close();
        }
    }
",1,1,1,-1,"copy,in,out,inChannel,outChannel","copy:2.5431315104166666e-07,in:5.880991617838542e-07,out:9.775161743164064e-07,inChannel:7.549921671549479e-07,outChannel:6.357828776041667e-08,",5,15,"in:cin,inChannel:outCommand,out:log,outChannel:moduleManager,copy:download,",Greedy,,
,,,,,,,,,,,,,,,
239,"['7761195', '12744653', '    public synchronized String encrypt(String plaintext) throws Exception {\n        StringBuffer sb = new StringBuffer();\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA-512"");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        try {\n            md.update(plaintext.getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            throw new Exception(e.getMessage());\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append(\'0\');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n']",118,,1,1,,-3,"encrypt,plaintext,sb,md,raw,hash",,,,,Greedy,,
,,,,,,,,,,,,,,,
240,"['14783950', '9096314', '    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n        if (fileList == null || fileList.size() == 0) return;\n        FileOutputStream fos = new FileOutputStream(zipFileName);\n        ZipOutputStream zos = new ZipOutputStream(fos);\n        Iterator iter = fileList.iterator();\n        while (iter.hasNext()) {\n            String fileName = (String) iter.next();\n            int ind = Math.max(fileName.lastIndexOf(\'/\'), fileName.lastIndexOf(\'\\\\\'));\n            String shortName = ""unknown"";\n            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n            zos.putNextEntry(new ZipEntry(shortName));\n            FileInputStream fis = new FileInputStream(fileName);\n            byte[] buf = new byte[10000];\n            int bytesRead;\n            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n            fis.close();\n            zos.closeEntry();\n        }\n        zos.close();\n    }\n', '    private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n        Category log = ThreadCategory.getInstance(OutageWriter.class);\n        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);\n            return;\n        }\n        Connection dbConn = null;\n        try {\n            dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n                log.warn(""\\\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\\\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");\n            } else {\n                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n                long outageID = -1;\n                ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n                if (seqRS.next()) {\n                    outageID = seqRS.getLong(1);\n                }\n                seqRS.close();\n                try {\n                    dbConn.setAutoCommit(false);\n                } catch (SQLException sqle) {\n                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);\n                    return;\n                }\n                PreparedStatement newOutageWriter = null;\n                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");\n                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n                newOutageWriter.setLong(1, outageID);\n                newOutageWriter.setLong(2, eventID);\n                newOutageWriter.setLong(3, nodeID);\n                newOutageWriter.setString(4, ipAddr);\n                newOutageWriter.setLong(5, serviceID);\n                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n                newOutageWriter.executeUpdate();\n                newOutageWriter.close();\n                try {\n                    dbConn.commit();\n                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");\n                } catch (SQLException se) {\n                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException sqle) {\n                        log.warn(""SQL exception during rollback, reason"", sqle);\n                    }\n                }\n            }\n        } catch (SQLException sqle) {\n            log.warn(""SQL exception while handling \\\'nodeLostService\\\'"", sqle);\n        } finally {\n            try {\n                if (dbConn != null) dbConn.close();\n            } catch (SQLException e) {\n                log.warn(""Exception closing JDBC connection"", e);\n            }\n        }\n    }\n']",209,,0,0,,-3,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,,,,Greedy,,
,,,,,,,,,,,,,,,
241,"['3558512', '6988216', '    public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n        ensureParsed();\n        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n        parser.setContentPackage(cp);\n        if (on_disk != null) on_disk.delete();\n        on_disk = createTemporaryFile();\n        parser.serialize(on_disk);\n        InputStream in = new FileInputStream(on_disk);\n        IOUtils.copy(in, out);\n    }\n', '    public void testSimpleQuery() throws Exception {\n        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");\n        assertNotNull(dummySource);\n        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n        assertNotNull(os);\n        String dummyContent = ""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";\n        os.write(dummyContent.getBytes());\n        os.flush();\n        os.close();\n        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");\n        assertNotNull(source);\n        os = ((ModifiableSource) source).getOutputStream();\n        assertNotNull(os);\n        String content = ""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";\n        os.write(content.getBytes());\n        os.flush();\n        os.close();\n        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace=\'mindquarry\']"");\n        assertNotNull(qResult);\n        Collection results = qResult.getChildren();\n        assertEquals(1, results.size());\n        Iterator it = results.iterator();\n        JCRNodeSource rSrc = (JCRNodeSource) it.next();\n        InputStream rSrcIn = rSrc.getInputStream();\n        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n        IOUtils.copy(rSrcIn, actualOut);\n        rSrcIn.close();\n        assertEquals(content, actualOut.toString());\n        actualOut.close();\n        rSrc.delete();\n    }\n']",81,,1,1,,-3,"serialize,out,parser,on_disk,in",,,,,Greedy,,
,,,,,,,,,,,,,,,
242,"['21182766', '3024992', '    public static Properties load(String propsName) {\n        Properties props = new Properties();\n        URL url = ClassLoader.getSystemResource(propsName);\n        try {\n            props.load(url.openStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return props;\n    }\n', '    @Test\n    public void testCopy_readerToWriter_nullIn() throws Exception {\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");\n        try {\n            IOUtils.copy((Reader) null, writer);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }\n']",59,"    public static Properties save(String  propertiesStr) {
        Properties provs = new Properties();
        URL file = ClassLoader.getSystemResource( propertiesStr);
        try {
            provs.save(file.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return provs;
    }
",0,0,1,1,"load,propsName,props,url","load:-1.0768572489420572e-05,propsName:-6.702211168077257e-06,props:-1.2516975402832031e-06,url:-5.695554945203993e-07,",4,9,"propsName: propertiesStr,props:provs,url:file,load:save,",Greedy,,
,,,,,,,,,,,,,,,
243,"['5551393', '1862616', '    public static byte[] getMD5(String source) {\n        byte[] tmp = null;\n        try {\n            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");\n            md.update(source.getBytes());\n            tmp = md.digest();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return tmp;\n    }\n', '    public static String fetch(String reference) throws IOException {\n        URL url = new URL(reference);\n        HttpURLConnection c = (HttpURLConnection) url.openConnection();\n        c.setRequestMethod(""GET"");\n        c.setDoOutput(true);\n        c.setRequestProperty(""Content-Type"", ""text/xml; charset=UTF-8"");\n        return parseISToString(c.getInputStream());\n    }\n']",76,"    public static byte[] getmd5(String ource) {
        byte[] img = null;
        try {
            java.security.MessageDigest  MD = java.security.MessageDigest.getInstance(""MD5"");
             MD.update(ource.getBytes());
            img =  MD.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return img;
    }
",0,0,0,-1,"getMD5,source,tmp,md","getMD5:6.225374009874132e-07,source:-1.1391109890407986e-06,tmp:5.960464477539062e-07,md:-9.5367431640625e-07,",4,9,"md: MD,tmp:img,getMD5:getmd5,source:ource,",Greedy,,
,,,,,,,,,,,,,,,
244,"['20091126', '5237257', '    static File copy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n            return out;\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n', '    private void download(String fileName) {\n        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });\n        if (filePath != null) {\n            InputStream in = null;\n            OutputStream out = null;\n            try {\n                in = this.getClass().getResourceAsStream(""/"" + fileName);\n                out = new FileOutputStream(filePath);\n                IOUtils.copy(in, out);\n            } catch (IOException ioe) {\n                Activator.showExceptionDialog(ioe);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n            }\n        }\n    }\n']",99,,1,1,,-3,"copy,in,out,inChannel,outChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
245,"['15797402', '11933797', '    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {\n        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);\n        if (name != null && wanted.containsKey(name)) {\n            FileOutputStream out = new FileOutputStream(wanted.get(name));\n            IOUtils.copy(stream, out);\n            out.close();\n        } else {\n            if (downstreamParser != null) {\n                downstreamParser.parse(stream, handler, metadata, context);\n            }\n        }\n    }\n', '    public static void CopyFile(String in, String out) throws Exception {\n        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n']",105,,1,1,,-3,"parse,stream,handler,metadata,context,name,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
246,"['18374478', '5836744', '    public void updateUser(final User user) throws IOException {\n        try {\n            Connection conn = null;\n            boolean autoCommit = false;\n            try {\n                conn = pool.getConnection();\n                autoCommit = conn.getAutoCommit();\n                conn.setAutoCommit(false);\n                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");\n                updateUser.setInt(1, user.getMainRole().getId());\n                updateUser.setString(2, user.getUserId());\n                updateUser.executeUpdate();\n                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");\n                deleteRoles.setString(1, user.getUserId());\n                deleteRoles.executeUpdate();\n                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");\n                for (final Role role : user.getRoles()) {\n                    insertRoles.setString(1, user.getUserId());\n                    insertRoles.setInt(2, role.getId());\n                    insertRoles.executeUpdate();\n                }\n                conn.commit();\n            } catch (Throwable t) {\n                if (conn != null) conn.rollback();\n                throw new SQLException(t.toString());\n            } finally {\n                if (conn != null) {\n                    conn.setAutoCommit(autoCommit);\n                    conn.close();\n                }\n            }\n        } catch (final SQLException sqle) {\n            log.log(Level.SEVERE, sqle.toString(), sqle);\n            throw new IOException(sqle.toString());\n        }\n    }\n', '    public int read(String name) {\n        status = STATUS_OK;\n        try {\n            name = name.trim();\n            if (name.indexOf(""://"") > 0) {\n                URL url = new URL(name);\n                in = new BufferedInputStream(url.openStream());\n            } else {\n                in = new BufferedInputStream(new FileInputStream(name));\n            }\n            status = read(in);\n        } catch (IOException e) {\n            status = STATUS_OPEN_ERROR;\n        }\n        return status;\n    }\n']",282,,0,0,,-3,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,,,,Greedy,,
,,,,,,,,,,,,,,,
247,"['21092340', '9109613', '    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n        ZipEntry entry = new ZipEntry(filename);\n        podArchiveOutputStream.putNextEntry(entry);\n        IOUtils.copy(source, podArchiveOutputStream);\n        podArchiveOutputStream.closeEntry();\n        return PodArchiveResolver.withinPodArchive(pod, filename);\n    }\n', '    public static void fileCopy(String from_name, String to_name) throws IOException {\n        File fromFile = new File(from_name);\n        File toFile = new File(to_name);\n        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);\n        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);\n        if (!fromFile.isFile()) abort(""can\'t copy directory: "" + from_name);\n        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) abort(""destination directory doesn\'t exist: "" + parent);\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n']",63,,1,1,,-3,"addToArchive,pod,podArchiveOutputStream,filename,source,entry",,,,,Greedy,,
,,,,,,,,,,,,,,,
248,"['11616716', '12783713', '    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {\n        OutputStreamWriter osr = null;\n        try {\n            URL url = new URL(""http"", HOST, FILE);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            osr = new OutputStreamWriter(conn.getOutputStream());\n            osr.write(rqlQuery);\n            osr.flush();\n            return conn.getInputStream();\n        } catch (IOException ioe) {\n            throw new RQLException(""IO Exception reading result from server"", ioe);\n        } finally {\n            if (osr != null) {\n                try {\n                    osr.close();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }\n', '    @Override\n    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\n        if (query == null) {\n            throw new NotConnectedException();\n        }\n        ArrayList<String> recipients = query.getUserManager().getTecMail();\n        Mail mail = new Mail(recipients);\n        try {\n            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));\n            FileInputStream fis = new FileInputStream(""log/ossobook.log"");\n            ZipEntry entry = new ZipEntry(""ossobook.log"");\n            zos.putNextEntry(entry);\n            byte[] buffer = new byte[8192];\n            int read = 0;\n            while ((read = fis.read(buffer, 0, 1024)) != -1) {\n                zos.write(buffer, 0, read);\n            }\n            zos.closeEntry();\n            fis.close();\n            zos.close();\n            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n']",125,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter posrator = null;
        try {
            URL cert = new URL(""http"", HOST, FILE);
            URLConnection cert = cert.openConnection();
            cert.setDoOutput(true);
            posrator = new OutputStreamWriter(cert.getOutputStream());
            posrator.write(rqlQuery);
            posrator.flush();
            return cert.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (posrator != null) {
                try {
                    posrator.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",0,0,1,1,"getCMSResultAsStream,rqlQuery,osr,url,conn","getCMSResultAsStream:-7.549921671549479e-07,rqlQuery:1.0013580322265625e-06,osr:1.1634826660156251e-05,url:1.7793973286946613e-05,conn:8.869171142578126e-06,",3,12,"url:cert,osr:posrator,conn:cert,",Greedy,,
,,,,,,,,,,,,,,,
249,"['18891988', '12055086', '    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {\n        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);\n        mLog.debug(""Received endpoint: "" + endpoint);\n        String fileLocation = null;\n        try {\n            String tempDir = System.getProperty(""java.io.tmpdir"");\n            URL url = new URL(wsdlLocation);\n            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";\n            String tmpWSDLFile = WSDLFile + "".tmp"";\n            File inputFile = new File(WSDLFile);\n            File tmpFile = new File(tmpWSDLFile);\n            if (!inputFile.exists() || inputFile.length() == 0) {\n                mLog.debug(""Downloading the WSDL"");\n                inputFile.createNewFile();\n                InputStream in = url.openStream();\n                FileOutputStream out = new FileOutputStream(inputFile);\n                URLConnection con = url.openConnection();\n                int fileLength = con.getContentLength();\n                ReadableByteChannel channelIn = Channels.newChannel(in);\n                FileChannel channelOut = out.getChannel();\n                channelOut.transferFrom(channelIn, 0, fileLength);\n                channelIn.close();\n                channelOut.close();\n                out.flush();\n                out.close();\n                in.close();\n                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));\n                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");\n                for (int i = 0; i < nl1.getLength(); i++) {\n                    Node node1 = nl1.item(i);\n                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {\n                        ((Element) node1).setAttribute(""location"", endpoint);\n                    }\n                }\n                FileOutputStream tmpOut = new FileOutputStream(tmpFile);\n                XMLUtils.DocumentToStream(tmpDocument, tmpOut);\n                tmpOut.flush();\n                tmpOut.close();\n                boolean retVal = inputFile.delete();\n                if (retVal) {\n                    retVal = tmpFile.renameTo(new File(WSDLFile));\n                }\n                mLog.debug(""Return Value: "" + retVal);\n            } else {\n                mLog.debug(""The WSDL is already at the ServiceProvider"");\n            }\n            fileLocation = WSDLFile;\n        } catch (MalformedURLException mx) {\n            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());\n            throw new AxisFault(mx.getMessage(), mx.getCause());\n        } catch (IOException ix) {\n            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());\n            throw new AxisFault(ix.getMessage(), ix.getCause());\n        } catch (ParserConfigurationException px) {\n            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());\n            throw new AxisFault(px.getMessage(), px.getCause());\n        } catch (SAXException sx) {\n            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());\n            throw new AxisFault(sx.getMessage(), sx.getCause());\n        }\n        return fileLocation;\n    }\n', '    protected static void copyDeleting(File source, File dest) throws IOException {\n        byte[] buf = new byte[8 * 1024];\n        FileInputStream in = new FileInputStream(source);\n        try {\n            FileOutputStream out = new FileOutputStream(dest);\n            try {\n                int count;\n                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n            } finally {\n                out.close();\n            }\n        } finally {\n            in.close();\n        }\n    }\n']",593,,1,0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,,Greedy,,
,,,,,,,,,,,,,,,
250,"['8119563', '21531069', '    protected boolean checkLink(URL url) {\n        try {\n            URLConnection connection = url.openConnection();\n            connection.connect();\n            return true;\n        } catch (IOException e) {\n            MsgLog.error(""DapParser.checkLink(): IOException: "" + e.toString());\n            return false;\n        }\n    }\n', '    public int updateuser(User u) {\n        int i = 0;\n        Connection conn = null;\n        PreparedStatement pm = null;\n        try {\n            conn = Pool.getConnection();\n            conn.setAutoCommit(false);\n            pm = conn.prepareStatement(""update user set username=?,passwd=?,existstate=?,management=? where userid=?"");\n            pm.setString(1, u.getUsername());\n            pm.setString(2, u.getPasswd());\n            pm.setInt(3, u.getExiststate());\n            pm.setInt(4, u.getManagement());\n            pm.setString(5, u.getUserid());\n            i = pm.executeUpdate();\n            conn.commit();\n            Pool.close(pm);\n            Pool.close(conn);\n        } catch (Exception e) {\n            e.printStackTrace();\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            Pool.close(pm);\n            Pool.close(conn);\n        } finally {\n            Pool.close(pm);\n            Pool.close(conn);\n        }\n        return i;\n    }\n']",54,"    protected boolean openLink(URL uri) {
        try {
            URLConnection statement = uri.openConnection();
            statement.connect();
            return true;
        } catch (IOException e) {
            MsgLog.error(""DapParser.checkLink(): IOException: "" + e.toString());
            return false;
        }
    }
",0,0,0,-1,"checkLink,url,connection","checkLink:-1.4781951904296875e-06,url:-2.8896331787109376e-05,connection:1.4925003051757813e-05,",3,5,"url:uri,connection:statement,checkLink:openLink,",Greedy,,
,,,,,,,,,,,,,,,
251,"['19206412', '11005804', '    public static String md5String(String str) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(""MD5"");\n            md.update(str.getBytes());\n            byte[] hash = md.digest();\n            final char[] hexChars = { \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' };\n            StringBuffer res = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n                res.append(hexChars[0x0F & hash[i]]);\n            }\n            return res.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n', '    public String kodetu(String testusoila) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""SHA"");\n        } catch (NoSuchAlgorithmException e) {\n            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        try {\n            md.update(testusoila.getBytes(""UTF-8""));\n        } catch (UnsupportedEncodingException e) {\n            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n']",171,,1,1,,-3,"md5String,str,md,hash,hexChars,res,i",,,,,Greedy,,
,,,,,,,,,,,,,,,
252,"['4629990', '21555906', '    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {\n        String remoteHomeDir = null;\n        noRetriesSoFar = 0;\n        while (true) {\n            try {\n                ftpClient.connect(ftpAddress, ftpPort);\n                int reply = ftpClient.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    ftpClient.disconnect();\n                    throw new IOException();\n                }\n                if (!ftpClient.login(user, password)) {\n                    throw new IOException();\n                }\n                remoteHomeDir = ftpClient.printWorkingDirectory();\n                msgEntry.setAppContext(""logonToServer()"");\n                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);\n                logger.logProcess(msgEntry);\n                break;\n            } catch (IOException e) {\n                logoutAndDisconnect(ftpClient);\n                if (noRetriesSoFar++ < noRetries) {\n                    waitBetweenRetry();\n                    notifyAndStartWaitingFlag = false;\n                } else {\n                    notifyAndStartWaitingFlag = true;\n                    errEntry.setThrowable(e);\n                    errEntry.setAppContext(""logonToServer()"");\n                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\\n"" + ""Address:"" + ftpAddress + ""\\n"" + ""User:"" + user);\n                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");\n                    logger.logError(errEntry);\n                    break;\n                }\n            }\n        }\n        return remoteHomeDir;\n    }\n', '    public void actionPerformed(ActionEvent ae) {\n        if (ae.getSource() == jbutton) {\n            try {\n                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";\n                URL servleturl = new URL(toservlet);\n                URLConnection servletconnection = servleturl.openConnection();\n                servletconnection.setDoInput(true);\n                servletconnection.setDoOutput(true);\n                servletconnection.setUseCaches(false);\n                servletconnection.setDefaultUseCaches(false);\n                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());\n                inputFromClient.readByte();\n                OutputStream fos = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");\n                byte[] buf = new byte[1024];\n                int bytesread;\n                while ((bytesread = inputFromClient.read(buf)) > -1) {\n                    fos.write(buf, 0, bytesread);\n                }\n                inputFromClient.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n']",240,"    private String logonToserver(FTPClient ftcResponse, String etpOrder, int NORetrys) {
        String remoteHostRoot = null;
        noRetrysSOMuch = 0;
        while (true) {
            try {
                ftcResponse.connect(etpOrder, ftpPort);
                int continue = ftcResponse.getReplyCode();
                if (!FTPReply.isPositiveCompletion(continue)) {
                    ftcResponse.disconnect();
                    throw new IOException();
                }
                if (!ftcResponse.login(user, password)) {
                    throw new IOException();
                }
                remoteHostRoot = ftcResponse.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + etpOrder + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftcResponse);
                if (noRetrysSOMuch++ < NORetrys) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetrysSOMuch - 1) + "" retries. Max Retries.
"" + ""Address:"" + ftpAddress + ""
"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + etpOrder + "" after "" + (noRetrysSOMuch - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHostRoot;
    }
",0,0,0,-1,"logonToServer,ftpClient,ftpAddress,noRetries,remoteHomeDir,noRetriesSoFar,reply","logonToServer:-4.967053731282552e-09,ftpClient:-1.599391301472982e-06,ftpAddress:-2.731879552205404e-07,noRetries:-1.9868214925130207e-08,remoteHomeDir:-1.1920928955078125e-07,noRetriesSoFar:-1.1920928955078125e-07,reply:0.0,",7,24,"logonToServer:logonToserver,ftpClient:ftcResponse,ftpAddress:etpOrder,noRetries:NORetrys,reply:continue,remoteHomeDir:remoteHostRoot,noRetriesSoFar:noRetrysSOMuch,",Greedy,,
,,,,,,,,,,,,,,,
253,"['8132219', '13852596', '    public static void copyFile(String inFile, String outFile) {\n        File in = new File(inFile);\n        File out = new File(outFile);\n        try {\n            FileChannel inChannel = new FileInputStream(in).getChannel();\n            FileChannel outChannel = new FileOutputStream(out).getChannel();\n            try {\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n            } finally {\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n', '    public void execute() {\n        try {\n            if (methods == null) {\n                return;\n            }\n            List<Resource> resources = new ArrayList<Resource>();\n            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {\n                final Resource classFile = i.next();\n                if (!classFile.getName().equals(CALLSTACK_FILE)) {\n                    try {\n                        InputStream inputStream = classFile.getInputStream();\n                        ClassReader reader = new ClassReader(inputStream);\n                        reader.accept(new MethodAnalyzer(), 0);\n                        resources.add(classFile);\n                        oldSize += classFile.getSize();\n                    } catch (IllegalStateException e) {\n                    }\n                }\n            }\n            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {\n                final Resource classFile = i.next();\n                try {\n                    InputStream inputStream = classFile.getInputStream();\n                    ClassReader reader = new ClassReader(inputStream);\n                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf(\'.\')))) {\n                        reader.accept(new MethodInjector(writer), 0);\n                        byte[] b = writer.toByteArray();\n                        inputStream.close();\n                        OutputStream outputStream = classFile.getOutputStream();\n                        outputStream.write(b);\n                        outputStream.close();\n                        injectedClasses++;\n                    }\n                } catch (IllegalStateException e) {\n                }\n                newSize += classFile.getSize();\n            }\n            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);\n            if (!classFile.exists()) {\n                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");\n            }\n            InputStream inputStream = new FileInputStream(classFile);\n            ClassReader reader = new ClassReader(inputStream);\n            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n            try {\n                reader.accept(new PushMethodGenerator(writer), 0);\n            } finally {\n                inputStream.close();\n            }\n            byte[] b = writer.toByteArray();\n            inputStream.close();\n            OutputStream outputStream = new FileOutputStream(classFile);\n            outputStream.write(b);\n            outputStream.close();\n            log(injectedClasses + "" classes injected"");\n            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");\n            log((100 - ((oldSize * 100) / newSize)) + ""% code size increase"");\n        } catch (IOException e) {\n            log(e, 0);\n        }\n    }\n']",120,,1,1,,-3,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
254,"['14794404', '1097147', '    private String encryptPassword(String password) throws NoSuchAlgorithmException {\n        StringBuffer encryptedPassword = new StringBuffer();\n        MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n        md5.reset();\n        md5.update(password.getBytes());\n        byte digest[] = md5.digest();\n        for (int i = 0; i < digest.length; i++) {\n            String hex = Integer.toHexString(0xFF & digest[i]);\n            if (hex.length() == 1) {\n                encryptedPassword.append(\'0\');\n            }\n            encryptedPassword.append(hex);\n        }\n        return encryptedPassword.toString();\n    }\n', '    public static String getMessageDigest(String[] inputs) {\n        if (inputs.length == 0) return null;\n        try {\n            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");\n            for (String input : inputs) sha.update(input.getBytes());\n            byte[] hash = sha.digest();\n            String CPass = """";\n            int h = 0;\n            String s = """";\n            for (int i = 0; i < 20; i++) {\n                h = hash[i];\n                if (h < 0) h += 256;\n                s = Integer.toHexString(h);\n                if (s.length() < 2) CPass = CPass.concat(""0"");\n                CPass = CPass.concat(s);\n            }\n            CPass = CPass.toUpperCase();\n            return CPass;\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }\n']",125,,1,1,,-3,"encryptPassword,password,encryptedPassword,md5,digest,i,hex",,,,,Greedy,,
,,,,,,,,,,,,,,,
255,"['3266833', '13063241', '    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n        this.name = name;\n        this.contentType = contentType;\n        this.index = index;\n        this.extension = FilenameUtils.getExtension(this.name);\n        this.isImage = ImageUtils.isImage(name);\n        ArrayInputStream isAux = null;\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        try {\n            IOUtils.copy(is, out);\n            isAux = new ArrayInputStream(out.toByteArray());\n            if (this.isImage) {\n                this.bufferedImage = imaging.read(isAux);\n            }\n        } finally {\n            IOUtils.closeQuietly(out);\n            IOUtils.closeQuietly(isAux);\n        }\n        this.inputStream = new ArrayInputStream(out.toByteArray());\n    }\n', '    public static void copyFile(File src, File dest) throws IOException {\n        FileInputStream fis = new FileInputStream(src);\n        FileOutputStream fos = new FileOutputStream(dest);\n        java.nio.channels.FileChannel channelSrc = fis.getChannel();\n        java.nio.channels.FileChannel channelDest = fos.getChannel();\n        channelSrc.transferTo(0, channelSrc.size(), channelDest);\n        fis.close();\n        fos.close();\n    }\n']",153,,1,1,,-3,"is,name,contentType,index,extension,isImage,isAux,out,bufferedImage,inputStream",,,,,Greedy,,
,,,,,,,,,,,,,,,
256,"['11082670', '22442270', '    @SuppressWarnings(""unchecked"")\n    public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {\n        StringBuilder json = new StringBuilder();\n        String requestUrl = ""http://api.meetup.com/events.json/?group_urlname="" + groupIdentifier + ""&key="" + key;\n        try {\n            URL url = new URL(requestUrl.toString());\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                json.append(inputLine);\n            }\n            in.close();\n        } catch (IOException e) {\n            throw new GtugsException(e);\n        }\n        List<Event> events = new ArrayList<Event>();\n        JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());\n        JSONArray results = (JSONArray) jsonObj.get(""results"");\n        for (int i = 0; i < results.size(); i++) {\n            JSONObject result = (JSONObject) results.get(i);\n            Event e = new Event();\n            e.setAttendeeCount(Integer.parseInt((String) result.get(""rsvpcount"")));\n            e.setCity((String) result.get(""venue_city""));\n            e.setDescription((String) result.get(""description""));\n            e.setLatitude(Double.parseDouble((String) result.get(""venue_lat"")));\n            e.setLongitude(Double.parseDouble((String) result.get(""venue_lon"")));\n            e.setName((String) result.get(""name""));\n            Date myDate = null;\n            String time = (String) result.get(""time"");\n            try {\n                myDate = meetupDateFormat.parse(time);\n                e.setStartTime(timeDateFormat.format(myDate));\n                e.setEndTime(timeDateFormat.format(myDate));\n                e.setStartDate(myDate);\n                e.setEndDate(myDate);\n                String tz = tzDateFormat.format(myDate);\n                if (tz != null && tz.startsWith(""+"")) {\n                    tz = tz.substring(1);\n                }\n                e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));\n            } catch (ParseException ex) {\n                ex.printStackTrace();\n                continue;\n            }\n            e.setState((String) result.get(""venue_state""));\n            StringBuilder addressBuilder = new StringBuilder();\n            if (result.get(""venue_address1"") != null) {\n                addressBuilder.append((String) result.get(""venue_address1"") + "" "");\n            }\n            if (result.get(""venue_address2"") != null) {\n                addressBuilder.append((String) result.get(""venue_address2"") + "" "");\n            }\n            if (result.get(""venue_address3"") != null) {\n                addressBuilder.append((String) result.get(""venue_address3"") + "" "");\n            }\n            if (result.get(""venue_address4"") != null) {\n                addressBuilder.append((String) result.get(""venue_address4""));\n            }\n            e.setStreetAddress(addressBuilder.toString().trim());\n            e.setZipCode((String) result.get(""venue_zip""));\n            e.setUrl((String) result.get(""event_url""));\n            events.add(e);\n        }\n        return events;\n    }\n', '            @Override\n            public void handledRun() throws Throwable {\n                try {\n                    URL url = new URL(ONLINE_CLIENT_DATA + ""gamedata.xml"");\n                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n                    int lastversion = 0;\n                    String readHeader1 = br.readLine();\n                    String readHeader2 = br.readLine();\n                    String[] parts = readHeader2.split("" "");\n                    lastversion = new Integer(parts[1]);\n                    GameDatabase.loadVersion();\n                    if (GameDatabase.version < lastversion) {\n                        Logger.log(LogTypes.LOG, ""Downloading new gamedata"");\n                        BufferedOutputStream bo = null;\n                        File destfile = new File(GameDatabase.dataFilePath);\n                        if (!destfile.createNewFile()) {\n                            destfile.delete();\n                            destfile.createNewFile();\n                        }\n                        bo = new BufferedOutputStream(new FileOutputStream(destfile));\n                        bo.write((readHeader1 + ""\\n"").getBytes());\n                        bo.write((readHeader2 + ""\\n"").getBytes());\n                        int readedbyte;\n                        while ((readedbyte = br.read()) != -1) {\n                            bo.write(readedbyte);\n                        }\n                        bo.flush();\n                        try {\n                            br.close();\n                            bo.close();\n                        } catch (Exception ex) {\n                            Logger.log(ex);\n                        }\n                    }\n                } catch (java.net.UnknownHostException unknownHost) {\n                    Logger.log(""Sourceforge is down, cannot update gamedata"");\n                } catch (Exception e) {\n                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), ""The gamedata is outdated, but Coopnet couldn\'t update it!"", ""Gamedata outdated"", JOptionPane.INFORMATION_MESSAGE);\n                    throw e;\n                } finally {\n                    GameDatabase.loadVersion();\n                    GameDatabase.load("""", GameDatabase.dataFilePath);\n                    GameDatabase.detectGames();\n                }\n            }\n']",640,"    @SuppressWarnings(""unchecked"")
    public List<Event> lookUpAsyncEvents(String groupidentifiers) throws GtugsException {
        StringBuilder list = new StringBuilder();
        String responseUrl = ""http://api.meetup.com/events.json/?group_urlname="" + groupidentifiers + ""&key="" + key;
        try {
            URL github = new URL(responseUrl.toString());
            BufferedReader line = new BufferedReader(new InputStreamReader(github.openStream()));
            String readLine;
            while ((readLine = line.readLine()) != null) {
                list.append(readLine);
            }
            line.close();
        } catch (IOException eeee) {
            throw new GtugsException(eeee);
        }
        List<Event> versions = new ArrayList<Event>();
        JSONObject javascriptObject = (JSONObject) JSONValue.parse(list.toString());
        JSONArray lines = (JSONArray) javascriptObject.get(""results"");
        for (int index = 0; index < lines.size(); index++) {
            JSONObject entry = (JSONObject) lines.get(index);
            Event eeee = new Event();
            eeee.setAttendeeCount(Integer.parseInt((String) entry.get(""rsvpcount"")));
            eeee.setCity((String) entry.get(""venue_city""));
            eeee.setDescription((String) entry.get(""description""));
            eeee.setLatitude(Double.parseDouble((String) entry.get(""venue_lat"")));
            eeee.setLongitude(Double.parseDouble((String) entry.get(""venue_lon"")));
            eeee.setName((String) entry.get(""name""));
            Date myDate = null;
            String time = (String) entry.get(""time"");
            try {
                myDate = meetupDateFormat.parse(time);
                eeee.setStartTime(timeDateFormat.format(myDate));
                eeee.setEndTime(timeDateFormat.format(myDate));
                eeee.setStartDate(myDate);
                eeee.setEndDate(myDate);
                String tz = tzDateFormat.format(myDate);
                if (tz != null && tz.startsWith(""+"")) {
                    tz = tz.substring(1);
                }
                eeee.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));
            } catch (ParseException ex) {
                ex.printStackTrace();
                continue;
            }
            eeee.setState((String) entry.get(""venue_state""));
            StringBuilder addressBuilder = new StringBuilder();
            if (entry.get(""venue_address1"") != null) {
                addressBuilder.append((String) entry.get(""venue_address1"") + "" "");
            }
            if (entry.get(""venue_address2"") != null) {
                addressBuilder.append((String) entry.get(""venue_address2"") + "" "");
            }
            if (entry.get(""venue_address3"") != null) {
                addressBuilder.append((String) entry.get(""venue_address3"") + "" "");
            }
            if (entry.get(""venue_address4"") != null) {
                addressBuilder.append((String) entry.get(""venue_address4""));
            }
            eeee.setStreetAddress(addressBuilder.toString().trim());
            eeee.setZipCode((String) entry.get(""venue_zip""));
            eeee.setUrl((String) entry.get(""event_url""));
            versions.add(eeee);
        }
        return versions;
    }
",1,1,1,-1,"lookupFutureEvents,groupIdentifier,json,requestUrl,url,in,inputLine,events,jsonObj,results,i,result,e,myDate,time,tz","lookupFutureEvents:-1.5283808296109423e-06,groupIdentifier:-2.7197378653067128e-06,json:3.532127097800926e-08,requestUrl:-4.840485843611352e-06,url:5.455664646478347e-06,in:-1.6823962882713034e-05,inputLine:-8.83252532393844e-06,events:3.4725224530255353e-06,jsonObj:-7.1231229805652e-07,results:9.889955873842592e-07,i:-3.2171790982470097e-06,result:2.5278256263261958e-05,e:7.452052316547911e-06,myDate:2.0238352410587262e-05,time:2.1192762586805556e-06,tz:1.4066696166992188e-05,",13,66,"groupIdentifier:groupidentifiers,json:list,requestUrl:responseUrl,url:github,in:line,events:versions,i:index,e:eeee,jsonObj:javascriptObject,lookupFutureEvents:lookUpAsyncEvents,inputLine:readLine,results:lines,result:entry,tz:tz,time:time,myDate:myDate,",Greedy,,
,,,,,,,,,,,,,,,
257,"['20623709', '4895903', '    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n        if (!targetDirectory.exists()) {\n            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());\n        }\n        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n            FileInputStream fis = new FileInputStream(this);\n            FileChannel fci = fis.getChannel();\n            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));\n            FileChannel fco = fos.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(64000);\n            while (fci.read(buffer) > 0) {\n                buffer.flip();\n                fco.write(buffer);\n                buffer.clear();\n            }\n            fci.close();\n            fco.close();\n            return (long) 1;\n        } else {\n            long currentBasesCount = 0;\n            long currentEntriesCount = 0;\n            int targetCount = 0;\n            FileChannel fastaChannel = new FileInputStream(this).getChannel();\n            int totalSeqCount = 0;\n            long totalResiduesCount = 0;\n            try {\n                long prevTime = System.currentTimeMillis();\n                long fastaFileSize = this.length();\n                long fastaFileReadOffset = 0L;\n                long partitionStartOffset = 0L;\n                final int bufferSize = 1024 * 1024;\n                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n                int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                for (; fastaFileReadOffset < fastaFileSize; ) {\n                    long nBytes = fastaChannel.read(fastaBuffer);\n                    if (nBytes <= 0) {\n                        fastaBuffer.limit(0);\n                        break;\n                    } else {\n                        fastaBuffer.flip();\n                        fastaFileReadOffset += nBytes;\n                    }\n                    for (; ; ) {\n                        if (!fastaBuffer.hasRemaining()) {\n                            fastaBuffer.clear();\n                            break;\n                        }\n                        int b = fastaBuffer.get();\n                        if (b == \'\\r\') {\n                        } else if (b == \'\\n\') {\n                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n                            }\n                        } else if (b == \'>\') {\n                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            }\n                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n                                    fastaBuffer.position(fastaBuffer.position() - 1);\n                                    long currentTime = System.currentTimeMillis();\n                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");\n                                    prevTime = currentTime;\n                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();\n                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n                                    partitionChannel.force(true);\n                                    partitionChannel.close();\n                                    targetCount++;\n                                    partitionStartOffset += nBytes;\n                                    currentBasesCount = 0;\n                                    currentEntriesCount = 0;\n                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                                } else {\n                                    fastaReadState = FASTAFileTokenizer.DEFLINE;\n                                    currentEntriesCount++;\n                                }\n                                totalSeqCount++;\n                            }\n                        } else {\n                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                totalResiduesCount++;\n                                currentBasesCount++;\n                            }\n                        }\n                    }\n                }\n                if (partitionStartOffset < fastaFileSize) {\n                    long currentTime = System.currentTimeMillis();\n                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");\n                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();\n                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n                    partitionChannel.force(true);\n                    partitionChannel.close();\n                    targetCount++;\n                }\n                if (size.isUnknown()) {\n                    size.setBases(totalResiduesCount);\n                    size.setEntries(totalSeqCount);\n                }\n            } finally {\n                fastaChannel.close();\n            }\n            return (long) targetCount;\n        }\n    }\n', '    public List load(String sourceType, Object source, String param) throws Exception {\n        if (log.isTraceEnabled()) {\n            log.trace(""load "" + source);\n        }\n        String location = null;\n        String type = null;\n        Object inputsource = null;\n        if (source instanceof DynamicMBean) {\n            sourceType = ""MbeansDescriptorsDynamicMBeanSource"";\n            inputsource = source;\n        } else if (source instanceof URL) {\n            URL url = (URL) source;\n            location = url.toString();\n            type = param;\n            inputsource = url.openStream();\n            if (sourceType == null) {\n                sourceType = sourceTypeFromExt(location);\n            }\n        } else if (source instanceof File) {\n            location = ((File) source).getAbsolutePath();\n            inputsource = new FileInputStream((File) source);\n            type = param;\n            if (sourceType == null) {\n                sourceType = sourceTypeFromExt(location);\n            }\n        } else if (source instanceof InputStream) {\n            type = param;\n            inputsource = source;\n        } else if (source instanceof Class) {\n            location = ((Class) source).getName();\n            type = param;\n            inputsource = source;\n            if (sourceType == null) {\n                sourceType = ""MbeansDescriptorsIntrospectionSource"";\n            }\n        }\n        if (sourceType == null) {\n            sourceType = ""MbeansDescriptorsDigesterSource"";\n        }\n        ModelerSource ds = getModelerSource(sourceType);\n        List mbeans = ds.loadDescriptors(this, location, type, inputsource);\n        return mbeans;\n    }\n']",828,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
",0,0,0,-1,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes","split:-5.1383314461543646e-09,targetDirectory:-1.0790496036924166e-07,prefix:-3.288532125538793e-08,maxUnitBases:2.7746989809233566e-08,maxUnitEntries:6.679830880000674e-08,fis:-3.082998867692619e-08,fci:-5.549397961846713e-08,fos:-6.782597508923761e-08,fco:-2.158099207384833e-08,buffer:-8.221330313846983e-08,currentBasesCount:1.2331995470770474e-08,currentEntriesCount:1.8497993206155712e-08,targetCount:-2.4663990941540948e-08,fastaChannel:6.679830880000674e-08,totalSeqCount:3.0829988676926185e-09,totalResiduesCount:1.2331995470770474e-08,prevTime:8.221330313846983e-09,fastaFileSize:3.596832012308055e-08,fastaFileReadOffset:1.5414994338463094e-08,partitionStartOffset:1.438732804923222e-08,bufferSize:-1.2331995470770474e-08,fastaBuffer:5.652164590769801e-08,fastaReadState:2.26086583630792e-08,nBytes:1.0276662892308729e-08,",0,0,"targetDirectory:targetDirectory,prefix:prefix,fos:fos,split:split,maxUnitBases:maxUnitBases,maxUnitEntries:maxUnitEntries,targetCount:targetCount,currentBasesCount:currentBasesCount,currentEntriesCount:currentEntriesCount,prevTime:prevTime,fastaFileReadOffset:fastaFileReadOffset,fastaBuffer:fastaBuffer,buffer:buffer,fastaReadState:fastaReadState,fis:fis,fci:fci,fco:fco,fastaChannel:fastaChannel,bufferSize:bufferSize,fastaFileSize:fastaFileSize,totalSeqCount:totalSeqCount,totalResiduesCount:totalResiduesCount,partitionStartOffset:partitionStartOffset,nBytes:nBytes,",Greedy,,
,,,,,,,,,,,,,,,
258,"['13152325', '293167', '    public void loadExistingAntlibs(ClassLoader classLoader) {\n        URL antlibUrl;\n        URI antlibUri;\n        try {\n            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);\n            while (resources.hasMoreElements()) {\n                URL url = resources.nextElement();\n                InputStream stream = url.openStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, ""UTF-8""));\n                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                    String pkg = line.trim();\n                    URI uri = URI.create(""antlib:"" + pkg);\n                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace(\'.\', \'/\') + (pkg.isEmpty() ? """" : ""/"") + ""antlib.xml"");\n                    antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);\n                    try {\n                        antlibUrl = antlibUri.toURL();\n                    } catch (IllegalArgumentException e) {\n                        System.err.println(""base uri: "" + url);\n                        System.err.println(""relativepath: "" + resource2antlib);\n                        System.err.println(""target uri: "" + antlibUri);\n                        throw new RuntimeException(antlibUri.toString(), e);\n                    }\n                    loadAntLib(antlibUrl, uri);\n                }\n                reader.close();\n                stream.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }\n', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n']",291,"    public void loadExistingantlibd(ClassLoader classLoader) {
        URL antsLibRel;
        URI antlibURI;
        try {
            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);
            while (resources.hasMoreElements()) {
                URL mount = resources.nextElement();
                InputStream view = mount.openStream();
                BufferedReader row = new BufferedReader(new InputStreamReader(view, ""UTF-8""));
                for (String line = row.readLine(); line != null; line = row.readLine()) {
                    String pkg = line.trim();
                    URI handler = URI.create(""antlib:"" + pkg);
                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? """" : ""/"") + ""antlib.xml"");
                    antlibURI = NetUtils.resolve(mount.toURI(), resource2antlib);
                    try {
                        antsLibRel = antlibURI.toURL();
                    } catch (IllegalArgumentException e) {
                        System.err.println(""base uri: "" + mount);
                        System.err.println(""relativepath: "" + resource2antlib);
                        System.err.println(""target uri: "" + antlibURI);
                        throw new RuntimeException(antlibURI.toString(), e);
                    }
                    loadAntLib(antsLibRel, handler);
                }
                row.close();
                view.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
",1,1,1,-1,"loadExistingAntlibs,classLoader,antlibUrl,antlibUri,resources,url,stream,reader,line,pkg,uri,resource2antlib","loadExistingAntlibs:4.3266858810033555e-06,classLoader:-6.327262291541467e-06,antlibUrl:-3.287425407996545e-06,antlibUri:-9.5520264063126e-06,resources:-3.126951364370493e-05,url:-4.01460207425631e-05,stream:-1.3663218571589543e-06,reader:-8.585514166416266e-05,line:-4.924260652982271e-05,pkg:-1.1003934420072115e-05,uri:-4.264024587777944e-06,resource2antlib:-1.1655000539926383e-05,",7,22,"classLoader:classLoader,resources:resources,pkg:pkg,resource2antlib:resource2antlib,reader:row,line:line,stream:view,loadExistingAntlibs:loadExistingantlibd,antlibUrl:antsLibRel,antlibUri:antlibURI,url:mount,uri:handler,",Greedy,,
,,,,,,,,,,,,,,,
259,"['8452134', '310182', '    public int exists(String fileToCheck) throws IOException {\n        FTPClient ftp = new FTPClient();\n        int found = 0;\n        try {\n            int reply = 0;\n            ftp.connect(this.endpointURL, this.endpointPort);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                throw new IOException(""Ftp exists server refused connection."");\n            }\n            if (!ftp.login(""anonymous"", """")) {\n                ftp.logout();\n                throw new IOException(""FTP: server wrong passwd"");\n            }\n            ftp.enterLocalPassiveMode();\n            if (ftp.listNames(fileToCheck) != null) {\n                found = 1;\n            }\n            ftp.logout();\n        } catch (Exception e) {\n            throw new IOException(e.getMessage());\n        }\n        return found;\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",156,,0,0,,-3,"exists,fileToCheck,ftp,found,reply",,,,,Greedy,,
,,,,,,,,,,,,,,,
260,"['8588992', '823074', '    public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        String status = null;\n        HttpSession session = request.getSession();\n        ReportingBean reportingBean = null;\n        NewConceptBean conceptBean = null;\n        String conceptName = null;\n        String primitive = null;\n        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");\n        LogonUtilities logonUtilities = new LogonUtilities();\n        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {\n            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");\n            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {\n                reportingBean.setReportingHtml("""");\n            }\n            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");\n            conceptName = request.getParameter(""conceptName"");\n            primitive = request.getParameter(""primitive"");\n            if (primitive == null) {\n                primitive = ""false"";\n            }\n            conceptBean.setConceptName(conceptName);\n            conceptBean.setPrimitive(primitive);\n            String namespace = conceptBean.getConceptNamespace();\n            if (namespace == null) {\n                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));\n                session.setAttribute(""reportingBean"", reportingBean);\n                status = ""classify_fail"";\n                return (mapping.findForward(status));\n            }\n            String[] roleMods = request.getParameterValues(""some_or_all"");\n            String[] roleGrps = request.getParameterValues(""role_group"");\n            Vector roles = conceptBean.getRoles();\n            RoleBean[] roleCons = new RoleBean[roles.size()];\n            roles.copyInto(roleCons);\n            if (roleMods != null && roleGrps != null && roleCons != null) {\n                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {\n                    for (int i = 0; i < roleCons.length; i++) {\n                        roleCons[i].setSomeOrAll(roleMods[i]);\n                        roleCons[i].setRoleGroup(roleGrps[i]);\n                    }\n                }\n            }\n            session.setAttribute(""newConceptEntity"", conceptBean);\n            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();\n            xmlBean.setNewConceptXml(conceptBean);\n            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);\n            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");\n            Properties configProps = configPh.getProps();\n            String urlString = configProps.getProperty(""url"");\n            URL url = new URL(urlString);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(data);\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            StringBuffer buf = new StringBuffer();\n            while ((line = rd.readLine()) != null) {\n                buf.append(line);\n            }\n            String resultXml = buf.toString();\n            wr.close();\n            rd.close();\n            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();\n            ClassifyResultParser parser = new ClassifyResultParser(resultXml);\n            ResultBuilder rbuilder = new ResultBuilder();\n            rbuilder.setConceptBean(ccBean);\n            rbuilder.setParser(parser);\n            rbuilder.setNamespace(namespace);\n            try {\n                rbuilder.buildResult();\n                ccBean = rbuilder.getConceptBean();\n                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();\n                displayBean.setNewConceptHtml(ccBean);\n                session.setAttribute(""classifyResult"", ccBean);\n                session.setAttribute(""classifyDisplayResult"", displayBean);\n                status = ""success"";\n            } catch (Exception e) {\n                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));\n                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());\n                session.setAttribute(""reportingBean"", reportingBean);\n                status = ""classify_fail"";\n            }\n        }\n        return (mapping.findForward(status));\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",754,"    public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession save = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(save, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) save.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) save.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                save.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (mapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            save.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                save.setAttribute(""classifyResult"", ccBean);
                save.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                save.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (mapping.findForward(status));
    }
",0,0,1,1,"perform,mapping,form,request,response,status,session,reportingBean,conceptBean,conceptName,primitive,errorMessages,logonUtilities,namespace,roleMods,roleGrps,roles,roleCons","perform:3.5770055724353327e-06,mapping:1.4180817255159703e-05,form:5.349880311547257e-06,request:-2.108696030407417e-05,response:0.012060310055569906,status:-7.945735280106708e-05,session:-0.00027968898052122535,reportingBean:-5.822356154279011e-07,conceptBean:-0.00020017856504858994,conceptName:-3.8695771519730726e-05,primitive:-0.00014568974332111636,errorMessages:8.103324145805546e-06,logonUtilities:7.223792192412586e-06,namespace:-4.795411737953745e-05,roleMods:-1.802677061499619e-06,roleGrps:-1.802677061499619e-06,roles:-9.136955912520245e-07,roleCons:-8.58306884765625e-06,",1,9,"namespace:namespace,session:save,",Greedy,,
,,,,,,,,,,,,,,,
261,"['16466743', '9826240', '    public String getmd5(String password) {\n        String pwHash = """";\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n            md.reset();\n            md.update(password.getBytes());\n            byte[] b = md.digest();\n            for (int i = 0; i < b.length; i++) {\n                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.fatal(""MD5 Hash Algorithm not found"", ex);\n        }\n        Logger.info(""PWHash erzeugt und wird übergeben"");\n        return pwHash;\n    }\n', '    private boolean checkHashBack(Facade facade, HttpServletRequest req) {\n        String txtTransactionID = req.getParameter(""txtTransactionID"");\n        String txtOrderTotal = req.getParameter(""txtOrderTotal"");\n        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);\n        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);\n        String txtHashBack = req.getParameter(""txtHashBack"");\n        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);\n        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;\n        MessageDigest digest;\n        try {\n            digest = java.security.MessageDigest.getInstance(""MD5"");\n            digest.update(securityValue.getBytes());\n            byte[] array = digest.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            String hash = sb.toString();\n            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + hash + "" "" + txtHashBack);\n            if (txtHashBack.equals(hash)) {\n                return true;\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n']",129,"    public String  getmd4(String path) {
        String pwsHas = """";
        MessageDigest desc = null;
        try {
            desc = MessageDigest.getInstance(""MD5"");
            desc.reset();
            desc.update(path.getBytes());
            byte[] batch = desc.digest();
            for (int index = 0; index < batch.length; index++) {
                pwsHas += Integer.toString((batch[index] & 0xFF) + 0x100, 16).substring(1);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.fatal(""MD5 Hash Algorithm not found"", ex);
        }
        Logger.info(""PWHash erzeugt und wird übergeben"");
        return pwsHas;
    }
",1,1,1,-1,"getmd5,password,pwHash,md,b,i","getmd5:7.152557373046875e-07,password:3.033214145236545e-06,pwHash:6.953875223795573e-07,md:-2.2517310248480903e-06,b:1.2715657552083333e-06,i:-2.9669867621527774e-06,",6,18,"pwHash:pwsHas,b:batch,i:index,md:desc,password:path,getmd5: getmd4,",Greedy,,
,,,,,,,,,,,,,,,
262,"['14001795', '4618237', '    public static void copyOverWarFile() {\n        System.out.println(""Copy Over War File:"");\n        File dir = new File(theAppsDataDir);\n        FileFilter ff = new WildcardFileFilter(""*.war"");\n        if (dir.listFiles(ff).length == 0) {\n            dir = new File(System.getProperty(""user.dir"") + ""/war"");\n            if (dir.exists()) {\n                File[] files = dir.listFiles(ff);\n                for (File f : files) {\n                    try {\n                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());\n                        System.out.println(""Creating new file \\"""" + f.getAbsolutePath() + ""\\"""");\n                        newFile.createNewFile();\n                        InputStream fi = new FileInputStream(f);\n                        OutputStream fo = new FileOutputStream(newFile);\n                        IOUtils.copy(fi, fo);\n                        moveUnzipAndExtract(newFile);\n                    } catch (Exception ex) {\n                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);\n                    }\n                }\n            }\n        } else {\n            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");\n        }\n        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));\n        System.setProperty(""user.dir"", theAppsDataDir);\n        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));\n    }\n', '    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n        FileChannel inChannel = new FileInputStream(fin).getChannel();\n        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            if (inChannel != null) try {\n                inChannel.close();\n            } catch (IOException ex) {\n            }\n            if (outChannel != null) try {\n                outChannel.close();\n            } catch (IOException ex) {\n            }\n        }\n    }\n']",256,,1,1,,-3,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,,,,Greedy,,
,,,,,,,,,,,,,,,
263,"['5414088', '9846843', '    public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n        String fileName = file.getFileName();\n        String assetsPath = FileFactory.getRealAssetsRootPath();\n        new java.io.File(assetsPath).mkdir();\n        java.io.File workingFile = getAssetIOFile(file);\n        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n        if (destination != null && destination.getInode() > 0) {\n            FileInputStream is = new FileInputStream(workingFile);\n            FileChannel channelFrom = is.getChannel();\n            java.io.File newVersionFile = getAssetIOFile(destination);\n            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n            channelFrom.transferTo(0, channelFrom.size(), channelTo);\n            channelTo.force(false);\n            channelTo.close();\n            channelFrom.close();\n        }\n        if (newDataFile != null) {\n            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n            writeCurrentChannel.truncate(0);\n            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n            writeCurrentChannel.force(false);\n            writeCurrentChannel.close();\n            fromChannel.close();\n            if (UtilMethods.isImage(fileName)) {\n                BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n                int height = img.getHeight();\n                file.setHeight(height);\n                int width = img.getWidth();\n                file.setWidth(width);\n            }\n            String folderPath = workingFile.getParentFile().getAbsolutePath();\n            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n            java.io.File directory = new java.io.File(folderPath);\n            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n            for (java.io.File iofile : files) {\n                try {\n                    iofile.delete();\n                } catch (SecurityException e) {\n                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");\n                } catch (Exception e) {\n                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());\n                }\n            }\n        }\n    }\n', '    public byte[] getResponse() {\n        final ByteArrayInputStream bais = new ByteArrayInputStream(request);\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        List<String> lines = Collections.emptyList();\n        try {\n            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);\n            lines = dl;\n        } catch (IOException ioex) {\n            throw new AssertionError(ioex);\n        }\n        String resource = null;\n        for (String line : lines) {\n            if (line.startsWith(""GET "")) {\n                int endIndex = line.lastIndexOf(\' \');\n                resource = line.substring(4, endIndex);\n            }\n        }\n        final PrintStream printStream = new PrintStream(baos);\n        if (resource == null) {\n            printStream.println(""HTTP/1.1 400 Bad Request"");\n        } else {\n            final InputStream inputStream = getClass().getResourceAsStream(resource);\n            if (inputStream == null) {\n                printStream.println(""HTTP/1.1 404 Not Found"");\n                printStream.println();\n            } else {\n                printStream.println(""HTTP/1.1 200 OK"");\n                printStream.println();\n                try {\n                    IOUtils.copy(inputStream, printStream);\n                } catch (IOException ioex) {\n                    throw new AssertionError(ioex);\n                }\n            }\n        }\n        printStream.flush();\n        printStream.close();\n        return baos.toByteArray();\n    }\n']",455,,1,1,,-3,"saveFileData,file,destination,newDataFile,fileName,assetsPath,workingFile,vc,is,channelFrom,newVersionFile,channelTo,writeCurrentChannel,fromChannel,img,height,width,folderPath,directory,files",,,,,Greedy,,
,,,,,,,,,,,,,,,
264,"['812803', '8490297', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public static void copyFile(File src, File dst) throws IOException {\n        try {\n            InputStream in = new FileInputStream(src);\n            OutputStream out = new FileOutputStream(dst);\n            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n            int len;\n            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e1) {\n            MLUtil.runtimeError(e1, src.toString());\n        } catch (IOException e2) {\n            MLUtil.runtimeError(e2, src.toString());\n        }\n    }\n']",765,"    public void compprocess(File url, File test) throws IOException {
        InputStream reader = new BufferedInputStream(new FileInputStream(url));
        DcmParser d = pfact.newDcmParser(reader);
        Dataset aws = fact.newDataset();
        d.setDcmHandler(aws.getDcmHandler());
        try {
            FileFormat format = d.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            d.parseDcmFile(format, Tags.PixelData);
            if (aws.contains(Tags.StudyInstanceUID) || aws.contains(Tags.SeriesInstanceUID) || aws.contains(Tags.SOPInstanceUID) || aws.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not compprocess"");
                return;
            }
            boolean haspixelData = d.getReadTag() == Tags.PixelData;
            boolean Informat = haspixelData && aws.getInt(Tags.BitsAllocated, 0) == 12;
            int pxls = d.getReadLength();
            if (haspixelData) {
                if (Informat) {
                    aws.putUS(Tags.BitsAllocated, 16);
                    pxls = pxls * 4 / 3;
                }
                if (pxls != (aws.getInt(Tags.BitsAllocated, 0) >>> 3) * aws.getInt(Tags.Rows, 0) * aws.getInt(Tags.Columns, 0) * aws.getInt(Tags.NumberOfFrames, 1) * aws.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + src + "": mismatch pixel data length!"" + "" => do not compprocess"");
                    return;
                }
            }
            aws.putUI(Tags.StudyInstanceUID, uid(studyUID));
            aws.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            aws.putUI(Tags.SOPInstanceUID, uid(instUID));
            aws.putUI(Tags.SOPClassUID, classUID);
            if (!aws.contains(Tags.NumberOfSamples)) {
                aws.putUS(Tags.NumberOfSamples, 1);
            }
            if (!aws.contains(Tags.PhotometricInterpretation)) {
                aws.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                aws.setFileMetaInfo(fact.newFileMetaInfo(aws, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(test));
            try {
            } finally {
                aws.writeFile(out, encodeParam());
                if (haspixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxls + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxls);
                    out.write((byte) (pxls >> 8));
                    out.write((byte) (pxls >> 16));
                    out.write((byte) (pxls >> 24));
                }
                if (Informat) {
                    int b2, b3;
                    for (; pxls > 0; pxls -= 3) {
                        out.write(reader.read());
                        b2 = reader.read();
                        b3 = reader.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxls > 0; --pxls) {
                        out.write(reader.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            reader.close();
        }
    }
",1,1,0,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:-1.1273052381432574e-07,src:7.126642310101053e-08,dest:1.4512435249660327e-07,in:-8.163244827933934e-08,p:-1.6326489655867865e-07,ds:3.1098075534986414e-07,format:-3.109807553498641e-08,hasPixelData:-6.737916365913722e-08,inflate:1.943629720936651e-08,pxlen:1.1791353640349014e-07,out:1.2542890465777854e-06,",9,67,"src:url,in:reader,p:d,ds:aws,convert:compprocess,dest:test,pxlen:pxls,hasPixelData:haspixelData,inflate:Informat,",Greedy,,
,,,,,,,,,,,,,,,
265,"['9371421', '9081749', '    public static String eventHash(String eventstr) {\n        try {\n            if (md == null) {\n                md = MessageDigest.getInstance(""MD5"");\n            }\n            md.update(eventstr.getBytes(""utf-8""));\n            byte[] theDigest = md.digest();\n            return new BASE64Encoder().encode(theDigest);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n', '    private static String encrypt(String password, String encryptType) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(encryptType);\n            md.update(password.getBytes());\n            byte[] hash = md.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                if ((0xff & hash[i]) < 0x10) {\n                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));\n                } else {\n                    hexString.append(Integer.toHexString(0xFF & hash[i]));\n                }\n            }\n            password = hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return password.toUpperCase();\n    }\n']",94,,1,1,,-3,"eventHash,eventstr,md,theDigest",,,,,Greedy,,
,,,,,,,,,,,,,,,
266,"['4168534', '7425022', '    public String insertSmsInf(Sms sms) throws Exception {\n        String smsId = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        StringBuffer buffer = new StringBuffer();\n        try {\n            buffer.append(""INSERT INTO COMTNSMS\\n"");\n            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n"");\n            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n"");\n            buffer.append(""VALUES\\n"");\n            buffer.append(""(?, ?, ?, ?, SYSDATE())"");\n            conn = SmsBasicDBUtil.getConnection();\n            conn.setAutoCommit(false);\n            smsId = getNextId(conn);\n            pstmt = conn.prepareStatement(buffer.toString());\n            int index = 0;\n            pstmt.setString(++index, smsId);\n            pstmt.setString(++index, sms.getTrnsmitTelno());\n            pstmt.setString(++index, sms.getTrnsmitCn());\n            pstmt.setString(++index, sms.getFrstRegisterId());\n            pstmt.executeUpdate();\n            conn.commit();\n            return smsId;\n        } catch (Exception ex) {\n            if (conn != null) {\n                conn.rollback();\n            }\n            throw ex;\n        } finally {\n            SmsBasicDBUtil.close(null, pstmt, conn);\n        }\n    }\n', '    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n        String filePath = null;\n        try {\n            URL endpoint = new URL(wsdlURL);\n            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n            conn.setDoOutput(false);\n            conn.setDoInput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(""GET"");\n            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");\n            conn.setRequestProperty(""Connection"", ""close"");\n            if (userPassword != null) {\n                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n            }\n            InputStream is = null;\n            if (conn.getResponseCode() == 200) {\n                is = conn.getInputStream();\n            } else {\n                is = conn.getErrorStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                StringWriter sw = new StringWriter();\n                char[] buf = new char[200];\n                int read = 0;\n                while (read != -1) {\n                    read = isr.read(buf);\n                    sw.write(buf);\n                }\n                throw new WiseConnectionException(""Remote server\'s response is an error: "" + sw.toString());\n            }\n            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));\n            if (!outputDir.exists()) {\n                outputDir.mkdir();\n                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");\n            }\n            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());\n            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n            IOUtils.copyStream(fos, is);\n            fos.close();\n            is.close();\n            filePath = file.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(""Wsdl download failed!"", e);\n        }\n        return filePath;\n    }\n']",210,"    public String  insertSmbById(Sms sms) throws Exception {
        String smsById = null;
        Connection cmd = null;
        PreparedStatement pstcmd = null;
        StringBuffer url = new StringBuffer();
        try {
            url.append(""INSERT INTO COMTNSMS
"");
            url.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,
"");
            url.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )
"");
            url.append(""VALUES
"");
            url.append(""(?, ?, ?, ?, SYSDATE())"");
            cmd = SmsBasicDBUtil.getConnection();
            cmd.setAutoCommit(false);
            smsById = getNextId(cmd);
            pstcmd = cmd.prepareStatement(url.toString());
            int axis = 0;
            pstcmd.setString(++axis, smsById);
            pstcmd.setString(++axis, sms.getTrnsmitTelno());
            pstcmd.setString(++axis, sms.getTrnsmitCn());
            pstcmd.setString(++axis, sms.getFrstRegisterId());
            pstcmd.executeUpdate();
            cmd.commit();
            return smsById;
        } catch (Exception aux) {
            if (cmd != null) {
                cmd.rollback();
            }
            throw aux;
        } finally {
            SmsBasicDBUtil.close(null, pstcmd, cmd);
        }
    }
",0,0,0,-1,"insertSmsInf,sms,smsId,conn,pstmt,buffer,index,ex","insertSmsInf:-3.02046537399292e-06,sms:-2.729296684265137e-05,smsId:-1.0800361633300782e-05,conn:-0.00015913546085357665,pstmt:-6.192922592163086e-05,buffer:-8.728504180908202e-05,index:-3.777444362640381e-06,ex:-1.3619661331176759e-06,",7,36,"conn:cmd,pstmt:pstcmd,buffer:url,insertSmsInf: insertSmbById,sms:sms,smsId:smsById,ex:aux,index:axis,",Greedy,,
,,,,,,,,,,,,,,,
267,"['12380475', '18974466', '    public void transport(File file) throws TransportException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                File[] files = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    transport(file);\n                }\n            } else if (file.isFile()) {\n                try {\n                    FileChannel inChannel = new FileInputStream(file).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    inChannel.transferTo(0, inChannel.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(""File transfer failed"", e);\n                }\n            }\n        }\n    }\n', '    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n']",137,,1,1,,-3,"transport,file,files,i,inChannel,outChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
268,"['7044685', '2910383', '    static String encrypt(String plaintext) {\n        MessageDigest d = null;\n        try {\n            d = MessageDigest.getInstance(""SHA-1"");\n            d.update(plaintext.getBytes(""UTF-8""));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new String(Base64.encodeBase64(d.digest()));\n    }\n', '    public String downloadAndOpen(JProgressBar bar) {\n        long size = 0;\n        try {\n            size = photo.getSize();\n        } catch (ServiceException ex) {\n            ex.printStackTrace();\n        }\n        try {\n            bar.setMaximum((int) size);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        bar.setValue(0);\n        image = new File(""TMP/"" + photo.getTitle().getPlainText());\n        try {\n            if (!image.exists()) {\n                image.createNewFile();\n                image.deleteOnExit();\n                URL url = null;\n                BufferedOutputStream fOut = null;\n                try {\n                    url = new URL(photo.getMediaContents().get(0).getUrl());\n                    InputStream html = null;\n                    html = url.openStream();\n                    fOut = new BufferedOutputStream(new FileOutputStream(image));\n                    byte[] buffer = new byte[32 * 1024];\n                    int bytesRead = 0;\n                    int in = 0;\n                    while ((bytesRead = html.read(buffer)) != -1) {\n                        in += bytesRead;\n                        bar.setValue(in);\n                        fOut.write(buffer, 0, bytesRead);\n                    }\n                    html.close();\n                    fOut.close();\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                }\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return image.getAbsolutePath();\n    }\n']",68,"    static String  encryption(String messagedata) {
        MessageDigest D = null;
        try {
            D = MessageDigest.getInstance(""SHA-1"");
            D.update(messagedata.getBytes(""UTF-8""));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new String(Base64.encodeBase64(D.digest()));
    }
",0,0,0,-1,"encrypt,plaintext,d","encrypt:4.2574746268136155e-08,plaintext:2.5544847760881696e-07,d:-6.130763462611607e-07,",3,7,"d:D,encrypt: encryption,plaintext:messagedata,",Greedy,,
,,,,,,,,,,,,,,,
269,"['23510383', '8788371', '    public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n        int index = file.getName().lastIndexOf(""."");\n        String name = file.getName().substring(0, index);\n        DecimalFormat format = new DecimalFormat(""####"");\n        format.setMinimumIntegerDigits(4);\n        int count = 0;\n        File main = new File(name);\n        if (main.exists()) {\n            throw new IOException(main.getAbsolutePath());\n        }\n        main.mkdir();\n        File version = new File(main, ""version"");\n        version.createNewFile();\n        PrintWriter writer = new PrintWriter(version);\n        writer.write(Videso3D.VERSION);\n        writer.flush();\n        writer.close();\n        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");\n        xmlDir.mkdir();\n        if (types != null && !types.isEmpty()) {\n            File databases = new File(main.getAbsolutePath() + ""/databases"");\n            databases.mkdir();\n            for (String t : types) {\n                Type type = DatabaseManager.stringToType(t);\n                if (type != null) {\n                    if (onlyLinks) {\n                        if (databasesIncluded) {\n                            String currentName = DatabaseManager.getCurrentName(type);\n                            File baseCopy = new File(databases, currentName + ""."" + type);\n                            baseCopy.createNewFile();\n                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n                            destination.transferFrom(source, 0, source.size());\n                            source.close();\n                            destination.close();\n                            List<String[]> clefs = new ArrayList<String[]>();\n                            Statement st = DatabaseManager.getCurrent(Type.Databases);\n                            ResultSet rs = st.executeQuery(""select * from clefs where type=\'"" + currentName + ""\'"");\n                            while (rs.next()) {\n                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });\n                            }\n                            st.close();\n                            if (!clefs.isEmpty()) {\n                                File clefsFile = new File(databases, currentName + ""_clefs"");\n                                clefsFile.createNewFile();\n                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n                                oos.writeObject(clefs);\n                                oos.close();\n                            }\n                            File filesDir = new File(currentName + ""_files"");\n                            if (filesDir.exists() && filesDir.isDirectory()) {\n                                File baseFiles = new File(databases, currentName + ""_files"");\n                                baseFiles.mkdirs();\n                                for (File f : filesDir.listFiles()) {\n                                    File copy = new File(baseFiles, f.getName());\n                                    copy.createNewFile();\n                                    source = new FileInputStream(f).getChannel();\n                                    destination = new FileOutputStream(copy).getChannel();\n                                    destination.transferFrom(source, 0, source.size());\n                                    source.close();\n                                    destination.close();\n                                }\n                            }\n                        }\n                        File selectedObjects = new File(databases, type.toString());\n                        selectedObjects.createNewFile();\n                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n                        oos.writeObject(objects.get(type));\n                        oos.close();\n                    } else {\n                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));\n                        }\n                    }\n                }\n            }\n        }\n        File imagesDir = new File(main.getAbsolutePath() + ""/images"");\n        imagesDir.mkdir();\n        for (EditableSurfaceImage si : this.getImages()) {\n            if (images.contains(si.getName())) {\n                int idx = si.getName().lastIndexOf(""."");\n                String newName = si.getName();\n                if (idx != -1) {\n                    newName = si.getName().substring(0, idx);\n                }\n                File img = new File(imagesDir, newName + "".gtif"");\n                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n            }\n        }\n        File trajectoDir = new File(main, ""trajectory"");\n        trajectoDir.mkdirs();\n        for (Layer l : wwd.getModel().getLayers()) {\n            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);\n                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n                    geoWriter.writeTrack((GEOTrack) track);\n                }\n                geoWriter.close();\n            }\n        }\n        if (types != null && types.contains(""Autres objets affichés."")) {\n            for (Layer l : wwd.getModel().getLayers()) {\n                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));\n                    }\n                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n                        if (r instanceof Restorable) {\n                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));\n                        }\n                    }\n                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));\n                    }\n                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));\n                    }\n                }\n            }\n        }\n        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));\n        }\n        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));\n        FileManager.createZipFile(file, main);\n        FileManager.deleteFile(main);\n        return true;\n    }\n', '    private void tail(String[] cmd, int pos) throws IOException {\n        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");\n        String src = null;\n        Path path = null;\n        try {\n            List<String> parameters = c.parse(cmd, pos);\n            src = parameters.get(0);\n        } catch (IllegalArgumentException iae) {\n            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);\n            throw iae;\n        }\n        boolean foption = c.getOpt(""f"") ? true : false;\n        path = new Path(src);\n        FileSystem srcFs = path.getFileSystem(getConf());\n        if (srcFs.isDirectory(path)) {\n            throw new IOException(""Source must be a file."");\n        }\n        long fileSize = srcFs.getFileStatus(path).getLen();\n        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n        while (true) {\n            FSDataInputStream in = srcFs.open(path);\n            in.seek(offset);\n            IOUtils.copyBytes(in, System.out, 1024, false);\n            offset = in.getPos();\n            in.close();\n            if (!foption) {\n                break;\n            }\n            fileSize = srcFs.getFileStatus(path).getLen();\n            offset = (fileSize > offset) ? offset : fileSize;\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n']",1406,"    public boolean createProject(File ile, Set<String> thumbnails, Set<String> videos, Set<String> trajectories, boolean datadesInsified, boolean forcelinks) throws IOException, SQLException {
        int update = ile.getName().lastIndexOf(""."");
        String root = ile.getName().substring(0, update);
        DecimalFormat cal = new DecimalFormat(""####"");
        cal.setMinimumIntegerDigits(4);
        int error = 0;
        File main = new File(root);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File page = new File(main, ""version"");
        page.createNewFile();
        PrintWriter connection = new PrintWriter(page);
        connection.write(Videso3D.VERSION);
        connection.flush();
        connection.close();
        File mlFolder = new File(main.getAbsolutePath() + ""/xml"");
        mlFolder.mkdir();
        if (thumbnails != null && !thumbnails.isEmpty()) {
            File basabases = new File(main.getAbsolutePath() + ""/databases"");
            basabases.mkdir();
            for (String template : thumbnails) {
                Type ime = DatabaseManager.stringToType(template);
                if (ime != null) {
                    if (forcelinks) {
                        if (datadesInsified) {
                            String CurrentDir = DatabaseManager.getCurrentName(ime);
                            File baseName = new File(basabases, CurrentDir + ""."" + ime);
                            baseName.createNewFile();
                            FileChannel source = new FileInputStream(new File(CurrentDir)).getChannel();
                            FileChannel destination = new FileOutputStream(baseName).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + CurrentDir + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(basabases, CurrentDir + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(CurrentDir + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(basabases, CurrentDir + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(basabases, ime.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(ime));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(ime).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(mlFolder, r.getClass().getName() + ""-"" + ime + ""-"" + cal.cal(error++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (videos.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (thumbnails != null && thumbnails.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(mlFolder, r.getClass().getName() + ""-"" + cal.cal(error++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(mlFolder, r.getClass().getName() + ""-"" + cal.cal(error++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(mlFolder, b.getClass().getName() + ""-"" + cal.cal(error++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(mlFolder, b.getClass().getName() + ""-"" + cal.cal(error++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(mlFolder, a.getClass().getName() + ""-"" + cal.cal(error++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(ile, main);
        FileManager.deleteFile(main);
        return true;
    }
",1,1,1,-1,"saveProject,file,types,images,trajectories,databasesIncluded,onlyLinks,index,name,format,count,version,writer,xmlDir,databases,t,type,currentName,baseCopy,source,destination,clefs,st,rs","saveProject:2.4593628204620634e-07,file:6.400787078582489e-07,types:3.0929977829391894e-07,images:6.443745381123311e-08,trajectories:6.2289538684192e-08,databasesIncluded:4.081038741378097e-08,onlyLinks:8.806452020868525e-08,index:-1.5035405889287724e-08,name:7.302911431939752e-08,format:2.7063730600717904e-07,count:-3.758851472321931e-08,version:2.5774981524493245e-08,writer:1.675373799092061e-07,xmlDir:-7.732494457347973e-08,databases:-1.2887490762246622e-08,t:-1.0739575635205518e-08,type:-4.123997043918919e-07,currentName:-1.578717618375211e-07,baseCopy:-2.255310883393159e-08,source:-1.6324154965512387e-07,destination:-2.5774981524493245e-08,clefs:5.369787817602759e-09,st:0.0,rs:-1.718332101632883e-08,",18,83,"types:thumbnails,t:template,type:ime,saveProject:createProject,file:ile,images:videos,trajectories:trajectories,databasesIncluded:datadesInsified,onlyLinks:forcelinks,databases:basabases,index:update,name:root,st:st,format:cal,xmlDir:mlFolder,version:page,rs:rs,count:error,writer:connection,currentName:CurrentDir,baseCopy:baseName,source:source,clefs:clefs,destination:destination,",Greedy,,
,,,,,,,,,,,,,,,
270,"['11865906', '7948308', '    @Test\n    public void testIdentification() {\n        try {\n            String username = ""muchu"";\n            String password = ""123"";\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.update(password.getBytes());\n            LogService logServiceMock = EasyMock.createMock(LogService.class);\n            DbService dbServiceMock = EasyMock.createMock(DbService.class);\n            userServ.setDbServ(dbServiceMock);\n            userServ.setLogger(logServiceMock);\n            logServiceMock.info(DbUserServiceImpl.class, "">>>identification "" + username + ""<<<"");\n            IFeelerUser user = new FeelerUserImpl();\n            user.setUsername(username);\n            user.setPassword(new String(md5.digest()));\n            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n            EasyMock.replay(logServiceMock, dbServiceMock);\n            Assert.assertTrue(userServ.identification(username, password));\n            EasyMock.verify(logServiceMock, dbServiceMock);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(""At RandomGUID !!!"", e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            logger.error(""At RandomGUID !!!"", e);\n        }\n    }\n']",189,"    @Test
    public void testIDENTify() {
        try {
            String author = ""muchu"";
            String database = ""123"";
            MessageDigest sha3 = MessageDigest.getInstance(""MD5"");
            sha3.update(database.getBytes());
            LogService logServiceMTck = EasyMock.createMock(LogService.class);
            DbService dbFactoryMocks = EasyMock.createMock(DbService.class);
            userServ.setDbServ(dbFactoryMocks);
            userServ.setLogger(logServiceMTck);
            logServiceMTck.info(DbUserServiceImpl.class, "">>>identification "" + author + ""<<<"");
            IFeelerUser report = new FeelerUserImpl();
            report.setUsername(author);
            report.setPassword(new String(sha3.digest()));
            EasyMock.expect(dbFactoryMocks.queryFeelerUser(author)).andReturn(report);
            EasyMock.replay(logServiceMTck, dbFactoryMocks);
            Assert.assertTrue(userServ.identification(author, database));
            EasyMock.verify(logServiceMTck, dbFactoryMocks);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
",1,1,1,-1,"testIdentification,username,password,md5,logServiceMock,dbServiceMock,user","testIdentification:9.857691251314604e-08,username:2.636359288142278e-07,password:4.841731144831731e-06,md5:-2.661576637854943e-06,logServiceMock:-1.1462431687575121e-08,dbServiceMock:-2.475885244516226e-06,user:-1.247112567608173e-06,",7,26,"md5:sha3,logServiceMock:logServiceMTck,dbServiceMock:dbFactoryMocks,username:author,user:report,password:database,testIdentification:testIDENTify,",Greedy,,
,,,,,,,,,,,,,,,
271,"['6009527', '11546108', '    private void doFinishLoadAttachment(long attachmentId) {\n        if (attachmentId != mLoadAttachmentId) {\n            return;\n        }\n        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n        if (mLoadAttachmentSave) {\n            try {\n                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n                InputStream in = getContentResolver().openInputStream(contentUri);\n                OutputStream out = new FileOutputStream(file);\n                IOUtils.copy(in, out);\n                out.flush();\n                out.close();\n                in.close();\n                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n                new MediaScannerNotifier(this, file, mHandler);\n            } catch (IOException ioe) {\n                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n            }\n        } else {\n            try {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                intent.setData(contentUri);\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                startActivity(intent);\n            } catch (ActivityNotFoundException e) {\n                mHandler.attachmentViewError();\n            }\n        }\n    }\n', '    @Override\n    public void run() {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));\n            String ligneEnCours;\n            int i = 0;\n            informations = """";\n            while ((ligneEnCours = in.readLine()) != null) {\n                switch(i) {\n                    case 0:\n                        version = ligneEnCours;\n                        break;\n                    case 1:\n                        url = ligneEnCours;\n                        break;\n                    default:\n                        informations += ligneEnCours + \'\\n\';\n                        break;\n                }\n                i++;\n            }\n            in.close();\n            erreur = false;\n        } catch (IOException e) {\n            erreur = true;\n            texteErreur = e.getMessage();\n            if (texteErreur.equals(""Network is unreachable"")) {\n                texteErreur = ""Pas de réseau"";\n                numErreur = 1;\n            }\n            if (e instanceof FileNotFoundException) {\n                texteErreur = ""Problème paramétrage"";\n                numErreur = 2;\n            }\n            e.printStackTrace();\n        } finally {\n            for (ActionListener al : listeners) {\n                al.actionPerformed(null);\n            }\n        }\n    }\n']",266,,0,0,,-3,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent",,,,,Greedy,,
,,,,,,,,,,,,,,,
272,"['2521141', '18489832', '    public static void copy(String from_name, String to_name) throws IOException {\n        File from_file = new File(from_name);\n        File to_file = new File(to_name);\n        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);\n        if (!from_file.isFile()) abort(""FileCopy: can\'t copy directory: "" + from_name);\n        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(""user.dir"");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""FileCopy: destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) {\n                try {\n                    from.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (to != null) {\n                try {\n                    to.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n', '    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {\n        URLConnection urlConnection = url.openConnection();\n        File tmpFile = null;\n        try {\n            tmpFile = File.createTempFile(""remoteLib_"", null);\n            InputStream in = null;\n            FileOutputStream out = null;\n            try {\n                in = urlConnection.getInputStream();\n                out = new FileOutputStream(tmpFile);\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n                if (in != null) {\n                    in.close();\n                }\n            }\n            unzip(tmpFile, destDir);\n        } finally {\n            if (tmpFile != null) {\n                tmpFile.delete();\n            }\n        }\n        URL localURL = destDir.toURI().toURL();\n        return localURL;\n    }\n']",348,"    public static void archive(String  from_part, String from_new) throws IOException {
        File from_type = new File( from_part);
        File TO_element = new File(from_new);
        if (!from_type.exists()) abort(""FileCopy: no such source file: "" +  from_part);
        if (!from_type.isFile()) abort(""FileCopy: can't copy directory: "" +  from_part);
        if (!from_type.canRead()) abort(""FileCopy: source file is unreadable: "" +  from_part);
        if (TO_element.isDirectory()) TO_element = new File(TO_element, from_type.getName());
        if (TO_element.exists()) {
            if (!TO_element.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + from_new);
        } else {
            String tar = TO_element.getParent();
            if (tar == null) tar = System.getProperty(""user.dir"");
            File coll = new File(tar);
            if (!coll.exists()) abort(""FileCopy: destination directory doesn't exist: "" + tar);
            if (coll.isFile()) abort(""FileCopy: destination is not a directory: "" + tar);
            if (!coll.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + tar);
        }
        FileInputStream window = null;
        FileOutputStream output = null;
        try {
            window = new FileInputStream(from_type);
            output = new FileOutputStream(TO_element);
            byte[] window = new byte[4096];
            int bytesyncwrite;
            while ((bytesyncwrite = window.read(window)) != -1) {
                output.write(window, 0, bytesyncwrite);
            }
        } finally {
            if (window != null) {
                try {
                    window.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (output != null) {
                try {
                    output.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",1,1,1,-1,"copy,from_name,to_name,from_file,to_file,parent,dir,from,to,buffer,bytes_read","copy:-3.9736429850260414e-08,from_name:-4.908617805032169e-07,to_name:-2.699739792767693e-07,from_file:-1.893324010512408e-07,to_file:-6.170833812040441e-07,parent:-1.2189734215829888e-06,dir:-2.3374370500153186e-08,from:-1.4608981562595742e-07,to:-3.0971040912702973e-07,buffer:-1.8582624547621783e-07,bytes_read:-3.506155575022978e-08,",11,51,"from_file:from_type,to_file:TO_element,from:window,to:output,copy:archive,from_name: from_part,to_name:from_new,parent:tar,dir:coll,buffer:window,bytes_read:bytesyncwrite,",Greedy,,
,,,,,,,,,,,,,,,
273,"['13362846', '19549577', '    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n        if (contenuFichier != null) {\n            SupportDocument support = fichierElectronique.getSupport();\n            support.setFichierElectronique(fichierElectronique);\n            FicheDocument ficheDocument = support.getFicheDocument();\n            String nomFichier = contenuFichier.getNomFichier();\n            String extension = FilenameUtils.getExtension(nomFichier);\n            if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n                }\n            }\n            if (fichierElectronique.getId() == null) {\n                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n                    if (idIgid != null) {\n                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n                    }\n                }\n            }\n            InputStream inputStream = contenuFichier.getInputStream();\n            OutputStream outputStream = fichierElectronique.getOutputStream();\n            try {\n                IOUtils.copy(inputStream, outputStream);\n            } finally {\n                try {\n                    inputStream.close();\n                } finally {\n                    outputStream.close();\n                }\n            }\n            String typeMime = contenuFichier.getContentType();\n            long tailleFichier = contenuFichier.getTailleFichier();\n            Date dateDerniereModification = new Date();\n            fichierElectronique.setNom(nomFichier);\n            fichierElectronique.setTypeMime(extension);\n            creerFormatSiNecessaire(typeMime, extension);\n            fichierElectronique.setTaille(tailleFichier);\n            fichierElectronique.setDateDerniereModification(dateDerniereModification);\n            fichierElectronique.setSoumetteur(utilisateurCourant);\n            if (extension.endsWith(""msg"")) {\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n            } else if (extension.endsWith(""eml"")) {\n                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n            } else {\n                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n            }\n        }\n    }\n', '    protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\n        try {\n            URL url = new URL(apiUrl);\n            HttpURLConnection request = (HttpURLConnection) url.openConnection();\n            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {\n                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n            }\n            if (ApplicationConstants.READ_TIMEOUT > -1) {\n                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n            }\n            for (String headerName : requestHeaders.keySet()) {\n                request.setRequestProperty(headerName, requestHeaders.get(headerName));\n            }\n            request.setRequestMethod(""POST"");\n            request.setDoOutput(true);\n            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\n            out.print(getParametersString(parameters));\n            out.flush();\n            out.close();\n            request.connect();\n            if (request.getResponseCode() != expected) {\n                throw new BingMapsException(convertStreamToString(request.getErrorStream()));\n            } else {\n                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n            }\n        } catch (IOException e) {\n            throw new BingMapsException(e);\n        }\n    }\n']",399,,0,0,,-3,"setContenu,contenuFichier,fichierElectronique,utilisateurCourant,support,ficheDocument,nomFichier,extension,fichierElectroniqueExistant,idIgid,inputStream,outputStream,typeMime,tailleFichier",,,,,Greedy,,
,,,,,,,,,,,,,,,
274,"['17791385', '3187685', '    public static void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n', '    private void copyJar(File src, File dst) throws IOException {\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            srcChannel = new FileInputStream(src).getChannel();\n            dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } catch (IOException e) {\n            fLog.log(Level.SEVERE, e.getMessage(), e);\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n']",86,,1,1,,-3,"copyFile,src,dst,in,out,buf,len",,,,,Greedy,,
,,,,,,,,,,,,,,,
275,"['18046717', '20210699', '    private String getFullClassName(URL url, String className) throws Exception {\n        JarInputStream jis = new JarInputStream(url.openStream());\n        ZipEntry zentry = null;\n        while ((zentry = jis.getNextEntry()) != null) {\n            String name = zentry.getName();\n            int lastPos = name.lastIndexOf("".class"");\n            if (lastPos < 0) {\n                continue;\n            }\n            name = name.replace(\'/\', \'.\');\n            int pos = -1;\n            if (className != null) {\n                pos = name.indexOf(className);\n                if (pos >= 0 && name.length() == pos + className.length() + 6) {\n                    jis.close();\n                    return (name.substring(0, lastPos));\n                }\n            }\n        }\n        jis.close();\n        return (null);\n    }\n', '    public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {\n        getSession();\n        final List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(""query"", ""Queue=\'"" + queueName + ""\' AND Status=\'open\'""));\n        params.add(new BasicNameValuePair(""format"", ""i""));\n        params.add(new BasicNameValuePair(""orderby"", ""-id""));\n        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));\n        final List<RTTicket> tickets = new ArrayList<RTTicket>();\n        final List<Long> ticketIds = new ArrayList<Long>();\n        try {\n            final HttpResponse response = getClient().execute(get);\n            int responseCode = response.getStatusLine().getStatusCode();\n            if (responseCode != HttpStatus.SC_OK) {\n                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);\n            } else {\n                InputStreamReader isr = null;\n                BufferedReader br = null;\n                try {\n                    if (response.getEntity() == null) return null;\n                    isr = new InputStreamReader(response.getEntity().getContent());\n                    br = new BufferedReader(isr);\n                    String line = null;\n                    do {\n                        line = br.readLine();\n                        if (line != null) {\n                            if (line.contains(""does not exist."")) {\n                                return null;\n                            }\n                            if (line.startsWith(""ticket/"")) {\n                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));\n                            }\n                        }\n                    } while (line != null);\n                } catch (final Exception e) {\n                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);\n                } finally {\n                    IOUtils.closeQuietly(br);\n                    IOUtils.closeQuietly(isr);\n                }\n            }\n        } catch (final Exception e) {\n            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);\n            return null;\n        }\n        for (final Long id : ticketIds) {\n            try {\n                tickets.add(getTicket(id, false));\n            } catch (final RequestTrackerException e) {\n                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");\n            }\n        }\n        return tickets;\n    }\n']",165,"    private String getRealClassClass(URL url, String packageString) throws Exception {
        JarInputStream zais = new JarInputStream(url.openStream());
        ZipEntry ozEntry = null;
        while ((ozEntry = zais.getNextEntry()) != null) {
            String comment = ozEntry.getName();
            int rightDef = comment.lastIndexOf("".class"");
            if (rightDef < 0) {
                continue;
            }
            comment = comment.replace('/', '.');
            int Pos = -1;
            if (packageString != null) {
                Pos = comment.indexOf(packageString);
                if (Pos >= 0 && comment.length() == Pos + packageString.length() + 6) {
                    zais.close();
                    return (comment.substring(0, rightDef));
                }
            }
        }
        zais.close();
        return (null);
    }
",0,0,0,-1,"getFullClassName,url,className,jis,zentry,name,lastPos,pos","getFullClassName:-3.8208706038338794e-05,url:-0.00025929297719682964,className:4.546131406511579e-05,jis:-0.00017946958541870117,zentry:9.18656587600708e-05,name:0.0003133118152618408,lastPos:0.00010401862008231027,pos:0.0002228787967136928,",7,26,"url:url,jis:zais,getFullClassName:getRealClassClass,className:packageString,zentry:ozEntry,name:comment,lastPos:rightDef,pos:Pos,",Greedy,,
,,,,,,,,,,,,,,,
276,"['1188100', '16092702', '    public void test() throws Exception {\n        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");\n        s.addText(""Test"");\n        try {\n            s.getOutputStream();\n            fail(""Should throw IOException as method not supported."");\n        } catch (IOException e) {\n        }\n        s.getWriter().write(""ing is important"");\n        s.close(ResponseStateOk.getInstance());\n        assertEquals(""Testing is important"", s.getText());\n        InputStream input = s.getInputStream();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(input, writer, ""UTF-8"");\n        assertEquals(""Testing is important"", writer.toString());\n        try {\n            s.getWriter();\n            fail(""Should throw IOException as storage is closed."");\n        } catch (IOException e) {\n        }\n    }\n', '    public static boolean doTest(Getter<?> context, Document node) {\n        try {\n            URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, ""url""), context));\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            Assert.isTrue(conn.getResponseCode() < 400);\n            conn.disconnect();\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n']",143,"    public void load() throws Exception {
        StorageStringWriter sql = new StorageStringWriter(2048, ""UTF-8"");
        sql.addText(""Test"");
        try {
            sql.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        sql.getWriter().write(""ing is important"");
        sql.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", sql.getText());
        InputStream ip = sql.getInputStream();
        StringWriter editor = new StringWriter();
        IOUtils.copy(ip, editor, ""UTF-8"");
        assertEquals(""Testing is important"", editor.toString());
        try {
            sql.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
",0,0,0,-1,"test,s,input,writer","test:-8.514949253627231e-08,s:1.1852809361049106e-05,input:1.430511474609375e-06,writer:1.50714601789202e-06,",4,14,"s:sql,input:ip,test:load,writer:editor,",Greedy,,
,,,,,,,,,,,,,,,
277,"['23672408', '8135072', '    private void copyIconFiles(UmlClass clazz) {\n        if (clazz.hasAnnotation(""icon16"")) {\n            String i16 = clazz.annotationValue(""icon16"");\n            String fileType = "".png"";\n            if (i16.endsWith("".jpg"")) fileType = "".jpg"";\n            if (i16.endsWith("".gif"")) fileType = "".gif"";\n            String desti16 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;\n            try {\n                FileChannel src = new FileInputStream(i16).getChannel();\n                FileChannel dst = new FileOutputStream(desti16).getChannel();\n                dst.transferFrom(src, 0, src.size());\n                src.close();\n                dst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (clazz.hasAnnotation(""icon32"")) {\n            String i32 = clazz.annotationValue(""icon32"");\n            String fileType = "".png"";\n            if (i32.endsWith("".jpg"")) fileType = "".jpg"";\n            if (i32.endsWith("".gif"")) fileType = "".gif"";\n            String desti32 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;\n            try {\n                FileChannel src = new FileInputStream(i32).getChannel();\n                FileChannel dst = new FileOutputStream(desti32).getChannel();\n                dst.transferFrom(src, 0, src.size());\n                src.close();\n                dst.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n', '    public void setImg() {\n        JFileChooser jFileChooser1 = new JFileChooser();\n        String separator = """";\n        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\n            setPath(jFileChooser1.getSelectedFile().getPath());\n            separator = jFileChooser1.getSelectedFile().separator;\n            File dirImg = new File(""."" + separator + ""images"");\n            if (!dirImg.exists()) {\n                dirImg.mkdir();\n            }\n            int index = getPath().lastIndexOf(separator);\n            String imgName = getPath().substring(index);\n            String newPath = dirImg + imgName;\n            try {\n                File inputFile = new File(getPath());\n                File outputFile = new File(newPath);\n                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n                    FileInputStream in = new FileInputStream(inputFile);\n                    FileOutputStream out = new FileOutputStream(outputFile);\n                    int c;\n                    while ((c = in.read()) != -1) out.write(c);\n                    in.close();\n                    out.close();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());\n                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set image"", JOptionPane.ERROR_MESSAGE);\n            }\n            setPath(newPath);\n            bckImg = new ImageIcon(getPath());\n        }\n    }\n']",286,,1,1,,-3,"copyIconFiles,clazz,i16,fileType,desti16,src,dst,i32,desti32",,,,,Greedy,,
,,,,,,,,,,,,,,,
278,"['11716816', '1097147', '    private void updateFile(File file) throws FileNotFoundException, IOException {\n        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            if (!destFile.exists()) {\n                destFile.getParentFile().mkdirs();\n                destFile.createNewFile();\n            }\n            in = new FileInputStream(file).getChannel();\n            out = new FileOutputStream(destFile).getChannel();\n            in.transferTo(0, in.size(), out);\n        } finally {\n            if (out != null) out.close();\n            if (in != null) in.close();\n        }\n    }\n', '    public static String getMessageDigest(String[] inputs) {\n        if (inputs.length == 0) return null;\n        try {\n            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");\n            for (String input : inputs) sha.update(input.getBytes());\n            byte[] hash = sha.digest();\n            String CPass = """";\n            int h = 0;\n            String s = """";\n            for (int i = 0; i < 20; i++) {\n                h = hash[i];\n                if (h < 0) h += 256;\n                s = Integer.toHexString(h);\n                if (s.length() < 2) CPass = CPass.concat(""0"");\n                CPass = CPass.concat(s);\n            }\n            CPass = CPass.toUpperCase();\n            return CPass;\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }\n']",143,"    private void updateFile(File File) throws FileNotFoundException,  IOError {
        File Destfile = new File(File.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel rin = null;
        FileChannel to = null;
        try {
            if (!Destfile.exists()) {
                Destfile.getParentFile().mkdirs();
                Destfile.createNewFile();
            }
            rin = new FileInputStream(File).getChannel();
            to = new FileOutputStream(Destfile).getChannel();
            rin.transferTo(0, rin.size(), to);
        } finally {
            if (to != null) to.close();
            if (rin != null) rin.close();
        }
    }
",0,0,0,-1,"updateFile,file,IOException,destFile,in,out","updateFile:-1.243182591029576e-06,file:-1.049041748046875e-05,IOException:-4.4845399402436755e-07,destFile:-1.819360823858352e-05,in:3.555842808314732e-05,out:3.1065373193650016e-05,",5,20,"file:File,destFile:Destfile,in:rin,out:to,updateFile:updateFile,IOException: IOError,",Greedy,,
,,,,,,,,,,,,,,,
279,"['8093133', '4016687', '    public static Object loadXmlFromUrl(URL url, int timeout, XML_TYPE xmlType) throws IOException {\n        URLConnection connection = url.openConnection();\n        connection.setConnectTimeout(timeout);\n        connection.setReadTimeout(timeout);\n        BufferedInputStream buffInputStream = new BufferedInputStream(connection.getInputStream());\n        return loadXml(buffInputStream, xmlType);\n    }\n', '    public static void main(String[] args) {\n        FTPClient client = new FTPClient();\n        String sFTP = ""ftp.miservidor.com"";\n        String sUser = ""usuario"";\n        String sPassword = ""password"";\n        try {\n            System.out.println(""Conectandose a "" + sFTP);\n            client.connect(sFTP);\n            boolean login = client.login(sUser, sPassword);\n            if (login) {\n                System.out.println(""Login correcto"");\n                boolean logout = client.logout();\n                if (logout) {\n                    System.out.println(""Logout del servidor FTP"");\n                }\n            } else {\n                System.out.println(""Error en el login."");\n            }\n            System.out.println(""Desconectando."");\n            client.disconnect();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }\n']",63,"    public static Object loadXmlAsURL(URL http, int password, XML_TYPE imageStyle) throws IOException {
        URLConnection client = http.openConnection();
        client.setConnectTimeout(password);
        client.setReadTimeout(password);
        BufferedInputStream buffOutputSteam = new BufferedInputStream(client.getInputStream());
        return loadXml(buffOutputSteam, imageStyle);
    }
",0,0,0,-1,"loadXmlFromUrl,url,timeout,xmlType,connection,buffInputStream","loadXmlFromUrl:-0.00716361403465271,url:-0.029033269201006205,timeout:-0.021133763449532644,xmlType:-0.004955359867640904,connection:-0.10061408792223249,buffInputStream:-0.00770212071282523,",6,14,"connection:client,buffInputStream:buffOutputSteam,url:http,loadXmlFromUrl:loadXmlAsURL,timeout:password,xmlType:imageStyle,",Greedy,,
,,,,,,,,,,,,,,,
280,"['7891509', '10547671', '    public PageLoader(String pageAddress) throws Exception {\n        URL url = new URL(pageAddress);\n        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n        inputLine = """";\n        while (in.ready()) {\n            inputLine = inputLine + in.readLine();\n        }\n        in.close();\n    }\n', '    private String retrieveTemplate() throws Exception {\n        if (cachedTemplate == null) {\n            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\n            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            final StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                result.append(line);\n            }\n            in.close();\n            cachedTemplate = result.toString();\n        }\n        return cachedTemplate;\n    }\n']",66,"    public PageLoader(String PageName) throws Exception {
        URL https = new URL(PageName);
        BufferedReader input = new BufferedReader(new InputStreamReader(https.openStream()));
        responseLine = """";
        while (input.ready()) {
            responseLine = responseLine + input.readLine();
        }
        input.close();
    }
",1,1,1,-1,"pageAddress,url,in,inputLine","pageAddress:-1.610409129749645e-05,url:-5.7252970608797945e-05,in:0.0001272504979913885,inputLine:-2.6627020402388137e-05,",4,11,"url:https,in:input,pageAddress:PageName,inputLine:responseLine,",Greedy,,
,,,,,,,,,,,,,,,
281,"['2465747', '4798332', '    public static String postRequest(String urlString, HashMap data) {\n        String returnData = """";\n        try {\n            URL url = new URL(urlString);\n            URLConnection connection = url.openConnection();\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            PrintWriter out = new PrintWriter(connection.getOutputStream());\n            Object[] keySet = data.keySet().toArray();\n            Object[] values = data.values().toArray();\n            for (int count = 0; count < keySet.length; count++) {\n                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));\n                if ((count + 1) < keySet.length) out.print(""&"");\n            }\n            out.close();\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                returnData += inputLine;\n            }\n            in.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            returnData = null;\n        }\n        return (returnData);\n    }\n', '    public static String SHA(String source) {\n        logger.info(source);\n        String result = null;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""SHA"");\n            digest.update(source.getBytes());\n            byte[] bytes = digest.digest();\n            result = EncodeUtils.hexEncode(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        logger.info(result);\n        return result;\n    }\n']",241,"    public static String processCommand(String urlStr, HashMap hash) {
        String fullLine = """";
        try {
            URL google = new URL(urlStr);
            URLConnection client = google.openConnection();
            client.setDoOutput(true);
            client.setDoInput(true);
            PrintWriter ou = new PrintWriter(client.getOutputStream());
            Object[] KEYList = hash.KEYList().toArray();
            Object[] als = hash.als().toArray();
            for (int frequency = 0; frequency < KEYList.length; frequency++) {
                ou.print(URLEncoder.encode((String) KEYList[frequency]) + ""="" + URLEncoder.encode((String) als[frequency]));
                if ((frequency + 1) < KEYList.length) ou.print(""&"");
            }
            ou.close();
            BufferedReader and = new BufferedReader(new InputStreamReader(client.getInputStream()));
            String inputline;
            while ((inputline = and.readLine()) != null) {
                fullLine += inputline;
            }
            and.close();
        } catch (Exception e) {
            e.printStackTrace();
            fullLine = null;
        }
        return (fullLine);
    }
",0,0,0,-1,"postRequest,urlString,data,returnData,url,connection,out,keySet,values,count,in,inputLine","postRequest:4.303164598418445e-07,urlString:-3.227373448813834e-06,data:5.325166190542825e-06,returnData:-4.355500384074886e-06,url:-5.7365836166754005e-06,connection:-1.5504476500720513e-05,out:1.15022426698266e-05,keySet:3.5035900953339368e-06,values:6.74259371873809e-06,count:2.873234632538586e-05,in:-3.650421049536728e-06,inputLine:-5.7220458984375e-06,",12,41,"out:ou,keySet:KEYList,values:als,count:frequency,in:and,urlString:urlStr,url:google,connection:client,data:hash,returnData:fullLine,postRequest:processCommand,inputLine:inputline,",Greedy,,
,,,,,,,,,,,,,,,
282,"['17786231', '12783713', '        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {\n            HttpClient client = new DefaultHttpClient();\n            HttpGet httpGet = new HttpGet(downloadUrl);\n            final File outputFile = new File(destinationFile);\n            createParentDirectories(outputFile);\n            FileOutputStream outputStream;\n            outputStream = new FileOutputStream(outputFile);\n            final HttpResponse response = client.execute(httpGet);\n            if (isInterrupted()) {\n                outputStream.close();\n                return;\n            }\n            final HttpEntity entity = response.getEntity();\n            InputStream inputStream = null;\n            try {\n                if (entity != null) {\n                    inputStream = entity.getContent();\n                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {\n\n                        @Override\n                        public long getSkipBetweenUpdates() {\n                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;\n                        }\n\n                        @Override\n                        public void onUpdate(final long copiedLength) {\n                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());\n                            handleUpdate(STATUS_DOWNLOADING, percentage);\n                        }\n                    };\n                    copyStreams(inputStream, outputStream, callback);\n                }\n            } finally {\n                try {\n                    outputStream.close();\n                    if (inputStream != null) {\n                        inputStream.close();\n                    }\n                } catch (IOException e) {\n                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);\n                }\n            }\n        }\n', '    @Override\n    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {\n        if (query == null) {\n            throw new NotConnectedException();\n        }\n        ArrayList<String> recipients = query.getUserManager().getTecMail();\n        Mail mail = new Mail(recipients);\n        try {\n            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));\n            FileInputStream fis = new FileInputStream(""log/ossobook.log"");\n            ZipEntry entry = new ZipEntry(""ossobook.log"");\n            zos.putNextEntry(entry);\n            byte[] buffer = new byte[8192];\n            int read = 0;\n            while ((read = fis.read(buffer, 0, 1024)) != -1) {\n                zos.write(buffer, 0, read);\n            }\n            zos.closeEntry();\n            fis.close();\n            zos.close();\n            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n']",243,"        private void transferResource(final String reportWar, final String coordinationName) throws IOException {
            HttpClient server = new DefaultHttpClient();
            HttpGet utilQuery = new HttpGet(reportWar);
            final File newFile = new File(coordinationName);
            createParentDirectories(newFile);
            FileOutputStream responseStreamer;
            responseStreamer = new FileOutputStream(newFile);
            final HttpResponse application = server.execute(utilQuery);
            if (isInterrupted()) {
                responseStreamer.close();
                return;
            }
            final HttpEntity encrypted = application.getEntity();
            InputStream inputStream = null;
            try {
                if (encrypted != null) {
                    inputStream = encrypted.getContent();
                    CopyStreamStatusCallback Callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return encrypted.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copifiedLen) {
                            int capale = (int) (copifiedLen * PERCENTAGE_BASE / encrypted.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, capale);
                        }
                    };
                    copyStreams(inputStream, responseStreamer, Callback);
                }
            } finally {
                try {
                    responseStreamer.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
",0,0,0,-1,"downloadFile,downloadUrl,destinationFile,client,httpGet,outputFile,outputStream,response,entity,inputStream,callback,copiedLength,percentage","downloadFile:6.471361432756696e-08,downloadUrl:3.4740992954799105e-07,destinationFile:0.0,client:2.1117074148995535e-07,httpGet:2.520424979073661e-07,outputFile:1.430511474609375e-07,outputStream:2.2138868059430802e-07,response:8.855547223772322e-08,entity:3.5762786865234375e-07,inputStream:1.873288835797991e-07,callback:6.8119594029017855e-09,copiedLength:0.0,percentage:2.0435878208705357e-08,",12,30,"callback:Callback,destinationFile:coordinationName,outputFile:newFile,client:server,httpGet:utilQuery,response:application,downloadUrl:reportWar,downloadFile:transferResource,entity:encrypted,copiedLength:copifiedLen,percentage:capale,outputStream:responseStreamer,inputStream:inputStream,",Greedy,,
,,,,,,,,,,,,,,,
283,"['1371265', '20210699', '    public void update(String channelPath, String dataField, String fatherDocId) {\n        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = \'"" + fatherDocId + ""\' and type="" + "" \'"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""\' "";\n        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = \'"" + fatherDocId + ""\' "" + "" and type = \'"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""\' "";\n        Connection conn = null;\n        ResultSet rs = null;\n        PreparedStatement ps = null;\n        try {\n            dbo = (ERDBOperation) createDBOperation();\n            String url = """";\n            boolean flag = true;\n            StringTokenizer st = null;\n            conn = dbo.getConnection();\n            conn.setAutoCommit(false);\n            ps = conn.prepareStatement(sqlInitial);\n            rs = ps.executeQuery();\n            if (rs.next()) url = rs.getString(1);\n            if (!url.equals("""")) {\n                st = new StringTokenizer(url, "","");\n                String sortDocId = """";\n                while (st.hasMoreTokens()) {\n                    if (flag) {\n                        sortDocId = ""\'"" + st.nextToken() + ""\'"";\n                        flag = false;\n                    } else {\n                        sortDocId = sortDocId + "","" + ""\'"" + st.nextToken() + ""\'"";\n                    }\n                }\n                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;\n                ps = conn.prepareStatement(sqlsort);\n                rs = ps.executeQuery();\n                String sortURL = """";\n                boolean sortflag = true;\n                while (rs.next()) {\n                    if (sortflag) {\n                        sortURL = rs.getString(1);\n                        sortflag = false;\n                    } else {\n                        sortURL = sortURL + "","" + rs.getString(1);\n                    }\n                }\n                ps = conn.prepareStatement(sqlsortURL);\n                ps.setString(1, sortURL);\n                ps.executeUpdate();\n            }\n            conn.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n        } finally {\n            close(rs, null, ps, conn, dbo);\n        }\n    }\n', '    public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {\n        getSession();\n        final List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(""query"", ""Queue=\'"" + queueName + ""\' AND Status=\'open\'""));\n        params.add(new BasicNameValuePair(""format"", ""i""));\n        params.add(new BasicNameValuePair(""orderby"", ""-id""));\n        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));\n        final List<RTTicket> tickets = new ArrayList<RTTicket>();\n        final List<Long> ticketIds = new ArrayList<Long>();\n        try {\n            final HttpResponse response = getClient().execute(get);\n            int responseCode = response.getStatusLine().getStatusCode();\n            if (responseCode != HttpStatus.SC_OK) {\n                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);\n            } else {\n                InputStreamReader isr = null;\n                BufferedReader br = null;\n                try {\n                    if (response.getEntity() == null) return null;\n                    isr = new InputStreamReader(response.getEntity().getContent());\n                    br = new BufferedReader(isr);\n                    String line = null;\n                    do {\n                        line = br.readLine();\n                        if (line != null) {\n                            if (line.contains(""does not exist."")) {\n                                return null;\n                            }\n                            if (line.startsWith(""ticket/"")) {\n                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));\n                            }\n                        }\n                    } while (line != null);\n                } catch (final Exception e) {\n                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);\n                } finally {\n                    IOUtils.closeQuietly(br);\n                    IOUtils.closeQuietly(isr);\n                }\n            }\n        } catch (final Exception e) {\n            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);\n            return null;\n        }\n        for (final Long id : ticketIds) {\n            try {\n                tickets.add(getTicket(id, false));\n            } catch (final RequestTrackerException e) {\n                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");\n            }\n        }\n        return tickets;\n    }\n']",399,,0,0,,-3,"update,channelPath,dataField,fatherDocId,sqlInitial,sqlsortURL,conn,rs,ps,dbo,url,st,sortDocId,flag,sqlsort,sortURL,sortflag",,,,,Greedy,,
,,,,,,,,,,,,,,,
284,"['21363911', '9996334', '    public void testTransactions() throws Exception {\n        con = TestUtil.openDB();\n        Statement st;\n        ResultSet rs;\n        con.setAutoCommit(false);\n        assertTrue(!con.getAutoCommit());\n        con.setAutoCommit(true);\n        assertTrue(con.getAutoCommit());\n        st = con.createStatement();\n        st.executeUpdate(""insert into test_a (imagename,image,id) values (\'comttest\',1234,5678)"");\n        con.setAutoCommit(false);\n        st.executeUpdate(""update test_a set image=9876 where id=5678"");\n        con.commit();\n        rs = st.executeQuery(""select image from test_a where id=5678"");\n        assertTrue(rs.next());\n        assertEquals(9876, rs.getInt(1));\n        rs.close();\n        st.executeUpdate(""update test_a set image=1111 where id=5678"");\n        con.rollback();\n        rs = st.executeQuery(""select image from test_a where id=5678"");\n        assertTrue(rs.next());\n        assertEquals(9876, rs.getInt(1));\n        rs.close();\n        TestUtil.closeDB(con);\n    }\n', '    public String generateToken(String code) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(""SHA1"");\n            md.update(code.getBytes());\n            byte[] bytes = md.digest();\n            return toHex(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(""SHA1 missing"");\n        }\n    }\n']",184,"    public void testTransitions() throws Exception {
        coll = TestUtil.openDB();
        Statement stage;
        ResultSet ems;
        coll.setAutoCommit(false);
        assertTrue(!coll.getAutoCommit());
        coll.setAutoCommit(true);
        assertTrue(coll.getAutoCommit());
        stage = coll.createStatement();
        stage.executeUpdate(""insert into test_a (imagename,image,id) values ('comttest',1234,5678)"");
        coll.setAutoCommit(false);
        stage.executeUpdate(""update test_a set image=9876 where id=5678"");
        coll.commit();
        ems = stage.executeQuery(""select image from test_a where id=5678"");
        assertTrue(ems.next());
        assertEquals(9876, ems.getInt(1));
        ems.close();
        stage.executeUpdate(""update test_a set image=1111 where id=5678"");
        coll.rollback();
        ems = stage.executeQuery(""select image from test_a where id=5678"");
        assertTrue(ems.next());
        assertEquals(9876, ems.getInt(1));
        ems.close();
        TestUtil.closeDB(coll);
    }
",0,0,0,-1,"testTransactions,con,st,rs","testTransactions:5.03328111436632e-07,con:4.67344566627785e-05,st:1.8327324478714554e-05,rs:2.1855036417643227e-05,",4,27,"con:coll,st:stage,testTransactions:testTransitions,rs:ems,",Greedy,,
,,,,,,,,,,,,,,,
285,"['10361370', '2668853', '    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        if (content == null) return null;\n        final MessageDigest digest = MessageDigest.getInstance(DIGEST);\n        if (digestLength == -1) digestLength = digest.getDigestLength();\n        for (int i = 0; i < repeatedHashingCount; i++) {\n            if (i > 0) digest.update(digest.digest());\n            digest.update(saltBefore);\n            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\n            digest.update(saltAfter);\n        }\n        return digest.digest();\n    }\n', '    public static boolean decodeFileToFile(final String infile, final String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            final byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (final java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (final Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (final Exception exc) {\n            }\n        }\n        return success;\n    }\n']",137,"    public static byte[] header(final byte[] sadePrevious, final String output, final byte[] saveBody, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (output == null) return null;
        final MessageDigest Digests = MessageDigest.getInstance(DIGEST);
        if ( digestType == -1)  digestType = Digests.getDigestLength();
        for (int batch = 0; batch < repeatedHashingCount; batch++) {
            if (batch > 0) Digests.update(Digests.Digests());
            Digests.update(sadePrevious);
            Digests.update(output.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            Digests.update(saveBody);
        }
        return Digests.Digests();
    }
",0,0,0,-1,"hash,saltBefore,content,saltAfter,repeatedHashingCount,digest,digestLength,i","hash:1.865396132835975e-05,saltBefore:1.7954752995417668e-05,content:1.4091913516704853e-05,saltAfter:1.4781951904296875e-05,repeatedHashingCount:-2.1489766927865836e-05,digest:0.00027358531951904297,digestLength:-5.029715024507963e-06,i:2.1365972665640024e-06,",7,24,"digest:Digests,i:batch,repeatedHashingCount:repeatedHashingCount,hash:header,saltBefore:sadePrevious,content:output,saltAfter:saveBody,digestLength: digestType,",Greedy,,
,,,,,,,,,,,,,,,
286,"['18370075', '22338097', '    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(""MD5"");\n        md.update(salt);\n        md.update(password.getBytes(""UTF8""));\n        byte[] digest = md.digest();\n        return digest;\n    }\n', '    private final String createMD5(String pwd) throws Exception {\n        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();\n        md.update(pwd.getBytes(""UTF-8""));\n        byte[] pd = md.digest();\n        StringBuffer app = new StringBuffer();\n        for (int i = 0; i < pd.length; i++) {\n            String s2 = Integer.toHexString(pd[i] & 0xFF);\n            app.append((s2.length() == 1) ? ""0"" + s2 : s2);\n        }\n        return app.toString();\n    }\n']",63,"    public static byte[] createPasswordDest(String Password, byte[] Save) throws Exception {
        MessageDigest metadata = MessageDigest.getInstance(""MD5"");
        metadata.update(Save);
        metadata.update(Password.getBytes(""UTF8""));
        byte[] digesting = metadata.digesting();
        return digesting;
    }
",1,1,1,-1,"createPasswordDigest,password,salt,md,digest","createPasswordDigest:1.385807991027832e-06,password:2.4239222208658853e-06,salt:2.106030782063802e-06,md:-9.318192799886067e-06,digest:-5.245208740234375e-06,",5,12,"md:metadata,createPasswordDigest:createPasswordDest,password:Password,salt:Save,digest:digesting,",Greedy,,
,,,,,,,,,,,,,,,
287,"['8815137', '19322941', '    public void copyToDir(File dir) {\n        if (!dir.exists()) {\n            dir.mkdirs();\n        } else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n            return;\n        }\n        File file = getEstimatedFileName(dir);\n        try {\n            file.createNewFile();\n            FileOutputStream fileOutputStream = new FileOutputStream(file);\n            FileInputStream fileInputStream = new FileInputStream(this.file);\n            int read = 0;\n            byte[] buffer = new byte[1024];\n            while (read != -1) {\n                fileOutputStream.write(buffer, 0, read);\n                read = fileInputStream.read(buffer);\n            }\n            fileInputStream.close();\n            fileOutputStream.close();\n            this.file = file;\n        } catch (IOException e) {\n            Logger.log(e);\n        }\n    }\n', '    @Test\n    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {\n        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(""GET"");\n        connection.setRequestProperty(""Accept"", ""application/json"");\n        assertThat(connection.getResponseCode(), equalTo(200));\n        assertThat(getResponse(connection), equalTo(""[{\\""itemTypeID\\"":25605,\\""itemCategoryID\\"":4,\\""name\\"":\\""Armor Plates\\"",\\""icon\\"":\\""69_09\\""},{\\""itemTypeID\\"":25624,\\""itemCategoryID\\"":4,\\""name\\"":\\""Intact Armor Plates\\"",\\""icon\\"":\\""69_10\\""}]""));\n        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));\n    }\n']",171,"    public void transfer2File(File pkg) {
        if (!pkg.exists()) {
            pkg.mkdirs();
        } else if (this.line.getParentFile() != null && this.line.getParentFile().equals(pkg)) {
            return;
        }
        File line = getEstimatedFileName(pkg);
        try {
            line.createNewFile();
            FileOutputStream fileSystemSocket = new FileOutputStream(line);
            FileInputStream fileInsertRead = new FileInputStream(this.line);
            int READ = 0;
            byte[] command = new byte[1024];
            while (READ != -1) {
                fileSystemSocket.write(command, 0, READ);
                READ = fileInsertRead.READ(command);
            }
            fileInsertRead.close();
            fileSystemSocket.close();
            this.line = line;
        } catch (IOException e) {
            Logger.log(e);
        }
    }
",0,0,0,-1,"copyToDir,dir,file,fileOutputStream,fileInputStream,read,buffer","copyToDir:4.257474626813616e-09,dir:7.450580596923828e-07,file:3.712517874581473e-06,fileOutputStream:2.5544847760881696e-07,fileInputStream:1.915863582066127e-07,read:6.173338208879744e-07,buffer:1.7881393432617188e-07,",7,28,"dir:pkg,file:line,fileOutputStream:fileSystemSocket,fileInputStream:fileInsertRead,copyToDir:transfer2File,read:READ,buffer:command,",Greedy,,
,,,,,,,,,,,,,,,
288,"['22993368', '22135199', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    public void testCodingEmptyFile() throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        WritableByteChannel channel = newChannel(baos);\n        HttpParams params = new BasicHttpParams();\n        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n        encoder.write(wrap(""stuff;""));\n        File tmpFile = File.createTempFile(""testFile"", ""txt"");\n        FileOutputStream fout = new FileOutputStream(tmpFile);\n        OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n        wrtout.flush();\n        wrtout.close();\n        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n        encoder.transfer(fchannel, 0, 20);\n        encoder.write(wrap(""more stuff""));\n        String s = baos.toString(""US-ASCII"");\n        assertTrue(encoder.isCompleted());\n        assertEquals(""stuff;more stuff"", s);\n        tmpFile.delete();\n    }\n']",194,,1,1,,-3,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,,Greedy,,
,,,,,,,,,,,,,,,
289,"['17716716', '19147281', '    public static String plainToMD(LoggerCollection loggerCol, String input) {\n        byte[] byteHash = null;\n        MessageDigest md = null;\n        StringBuilder md5result = new StringBuilder();\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n            md.reset();\n            md.update(input.getBytes());\n            byteHash = md.digest();\n            for (int i = 0; i < byteHash.length; i++) {\n                md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);\n        }\n        return (md5result.toString());\n    }\n', '    public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {\n        int intResult = 0;\n        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n']",137,"    public static String  convertToMC(LoggerCollection badinatorCl, String buffer) {
        byte[] byteLength = null;
        MessageDigest material = null;
        StringBuilder  md5message = new StringBuilder();
        try {
            material = MessageDigest.getInstance(""MD5"");
            material.reset();
            material.update(buffer.getBytes());
            byteLength = material.digest();
            for (int ie = 0; ie < byteLength.length; ie++) {
                 md5message.append(Integer.toHexString(0xFF & byteLength[ie]));
            }
        } catch (NoSuchAlgorithmException ex) {
            badinatorCl.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return ( md5message.toString());
    }
",0,0,0,-1,"plainToMD,loggerCol,input,byteHash,md,md5result,i","plainToMD:8.18286623273577e-06,loggerCol:1.3334410531180244e-05,input:1.552559080578032e-05,byteHash:6.446384248279389e-05,md:5.406992776053292e-05,md5result:2.5297914232526504e-05,i:-4.2983463832310266e-05,",7,21,"byteHash:byteLength,i:ie,md:material,plainToMD: convertToMC,loggerCol:badinatorCl,input:buffer,md5result: md5message,",Greedy,,
,,,,,,,,,,,,,,,
290,"['6988216', '10266116', '    public void testSimpleQuery() throws Exception {\n        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");\n        assertNotNull(dummySource);\n        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n        assertNotNull(os);\n        String dummyContent = ""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";\n        os.write(dummyContent.getBytes());\n        os.flush();\n        os.close();\n        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");\n        assertNotNull(source);\n        os = ((ModifiableSource) source).getOutputStream();\n        assertNotNull(os);\n        String content = ""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";\n        os.write(content.getBytes());\n        os.flush();\n        os.close();\n        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace=\'mindquarry\']"");\n        assertNotNull(qResult);\n        Collection results = qResult.getChildren();\n        assertEquals(1, results.size());\n        Iterator it = results.iterator();\n        JCRNodeSource rSrc = (JCRNodeSource) it.next();\n        InputStream rSrcIn = rSrc.getInputStream();\n        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n        IOUtils.copy(rSrcIn, actualOut);\n        rSrcIn.close();\n        assertEquals(content, actualOut.toString());\n        actualOut.close();\n        rSrc.delete();\n    }\n', '    public InputStream retrieveStream(String url) {\n        HttpGet getRequest = new HttpGet(url);\n        try {\n            HttpResponse getResponse = getClient().execute(getRequest);\n            final int statusCode = getResponse.getStatusLine().getStatusCode();\n            if (statusCode != HttpStatus.SC_OK) {\n                Log.w(getClass().getSimpleName(), ""Error "" + statusCode + "" for URL "" + url);\n                return null;\n            }\n            HttpEntity getResponseEntity = getResponse.getEntity();\n            return getResponseEntity.getContent();\n        } catch (Exception e) {\n            getRequest.abort();\n            Log.w(getClass().getSimpleName(), ""Error for URL "" + url, e);\n        }\n        return null;\n    }\n']",254,,0,0,,-3,"testSimpleQuery,dummySource,os,dummyContent,source,content,qResult,results,it,rSrc,rSrcIn,actualOut",,,,,Greedy,,
,,,,,,,,,,,,,,,
291,"['10451698', '18433984', '    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals("".svn"")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n', '    protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession reqSession = request.getSession();\n        ArrayList<File> uploadFiles = new ArrayList<File>();\n        LOG.info(""UploadServlet Upload request received"");\n        if (ServletFileUpload.isMultipartContent(request)) {\n            LOG.debug(""UploadServlet Received a multipart request."");\n        } else {\n            LOG.debug(""UploadServlet Received a non-multipart request."");\n        }\n        String tempDirName = UUID.randomUUID().toString();\n        File tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);\n        tempUploadDir.getParentFile().mkdir();\n        while (tempUploadDir.exists()) {\n            tempDirName = UUID.randomUUID().toString();\n            tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);\n        }\n        tempUploadDir.mkdir();\n        File attachmentDir = (File) (reqSession.getAttribute(""up2p:attachdir""));\n        if (attachmentDir != null) {\n            LOG.info(""UploadServlet: Copying provided attachment to upload dir from: "" + attachmentDir.getAbsolutePath());\n            tempUploadDir.delete();\n            attachmentDir.renameTo(tempUploadDir);\n            reqSession.removeAttribute(""up2p:attachdir"");\n        }\n        LOG.info(""UploadServlet: Using temporary directory: "" + tempUploadDir.getPath());\n        PairList paramMap = null;\n        if (ServletFileUpload.isMultipartContent(request)) {\n            paramMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());\n            if (paramMap.size() == 0) {\n                LOG.debug(""UploadServlet Parsed multipart request and "" + ""found no parameters. Parsing as regular"" + "" request instead."");\n                paramMap = copyParameters(request);\n                LOG.debug(""UploadServlet Parsed as regular request and found "" + paramMap.size() + "" parameters."");\n            }\n        } else {\n            paramMap = copyParameters(request);\n        }\n        String communityId = getCurrentCommunityId(request.getSession());\n        String newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);\n        LOG.debug(""UploadServlet: Got active community: "" + newcommunity);\n        if (newcommunity != null) {\n            communityId = newcommunity;\n            LOG.debug(""switching to community"" + communityId);\n        }\n        if (communityId == null || communityId.length() == 0) {\n            LOG.warn(""UploadServlet Current community ID is missing from"" + ""the user session."");\n            writeError(request, response, ""The current community is unknown."" + "" Please select a community before performing "" + ""any actions."", paramMap);\n            for (File f : tempUploadDir.listFiles()) {\n                f.delete();\n            }\n            tempUploadDir.delete();\n            return;\n        }\n        LOG.info(""UploadServlet Uploading to community "" + communityId + ""."");\n        uploadFiles.clear();\n        Iterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);\n        String filename = """";\n        try {\n            if (uploadedFileIter.hasNext()) {\n                filename = uploadedFileIter.next();\n            } else {\n                throw new IOException(""UploadServlet: No up2p:filename parameters were found."");\n            }\n            if (filename.startsWith(""file:"")) filename = filename.substring(5);\n            if (filename.length() == 0) {\n                throw new IOException(""UploadServlet: An empty up2p:filename parameter was submitted."");\n            }\n            File resourceFile = null;\n            resourceFile = new File(adapter.getStorageDirectory(communityId), filename);\n            File tempResFile = new File(tempUploadDir, filename);\n            if (!tempResFile.exists() && !resourceFile.exists()) {\n                throw new IOException(""UploadServlet: The uploaded resource could not be found."");\n            }\n            if ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {\n                resourceFile = FileUtil.createUniqueFile(resourceFile);\n                LOG.info(""UploadServlet: Direct upload, copying resource file.\\n\\tOriginal: "" + tempResFile.getPath() + ""\\n\\tNew: "" + resourceFile.getPath());\n                resourceFile.getParentFile().mkdir();\n                FileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);\n                FileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);\n                filename = resourceFile.getName();\n            }\n            LOG.info(""UploadServlet: resource file name: "" + filename);\n            uploadFiles.add(resourceFile);\n        } catch (IOException e) {\n            LOG.error(""UploadServlet: "" + e.getMessage());\n            writeError(request, response, e.getMessage(), paramMap);\n            return;\n        }\n        String editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);\n        if (editResourceId != null && editResourceId.length() > 0) {\n            LOG.debug(""UploadServlet: Got edit resource: "" + editResourceId);\n            File editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));\n            if (editAttach.exists() && editAttach.isDirectory()) {\n                LOG.debug(""UploadServlet: Copying additional attachments from: "" + editAttach.getAbsolutePath());\n                for (File oldFile : editAttach.listFiles()) {\n                    File newFile = new File(tempUploadDir, oldFile.getName());\n                    if (!newFile.exists()) {\n                        LOG.debug(""UploadServlet: Copying attachment: "" + oldFile.getAbsolutePath() + "" to "" + newFile.getAbsolutePath());\n                        FileOutputStream attachCopyStream = new FileOutputStream(newFile);\n                        FileUtil.writeFileToStream(attachCopyStream, oldFile, true);\n                    } else {\n                        LOG.debug(""UploadServlet: Attachment "" + newFile.getName() + "" explicitly replaced in new upload."");\n                    }\n                }\n            }\n        }\n        String batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);\n        boolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;\n        if (batchUpload) {\n            LOG.info(""UploadSerlvet Recieved batch upload request."");\n            File batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());\n            uploadFiles.clear();\n            LOG.debug(""UploadServlet resource file stored at: "" + batchFile.getPath());\n            XMLReader reader = TransformerHelper.getXMLReader();\n            reader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));\n            try {\n                FileInputStream batchInput = new FileInputStream(batchFile);\n                reader.parse(new InputSource(batchInput));\n                batchInput.close();\n            } catch (Exception e) {\n                LOG.error(""UploadServlet: Error parsing batch upload file."");\n                LOG.error(""UploadServlet: "" + e.getMessage());\n                writeError(request, response, ""Uploaded content was not a valid batch resource file."", paramMap);\n                return;\n            }\n            batchFile.delete();\n            adapter.addNotification(""Batch file succesfully processed into "" + uploadFiles.size() + "" resources."");\n        }\n        boolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;\n        String id = """";\n        boolean duplicateResource = false;\n        int uploadCount = 0;\n        for (int i = 0; i < uploadFiles.size(); i++) {\n            LOG.info(""UploadServlet Publishing resource to WebAdapter: "" + uploadFiles.get(i).getName());\n            try {\n                id = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);\n                uploadFiles.remove(i);\n                i--;\n                uploadCount++;\n                LOG.info(""UploadServlet Resource published with id: "" + id);\n            } catch (IOException e) {\n                LOG.warn(""UploadServlet IO Error occured in reading the uploaded file: "" + e.getMessage(), e);\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, ""An error occured in reading the uploaded file: "" + e.getMessage(), paramMap);\n                return;\n            } catch (SAXParseException e) {\n                LOG.warn(""UploadServlet SAX Parse Error occured in uploaded resource: "" + e.getMessage());\n                String errMsg = ""Invalid XML in the uploaded resource.<br/>"" + e.getMessage() + ""<br/><br/>File location: "" + uploadFiles.get(i).getAbsolutePath() + ""<br/>Line: "" + e.getLineNumber() + "" Column: "" + e.getColumnNumber();\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, errMsg, paramMap);\n                return;\n            } catch (SAXException e) {\n                LOG.warn(""UploadServlet Invalid XML in uploaded resource: "" + e.getMessage());\n                String errMsg = ""Invalid XML in uploaded resource<br/><i>"" + e.getMessage() + ""</i><br/>"" + ""File location: "" + uploadFiles.get(i).getAbsolutePath();\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, errMsg, paramMap);\n                return;\n            } catch (DuplicateResourceException e) {\n                LOG.info(""UploadServlet Duplicate Resource: "" + e.getResourceId() + "" Community: "" + e.getCommunityId());\n                if (batchUpload) {\n                    if (!duplicateResource) {\n                        adapter.addNotification(""Warning: Batch upload contained previously published "" + "" resources which have been discarded."");\n                        duplicateResource = true;\n                    }\n                } else {\n                    uploadFilesCleanup(uploadFiles, tempUploadDir);\n                    String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n                    if (respondWithXml != null && respondWithXml.length() > 0) {\n                        writeError(request, response, ""This resource is already shared with resource "" + "" id: "" + e.getResourceId(), paramMap);\n                        return;\n                    }\n                    String redirect = response.encodeURL(""/overwrite.jsp?up2p:community="" + e.getCommunityId() + ""&up2p:resource="" + e.getResourceId());\n                    LOG.info(""UploadServlet Redirecting to "" + redirect);\n                    RequestDispatcher rd = request.getRequestDispatcher(redirect);\n                    rd.forward(request, response);\n                    return;\n                }\n            } catch (NetworkAdapterException e) {\n                LOG.info(""UploadServlet Error in the Network Adapter for"" + "" community ID "" + communityId, e);\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, ""Error in the Network Adapter for this community. <br/>"" + e.getMessage(), paramMap);\n                return;\n            } catch (ResourceNotFoundException e) {\n                LOG.info(""UploadServlet Error Resource not found "" + e);\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, ""Error : <br/>"" + e.getMessage(), paramMap);\n                return;\n            }\n        }\n        uploadFilesCleanup(uploadFiles, tempUploadDir);\n        String ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);\n        String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n        if (respondWithXml != null && respondWithXml.length() > 0) {\n            response.setContentType(""text/xml"");\n            PrintWriter out = response.getWriter();\n            out.println(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>"");\n            out.println(""<upload success=\\""true\\"" >"");\n            out.println(""<resid>"" + id + ""</resid>"");\n            out.println(""</upload>"");\n        } else if (ajaxRequest != null && ajaxRequest.length() > 0) {\n            LOG.debug(""UploadServlet Recieved xmlHttp request, responding with XML"");\n            response.setContentType(""text/xml"");\n            PrintWriter out = response.getWriter();\n            out.println(""<?xml version=\\""1.0\\"" encoding=\\""UTF-8\\""?>"");\n            out.print(""<resource id=\\"""" + request.getParameter(HttpParams.UP2P_RESOURCE) + ""\\"" "");\n            if (request.getParameter(HttpParams.UP2P_PEERID) != null) {\n                out.print(""peerid=\\"""" + request.getParameter(HttpParams.UP2P_PEERID) + ""\\"" "");\n            }\n            out.println(""/>"");\n        } else if (batchUpload) {\n            adapter.addNotification(uploadCount + "" resources were succesfully published."");\n            request.setAttribute(""up2p.display.mode"", ""view"");\n            String redirect = response.encodeURL(""/view.jsp?up2p:community="" + communityId);\n            LOG.info(""UploadServlet Redirecting to "" + redirect);\n            RequestDispatcher rd = request.getRequestDispatcher(redirect);\n            rd.forward(request, response);\n        } else if (!pushUpload) {\n            request.setAttribute(""up2p.display.mode"", ""view"");\n            String redirect = response.encodeURL(""/view.jsp?up2p:resource="" + id);\n            LOG.info(""UploadServlet Redirecting to "" + redirect);\n            RequestDispatcher rd = request.getRequestDispatcher(redirect);\n            rd.forward(request, response);\n        }\n        return;\n    }\n']",227,,1,1,,-3,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read",,,,,Greedy,,
,,,,,,,,,,,,,,,
292,"['5061606', '23246123', '    protected void createSettingsIfNecessary() throws IOException {\n        OutputStream out = null;\n        try {\n            final File fSettings = SettingsUtils.getSettingsFile();\n            if (!fSettings.exists()) {\n                fSettings.createNewFile();\n                final Path src = new Path(""mvn/settings.xml"");\n                final InputStream in = FileLocator.openStream(getBundle(), src, false);\n                out = new FileOutputStream(SettingsUtils.getSettings(), true);\n                IOUtils.copy(in, out);\n            } else {\n                Logger.getLog().info(""File settings.xml already exists at "" + fSettings);\n            }\n        } finally {\n            if (out != null) {\n                out.flush();\n                out.close();\n            }\n        }\n    }\n', '    protected Control createDialogArea(Composite parent) {\n        Composite composite = (Composite) super.createDialogArea(parent);\n        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));\n        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));\n        Composite content = new Composite(composite, SWT.NONE);\n        content.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final int ncol = 1;\n        GridLayout layout = new GridLayout(1, false);\n        layout.numColumns = ncol;\n        content.setLayout(layout);\n        Browser browser = null;\n        Text text = null;\n        try {\n            browser = new Browser(content, SWT.NONE);\n            browser.setLayoutData(new GridData(GridData.FILL_BOTH));\n        } catch (Throwable t) {\n            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);\n            text.setLayoutData(new GridData(GridData.FILL_BOTH));\n        }\n        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");\n        InputStream in = null;\n        BufferedReader r = null;\n        StringBuffer sb = new StringBuffer();\n        try {\n            in = url.openStream();\n            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));\n            String line;\n            while ((line = r.readLine()) != null) sb.append(line).append(""\\r\\n"");\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (r != null) {\n                try {\n                    r.close();\n                } catch (IOException e) {\n                }\n            }\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());\n        return composite;\n    }\n']",135,"    protected void createSettingsIfNacessesary() throws IOException {
        OutputStream OU = null;
        try {
            final File  fSetup = SettingsUtils.getSettingsFile();
            if (! fSetup.exists()) {
                 fSetup.createNewFile();
                final Path url = new Path(""mvn/settings.xml"");
                final InputStream IN = FileLocator.openStream(getBundle(), url, false);
                OU = new FileOutputStream(SettingsUtils.getSettings(), true);
                IOUtils.copy(IN, OU);
            } else {
                Logger.getLog().info(""File settings.xml already exists at "" +  fSetup);
            }
        } finally {
            if (OU != null) {
                OU.flush();
                OU.close();
            }
        }
    }
",0,0,0,-1,"createSettingsIfNecessary,out,fSettings,src,in","createSettingsIfNecessary:-4.927317301432291e-07,out:-2.2888183593750003e-06,fSettings:2.86102294921875e-07,src:-3.973642985026042e-07,in:7.947285970052083e-08,",5,15,"src:url,in:IN,out:OU,fSettings: fSetup,createSettingsIfNecessary:createSettingsIfNacessesary,",Greedy,,
,,,,,,,,,,,,,,,
293,"['12389873', '13644375', '    private void load() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            ClearData.clearTables(stmt);\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, \'Living Thing\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, \'Inanimate Object\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, \'Dog\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, \'Sheltie\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, \'Eskimo\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, \'Person\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, \'Collar\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, \'Ball\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, \'Fido\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, \'Samantha\')"");\n            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, \'A collar\')"");\n            stmt.executeQuery(""select setval(\'objects_objectid_seq\', 1000)"");\n            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values (\'hasa\', 2)"");\n            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values (\'partof\', 2)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, \'isa\', 1)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, \'isa\', 1)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, \'isa\', 100)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, \'isa\', 300)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, \'isa\', 300)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, \'isa\', 100)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, \'isa\', 200)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, \'isa\', 200)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, \'instance\', 400)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, \'instance\', 500)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, \'instance\', 800)"");\n            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, \'hasa\', 801)"");\n            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values (\'color\')"");\n            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values (\'weight\')"");\n            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values (\'length\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'green\', \'color\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'blue\', \'color\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'light\', \'weight\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'heavy\', \'weight\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'short\', \'length\')"");\n            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values (\'long\', \'length\')"");\n            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, \'light\')"");\n            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, \'short\')"");\n            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, \'blue\')"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'LEFT-WALL\', \'1\', \'AV+ | NP+\', 1)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'the\', \'1\', \'D+\', 1)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'big\', \'1\', \'ADJ+\', 400)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'dog\', \'1\', \'[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)\', 700)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'run\', \'1\', \'[S-] & AV- & [PREP+]\', 800)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'across\', \'1\', \'PREP- & PO+\', 800)"");\n            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values (\'street\', \'1\', \'[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)\', 800)"");\n            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values (\'with\', 100, \'hasa\')"");\n            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values (\'in\', 200, \'partof\')"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 1, \'good\', \'best\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 2, \'*y\', \'*iest\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 3, \'*e\', \'*est\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'superlative\', 4, \'*\', \'*est\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 1, \'good\', \'better\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 2, \'*y\', \'*ier\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 3, \'*e\', \'*er\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'comparative\', 4, \'*\', \'*er\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'possessive\', 1, \'*s\', \'*s\\\\\'\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'possessive\', 2, \'*\', \'*\\\\\'s\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 1, \'be\', \'being\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 2, \'*Vy\', \'*Vying\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 3, \'*c\', \'*cking\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 4, \'*VVC\', \'*VVCing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 5, \'*VC\', \'*VCCing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 6, \'*ie\', \'*ying\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 7, \'*e\', \'*ing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'present perfect\', 8, \'*\', \'*ing\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 1, \'sing\', \'sang\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 2, \'give\', \'gave\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 3, \'swim\', \'swam\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 4, \'have\', \'had\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 5, \'run\', \'ran\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 6, \'do\', \'did\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 7, \'be\', \'was\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 8, \'throw\', \'threw\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 9, \'sleep\', \'slept\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 10, \'*c\', \'*cked\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 11, \'*VVC\', \'*VVCed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 12, \'*VC\', \'*VCCed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 13, \'*y\', \'*ied\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 14, \'*oe\', \'*oed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 15, \'*e\', \'*ed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past\', 16, \'*\', \'*ed\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 1, \'sing\', \'sung\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 2, \'give\', \'given\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 3, \'swim\', \'swum\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 4, \'have\', \'had\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 5, \'do\', \'done\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 6, \'be\', \'been\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 7, \'sleep\', \'slept\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 8, \'*e\', \'*ed\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'past perfect\', 9, \'*\', \'*ed\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first singular\', 1, \'be\', \'am\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first singular\', 2, \'have\', \'have\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first singular\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'second singular\', 1, \'be\', \'are\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'second singular\', 2, \'have\', \'have\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'second singular\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 1, \'be\', \'is\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 2, \'have\', \'has\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 3, \'do\', \'do\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 4, \'*ch\', \'*ches\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 5, \'*sh\', \'*shes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 6, \'*x\', \'*xes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 7, \'*z\', \'*zes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 8, \'*Cy\', \'*Cies\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 9, \'*s\', \'*ses\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 10, \'*o\', \'*oes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third singular\', 11, \'*\', \'*s\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first plural\', 1, \'be\', \'are\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first plural\', 2, \'have\', \'have\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'first plural\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third plural\', 1, \'be\', \'are\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third plural\', 2, \'have\', \'have\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'third plural\', 3, \'*\', \'*\', FALSE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 1, \'leaf\', \'leaves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 2, \'knife\', \'knives\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 3, \'elf\', \'elves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 4, \'half\', \'halves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 5, \'loaf\', \'loaves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 6, \'shelf\', \'shelves\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 7, \'wife\', \'wives\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 8, \'person\', \'people\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 9, \'deer\', \'deer\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 10, \'child\', \'children\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 11, \'*Co\', \'*Coes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 12, \'*s\', \'*ses\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 13, \'*ch\', \'*ches\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 14, \'*sh\', \'*shes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 15, \'*x\', \'*xes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 16, \'*z\', \'*zes\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 17, \'*Cy\', \'*Cies\', TRUE)"");\n            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values (\'English\', \'plural\', 18, \'*\', \'*s\', TRUE)"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, \'$N[.N]\', \'D+\', 100, \'money\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, \'N/N/N\', \'D+\', 200, \'date\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, \'[/](C/)C\', \'D+\', 300, \'unix path\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, \'[A:](C\\\\\\\\)C\', \'D+\', 400, \'dos path\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, \'N:N\', \'D+\', 500, \'time\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, \'N.N.N.N\', \'D+\', 600, \'internet\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, \'E(.E)\', \'D+\', 700, \'hostname\')"");\n            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, \'{+-}N[.N]\', \'D+\', 800, \'number\')"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'i\', 1, 3, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'we\', 1, 3, TRUE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'they\', 3, 3, TRUE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'he\', 3, 1, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'she\', 3, 2, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'it\', 3, 3, FALSE)"");\n            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values (\'you\', 2, 3, FALSE)"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'actor\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'origin\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'destination\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'object\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'instrument\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'beneficiary\')"");\n            stmt.executeUpdate(""insert into FrameSlots (SlotName) values (\'location\')"");\n            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values (\'throw\', \'actor\', \'destination\', \'object\')"");\n            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values (\'melt\', \'actor\', \'\', \'\')"");\n            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values (\'kill\', \'actor\', \'\', \'object\')"");\n            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values (\'with\', 200, \'instrument\')"");\n            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values (\'at\', 1, \'location\')"");\n            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values (\'the\', 1)"");\n            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values (\'a\', 2)"");\n            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values (\'an\', 2)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'S\', 1)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PN\', 2)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'DO\', 3)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'IO\', 4)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PO\', 5)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'NP\', 6)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'AV\', 7)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'LV\', 8)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PREP\', 9)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'D\', 10)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'ADJ\', 11)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'ADV\', 12)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'CONJ\', 13)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'INTJ\', 14)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'PA\', 15)"");\n            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values (\'HV\', 16)"");\n            stmt.executeQuery(""select setval(\'instructions_instructionid_seq\', 1)"");\n            int next = 2;\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'throw\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'test\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, \'actor\', 1, \'hasa\', \'300\', \'\')"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, \'instrument\', 3, null, null, \'blue\')"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'get\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, \'drop\', null, 0, null, null, null)"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");\n            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");\n            stmt.executeQuery(""select setval(\'transactions_transactionid_seq\', 1)"");\n            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", \'throw something\')"");\n            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", \'get something\')"");\n            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", \'drop something\')"");\n            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, \'actor\', 1, \'hasa\', \'object\', \'\', 3)"");\n            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, \'object\', 4, \'\', \'\', \'heavy\', 4)"");\n            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, \'object\', "" + (next + 6) + "")"");\n            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, \'destination\', "" + (next + 5) + "")"");\n            stmt.executeQuery(""select setval(\'verbtransactions_verbid_seq\', 1)"");\n            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values (\'throw\', 2, 2)"");\n            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, \'object\', 200)"");\n            stmt.executeUpdate(""update SystemProperties set value = \'Play Data\' where name = \'DB Data Version\'"");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }\n', '    public String get(String url) {\n        try {\n            HttpGet get = new HttpGet(url);\n            HttpResponse response = this.getHttpClient().execute(get);\n            HttpEntity entity = response.getEntity();\n            if (entity == null) {\n                throw new RuntimeException(""response body was empty"");\n            }\n            return EntityUtils.toString(entity);\n        } catch (RuntimeException ex) {\n            throw ex;\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n']",1689,,0,0,,-3,"load,conn,stmt",,,,,Greedy,,
,,,,,,,,,,,,,,,
294,"['12171364', '8150996', '    private static FrameworkFactory getFrameworkFactory() throws Exception {\n        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");\n        if (url != null) {\n            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n            try {\n                for (String s = br.readLine(); s != null; s = br.readLine()) {\n                    s = s.trim();\n                    if ((s.length() > 0) && (s.charAt(0) != \'#\')) {\n                        return (FrameworkFactory) Class.forName(s).newInstance();\n                    }\n                }\n            } finally {\n                if (br != null) br.close();\n            }\n        }\n        throw new Exception(""Could not find framework factory."");\n    }\n', '    private static boolean copyFile(File in, File out) {\n        boolean ok = true;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(in);\n            os = new FileOutputStream(out);\n            byte[] buffer = new byte[0xFFFF];\n            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n        } catch (IOException e) {\n            System.err.println(e);\n            ok = false;\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n        }\n        return ok;\n    }\n']",151,,0,0,,-3,"getFrameworkFactory,url,br,s",,,,,Greedy,,
,,,,,,,,,,,,,,,
295,"['20929570', '9738825', '    public static String toMd5(String str) {\n        MessageDigest messageDigest = null;\n        try {\n            messageDigest = MessageDigest.getInstance(""MD5"");\n            messageDigest.reset();\n            messageDigest.update(str.getBytes(""UTF-8""));\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""NoSuchAlgorithmException caught!"");\n            System.exit(-1);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        byte[] byteArray = messageDigest.digest();\n        StringBuffer md5StrBuff = new StringBuffer();\n        for (int i = 0; i < byteArray.length; i++) {\n            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n        }\n        return md5StrBuff.toString();\n    }\n', '    public void load(URL url) throws IOException {\n        ResourceLocator locator = null;\n        try {\n            locator = new RelativeResourceLocator(url);\n        } catch (URISyntaxException use) {\n            throw new IllegalArgumentException(""Bad URL: "" + use);\n        }\n        ResourceLocatorTool.addResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);\n        InputStream stream = null;\n        try {\n            stream = url.openStream();\n            if (stream == null) {\n                throw new IOException(""Failed to load materials file \'"" + url + ""\'"");\n            }\n            logger.fine(""Loading materials from \'"" + url + ""\'..."");\n            load(stream);\n        } finally {\n            if (stream != null) stream.close();\n            ResourceLocatorTool.removeResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);\n            locator = null;\n        }\n    }\n']",187,"    public static String toMm512(String msg) {
        MessageDigest messageDest = null;
        try {
            messageDest = MessageDigest.getInstance(""MD5"");
            messageDest.reset();
            messageDest.update(msg.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] entityBuffer = messageDest.digest();
        StringBuffer md5BuffBuff = new StringBuffer();
        for (int gravity = 0; gravity < entityBuffer.length; gravity++) {
            if (Integer.toHexString(0xFF & entityBuffer[gravity]).length() == 1) md5BuffBuff.append(""0"").append(Integer.toHexString(0xFF & entityBuffer[gravity])); else md5BuffBuff.append(Integer.toHexString(0xFF & entityBuffer[gravity]));
        }
        return md5BuffBuff.toString();
    }
",0,0,0,-1,"toMd5,str,messageDigest,byteArray,md5StrBuff,i","toMd5:4.6647113302479615e-08,str:-6.219615106997283e-07,messageDigest:-2.591506294582201e-08,byteArray:9.588573289954143e-07,md5StrBuff:-4.975692085597826e-07,i:-8.085499639096467e-07,",6,23,"byteArray:entityBuffer,md5StrBuff:md5BuffBuff,i:gravity,messageDigest:messageDest,toMd5:toMm512,str:msg,",Greedy,,
,,,,,,,,,,,,,,,
296,"['2676365', '17111859', '    public void reset(int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");\n            psta.setInt(1, currentPilot);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }\n', '    private String getHash(String string) {\n        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        md5.reset();\n        md5.update(string.getBytes());\n        byte[] result = md5.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < result.length; i++) {\n            hexString.append(Integer.toHexString(0xFF & result[i]));\n        }\n        String str = hexString.toString();\n        hashTime.stop();\n        return str;\n    }\n']",66,,0,0,,-3,"reset,currentPilot,psta",,,,,Greedy,,
,,,,,,,,,,,,,,,
297,"['18793482', '4798332', '    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();\n            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");\n            if (!englishFile.exists()) throw new Exception(""English file not found"");\n            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";\n            File file = new File(propertiesFilePath);\n            if (!file.exists()) {\n                FileReader in = new FileReader(englishFile);\n                FileWriter out = new FileWriter(file);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String line = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((line = breader.readLine()) != null) {\n                if (line.startsWith(""#"")) strBuilder.append(line).append(""\\n""); else {\n                    String[] pieces = line.split(""="");\n                    if (pieces.length == 2) {\n                        if (pieces[0].trim().equals(messageName)) {\n                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\\n"");\n                            found = true;\n                        } else strBuilder.append(line).append(""\\n"");\n                    } else strBuilder.append(line).append(""\\n"");\n                }\n            }\n            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\\n"");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static String SHA(String source) {\n        logger.info(source);\n        String result = null;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(""SHA"");\n            digest.update(source.getBytes());\n            byte[] bytes = digest.digest();\n            result = EncodeUtils.hexEncode(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        logger.info(result);\n        return result;\n    }\n']",410,,0,0,,-3,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found",,,,,Greedy,,
,,,,,,,,,,,,,,,
298,"['14783950', '2461169', '    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n        if (fileList == null || fileList.size() == 0) return;\n        FileOutputStream fos = new FileOutputStream(zipFileName);\n        ZipOutputStream zos = new ZipOutputStream(fos);\n        Iterator iter = fileList.iterator();\n        while (iter.hasNext()) {\n            String fileName = (String) iter.next();\n            int ind = Math.max(fileName.lastIndexOf(\'/\'), fileName.lastIndexOf(\'\\\\\'));\n            String shortName = ""unknown"";\n            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n            zos.putNextEntry(new ZipEntry(shortName));\n            FileInputStream fis = new FileInputStream(fileName);\n            byte[] buf = new byte[10000];\n            int bytesRead;\n            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n            fis.close();\n            zos.closeEntry();\n        }\n        zos.close();\n    }\n', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",209,,1,1,,-3,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,,,,Greedy,,
,,,,,,,,,,,,,,,
299,"['23273706', '14598566', '    public String[][] getProjectTreeData() {\n        String[][] treeData = null;\n        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";\n        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";\n        try {\n            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setValidating(false);\n            DocumentBuilder parser = factory.newDocumentBuilder();\n            URL u = new URL(urldata);\n            DataInputStream is = new DataInputStream(u.openStream());\n            FileOutputStream os = new FileOutputStream(filename);\n            int iBufSize = is.available();\n            byte inBuf[] = new byte[20000 * 1024];\n            int iNumRead;\n            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);\n            os.close();\n            is.close();\n            File f = new File(filename);\n            InputStream inputstream = new FileInputStream(f);\n            Document document = parser.parse(inputstream);\n            NodeList nodelist = document.getElementsByTagName(""proj"");\n            int num = nodelist.getLength();\n            treeData = new String[num][3];\n            for (int i = 0; i < num; i++) {\n                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));\n                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));\n                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));\n            }\n        } catch (MalformedURLException ex) {\n            System.out.println(ex);\n        } catch (ParserConfigurationException ex) {\n            System.out.println(ex);\n        } catch (NullPointerException e) {\n        } catch (Exception ex) {\n            System.out.println(ex);\n        }\n        return treeData;\n    }\n', '    public static void copyFileByNIO(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n']",428,,1,1,,-3,"getProjectTreeData,treeData,filename,urlString,urldata,factory,parser,u,is,os,iBufSize,inBuf,iNumRead,f,inputstream,document,nodelist,num,i",,,,,Greedy,,
,,,,,,,,,,,,,,,
300,"['9954926', '4562786', '    private void simulate() throws Exception {\n        BufferedWriter out = null;\n        out = new BufferedWriter(new FileWriter(outFile));\n        out.write(""#Thread\\tReputation\\tAction\\n"");\n        out.flush();\n        System.out.println(""Simulate..."");\n        File file = new File(trsDemoSimulationfile);\n        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();\n        ObtainUserReputationResponse obtainUserReputationResponse;\n        RateUser rateUserRequest;\n        RateUserResponse rateUserResponse;\n        FileInputStream fis = new FileInputStream(file);\n        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String call = br.readLine();\n        while (call != null) {\n            rateUserRequest = generateRateUserRequest(call);\n            try {\n                rateUserResponse = trsPort.rateUser(rateUserRequest);\n                System.out.println(""----------------R A T I N G-------------------"");\n                System.out.println(""VBE: "" + rateUserRequest.getVbeId());\n                System.out.println(""VO: "" + rateUserRequest.getVoId());\n                System.out.println(""USER: "" + rateUserRequest.getUserId());\n                System.out.println(""SERVICE: "" + rateUserRequest.getServiceId());\n                System.out.println(""ACTION: "" + rateUserRequest.getActionId());\n                System.out.println(""OUTCOME: "" + rateUserResponse.isOutcome());\n                System.out.println(""----------------------------------------------"");\n                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationRequest.setIoi(null);\n            obtainUserReputationRequest.setServiceId(null);\n            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationRequest.setVoId(null);\n            try {\n                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\n                System.out.println(""-----------R E P U T A T I O N----------------"");\n                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());\n                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());\n                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());\n                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());\n                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());\n                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());\n                System.out.println(""----------------------------------------------"");\n                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\n                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationRequest.setIoi(null);\n            obtainUserReputationRequest.setServiceId(null);\n            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());\n            try {\n                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\n                System.out.println(""-----------R E P U T A T I O N----------------"");\n                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());\n                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());\n                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());\n                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());\n                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());\n                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());\n                System.out.println(""----------------------------------------------"");\n                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\n                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            call = br.readLine();\n        }\n        fis.close();\n        br.close();\n        out.flush();\n        out.close();\n    }\n', '    private String GetResponse(URL url) {\n        String content = null;\n        try {\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setDoOutput(false);\n            conn.setRequestMethod(""GET"");\n            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String line;\n                while ((line = br.readLine()) != null) content += line;\n            } else {\n            }\n        } catch (MalformedURLException e) {\n            e.getStackTrace();\n        } catch (IOException e) {\n            e.getStackTrace();\n        }\n        return content;\n    }\n']",734,"    private void simulate() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction
"");
        out.flush();
        System.out.println(""Simulate..."");
        File lock = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserRelutationQuery = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserReportositoryResp;
        RateUser rateuserQUEST;
        RateUserResponse rateuserresponse;
        FileInputStream lIs = new FileInputStream(lock);
        BufferedReader nr = new BufferedReader(new InputStreamReader(lIs));
        String line = nr.readLine();
        while (line != null) {
            rateuserQUEST = generateRateUserRequest(line);
            try {
                rateuserresponse = trsPort.rateUser(rateuserQUEST);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + rateuserQUEST.getVbeId());
                System.out.println(""VO: "" + rateuserQUEST.getVoId());
                System.out.println(""USER: "" + rateuserQUEST.getUserId());
                System.out.println(""SERVICE: "" + rateuserQUEST.getServiceId());
                System.out.println(""ACTION: "" + rateuserQUEST.getActionId());
                System.out.println(""OUTCOME: "" + rateuserresponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateuserresponse.getMessage(), true, rateuserresponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserRelutationQuery.setIoi(null);
            obtainUserRelutationQuery.setServiceId(null);
            obtainUserRelutationQuery.setUserId(rateuserQUEST.getUserId());
            obtainUserRelutationQuery.setVbeId(rateuserQUEST.getVbeId());
            obtainUserRelutationQuery.setVoId(null);
            try {
                obtainUserReportositoryResp = trsPort.obtainUserReputation(obtainUserRelutationQuery);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserRelutationQuery.getVbeId());
                System.out.println(""VO: "" + obtainUserRelutationQuery.getVoId());
                System.out.println(""USER: "" + obtainUserRelutationQuery.getUserId());
                System.out.println(""SERVICE: "" + obtainUserRelutationQuery.getServiceId());
                System.out.println(""IOI: "" + obtainUserRelutationQuery.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReportositoryResp.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReportositoryResp.getMessage(), true, obtainUserReportositoryResp.isOutcome());
                assertEquals(0.0, obtainUserReportositoryResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserRelutationQuery.setIoi(null);
            obtainUserRelutationQuery.setServiceId(null);
            obtainUserRelutationQuery.setUserId(rateuserQUEST.getUserId());
            obtainUserRelutationQuery.setVbeId(rateuserQUEST.getVbeId());
            obtainUserRelutationQuery.setVoId(rateuserQUEST.getVoId());
            try {
                obtainUserReportositoryResp = trsPort.obtainUserReputation(obtainUserRelutationQuery);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserRelutationQuery.getVbeId());
                System.out.println(""VO: "" + obtainUserRelutationQuery.getVoId());
                System.out.println(""USER: "" + obtainUserRelutationQuery.getUserId());
                System.out.println(""SERVICE: "" + obtainUserRelutationQuery.getServiceId());
                System.out.println(""IOI: "" + obtainUserRelutationQuery.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReportositoryResp.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReportositoryResp.getMessage(), true, obtainUserReportositoryResp.isOutcome());
                assertEquals(0.0, obtainUserReportositoryResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            line = nr.readLine();
        }
        lIs.close();
        nr.close();
        out.flush();
        out.close();
    }
",0,0,0,-1,"simulate,out,file,obtainUserReputationRequest,obtainUserReputationResponse,rateUserRequest,rateUserResponse,fis,br,call","simulate:-7.127978138087951e-08,out:-1.3143745894284591e-05,file:-1.9417595617549935e-07,obtainUserReputationRequest:-1.10237868790774e-06,obtainUserReputationResponse:-6.083360652333682e-07,rateUserRequest:-1.1662846988009422e-06,rateUserResponse:-3.3181967194547357e-07,fis:-1.2166721304667364e-07,br:-6.144808739730993e-07,call:1.4747540975354382e-08,",8,65,"out:out,simulate:simulate,call:line,obtainUserReputationRequest:obtainUserRelutationQuery,file:lock,fis:lIs,br:nr,rateUserResponse:rateuserresponse,obtainUserReputationResponse:obtainUserReportositoryResp,rateUserRequest:rateuserQUEST,",Greedy,,
,,,,,,,,,,,,,,,
301,"['21425787', '18974466', '    private static void copyFile(File in, File out) {\n        try {\n            FileChannel sourceChannel = new FileInputStream(in).getChannel();\n            FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n            sourceChannel.close();\n            destinationChannel.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n', '    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n']",83,"    private static void CopyFile(File cin, File po) {
        try {
            FileChannel ourceClass = new FileInputStream(cin).getChannel();
            FileChannel destinationConnection = new FileOutputStream(po).getChannel();
            ourceClass.transferTo(0, ourceClass.size(), destinationConnection);
            ourceClass.close();
            destinationConnection.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",1,1,1,-1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:4.2716662089029944e-07,in:1.3311703999837239e-06,out:1.0728836059570312e-06,sourceChannel:1.4503796895345051e-06,destinationChannel:8.940696716308594e-08,",5,12,"in:cin,sourceChannel:ourceClass,out:po,destinationChannel:destinationConnection,copyFile:CopyFile,",Greedy,,
,,,,,,,,,,,,,,,
302,"['841724', '732800', '    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(""reading "" + inFile + ""..."");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(""writing "" + outFile + ""..."");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(""done!"");\n    }\n', '    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n        int k_blockSize = 1024;\n        int byteCount;\n        char[] buf = new char[k_blockSize];\n        File ofp = new File(outFile);\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n        zos.setMethod(ZipOutputStream.DEFLATED);\n        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");\n        BufferedWriter bw = new BufferedWriter(osw);\n        ZipEntry zot = null;\n        File ifp = new File(inFile);\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");\n        BufferedReader br = new BufferedReader(isr);\n        ZipEntry zit = null;\n        while ((zit = zis.getNextEntry()) != null) {\n            if (zit.getName().equals(""content.xml"")) {\n                continue;\n            }\n            zot = new ZipEntry(zit.getName());\n            zos.putNextEntry(zot);\n            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n            bw.flush();\n            zos.closeEntry();\n        }\n        zos.putNextEntry(new ZipEntry(""content.xml""));\n        bw.flush();\n        osw = new OutputStreamWriter(zos, ""UTF8"");\n        bw = new BufferedWriter(osw);\n        return bw;\n    }\n']",262,"    private static void readAndResend(File docFilename, File reportfile) throws IOException {
        ImageInputStream IIs = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(docFilename)));
        DcmParser dcmStatement = DcmParserFactory.getInstance().newDcmParser(IIs);
        Dataset db = DcmObjectFactory.getInstance().newDataset();
        dcmStatement.setDcmHandler(db.getDcmHandler());
        dcmStatement.parseDcmFile(null, Tags.PixelData);
        PixelDataReader ddRunner = pdFact.newReader(db, IIs, dcmStatement.getDcmDecodeParam().byteOrder, dcmStatement.getReadVR());
        System.writer.println(""reading "" + docFilename + ""..."");
        ddRunner.readPixelData(false);
        ImageOutputStream writer = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(reportfile)));
        DcmEncodeParam dcmEnParam = DcmEncodeParam.IVR_LE;
        db.writeDataset(writer, dcmEnParam);
        db.writeHeader(writer, dcmEnParam, Tags.PixelData, dcmStatement.getReadVR(), dcmStatement.getReadLength());
        System.writer.println(""writing "" + reportfile + ""..."");
        PixelDataWriter PDEditor = pdFact.newWriter(ddRunner.getPixelDataArray(), false, db, writer, dcmStatement.getDcmDecodeParam().byteOrder, dcmStatement.getReadVR());
        PDEditor.writePixelData();
        writer.flush();
        writer.close();
        System.writer.println(""done!"");
    }
",1,1,1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-1.419158208937872e-08,inFile:-9.366444178989955e-08,outFile:-3.150531223842076e-07,iis:-2.2990362984793525e-07,dcmParser:-7.152557373046875e-07,ds:1.362391880580357e-07,pdReader:8.514949253627231e-08,out:-2.2990362984793525e-07,dcmEncParam:-5.108969552176339e-08,pdWriter:-3.9736429850260414e-08,",10,42,"dcmParser:dcmStatement,ds:db,pdReader:ddRunner,out:writer,pdWriter:PDEditor,iis:IIs,inFile:docFilename,readAndRewrite:readAndResend,outFile:reportfile,dcmEncParam:dcmEnParam,",Greedy,,
,,,,,,,,,,,,,,,
303,"['19944975', '2461169', '    public void writeConfiguration(Writer out) throws IOException {\n        if (myResource == null) {\n            out.append(""# Unable to print configuration resource\\n"");\n        } else {\n            URL url = myResource.getUrl();\n            InputStream in = url.openStream();\n            if (in != null) {\n                try {\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n            } else {\n                out.append(""# Unable to print configuration resource\\n"");\n            }\n        }\n    }\n', '    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n']",87,"    public void outputContent(Writer cast) throws IOException {
        if (myResource == null) {
            cast.append(""# Unable to print configuration resource
"");
        } else {
            URL uri = myResource.getUrl();
            InputStream is = uri.openStream();
            if (is != null) {
                try {
                    IOUtils.copy(is, cast);
                } finally {
                    IOUtils.closeQuietly(is);
                }
            } else {
                cast.append(""# Unable to print configuration resource
"");
            }
        }
    }
",1,1,1,-1,"writeConfiguration,out,url,in","writeConfiguration:3.901394930752841e-07,out:2.4275346235795454e-06,url:1.8423253839666194e-06,in:3.251162442294034e-06,",4,11,"writeConfiguration:outputContent,out:cast,url:uri,in:is,",Greedy,,
,,,,,,,,,,,,,,,
304,"['19335986', '9236363', '    public void uncaughtException(final Thread t, final Throwable e) {\n        final Display display = Display.getCurrent();\n        final Shell shell = new Shell(display);\n        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\n        message.setText(""Hawkscope Error"");\n        message.setMessage(e.getMessage() + ""\\nSubmit Hawkscope Error Report to Issue Tracker?"");\n        log.error(""Uncaught exception"", e);\n        if (message.open() == SWT.OK) {\n            IOUtils.copyToClipboard(Version.getBugReport(e));\n            try {\n                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It\'s currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));\n            } catch (final Exception e1) {\n                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");\n            }\n        }\n        shell.dispose();\n    }\n', '    private void unJarStart(String jarPath, String jarEntryStart) {\n        String path;\n        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));\n        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));\n        try {\n            new File(path + ""/"" + relPath).mkdirs();\n            JarFile jar = new JarFile(jarPath);\n            Enumeration<JarEntry> entries = jar.entries();\n            while (entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                String jarEntry = entry.getName();\n                if (jarEntry.startsWith(jarEntryStart)) {\n                    ZipEntry ze = jar.getEntry(jarEntry);\n                    File bin = new File(path + ""/"" + jarEntry);\n                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",173,"    public void uncaughtFailure(final Thread  T, final Throwable i) {
        final Display session = Display.getCurrent();
        final Shell ui = new Shell(session);
        final MessageBox hello = new MessageBox(ui, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        hello.setText(""Hawkscope Error"");
        hello.setMessage(i.getMessage() + ""
Submit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", i);
        if (hello.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(i));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception E1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        ui.dispose();
    }
",1,1,1,-1,"uncaughtException,t,e,display,shell,message,e1","uncaughtException:-3.725290298461914e-08,t:-5.21540641784668e-08,e:5.960464477539063e-08,display:-4.470348358154297e-08,shell:4.246830940246582e-07,message:-1.7881393432617188e-07,e1:5.21540641784668e-08,",7,16,"e:i,shell:ui,message:hello,t: T,display:session,uncaughtException:uncaughtFailure,e1:E1,",Greedy,,
,,,,,,,,,,,,,,,
305,"['12066447', '8932510', '    protected void truncate(final File file) {\n        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");\n        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            final File backupRoot = new File(this.getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(""Can\'t create backup dir for backup storage"");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(this.getBackupDateFormat());\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);\n            }\n            final String date = df.format(new Date(file.lastModified()));\n            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                final ZipEntry entry = new ZipEntry(file.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(file));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(file);\n                final byte[] buffer = new byte[1024];\n                int readed;\n                while ((readed = fis.read(buffer)) != -1) {\n                    zos.write(buffer, 0, readed);\n                }\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(""Can\'t create zip file"", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(""Can\'t close zip file"", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(""Can\'t close zipped file"", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(""Can\'t delete old log file "" + file.getAbsolutePath());\n            }\n        }\n    }\n', '    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        InputStream is = null;\n        InputStream page = null;\n        OutputStream os = null;\n        String rootUrl = null;\n        try {\n            boolean isMultipart = ServletFileUpload.isMultipartContent(request);\n            if (!isMultipart) {\n                request.setAttribute(""error"", ""Form isn\'t a multipart form"");\n                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");\n                rd.forward(request, response);\n            }\n            ServletFileUpload upload = new ServletFileUpload();\n            String webUrl = null;\n            FileItemIterator iter = upload.getItemIterator(request);\n            while (iter.hasNext()) {\n                FileItemStream item = iter.next();\n                String name = item.getFieldName();\n                if (name.equals(""webpage"")) {\n                    is = item.openStream();\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    IOUtils.copy(is, baos);\n                    page = new ByteArrayInputStream(baos.toByteArray());\n                } else if (name.equals(""weburl"")) {\n                    InputStream wpIs = null;\n                    try {\n                        webUrl = Streams.asString(item.openStream());\n                        URL u = new URL(webUrl);\n                        wpIs = new BufferedInputStream(u.openStream());\n                        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                        IOUtils.copy(wpIs, baos);\n                        page = new ByteArrayInputStream(baos.toByteArray());\n                    } finally {\n                        IOUtils.closeQuietly(wpIs);\n                    }\n                } else if (name.equals(""rooturl"")) {\n                    rootUrl = Streams.asString(item.openStream());\n                }\n            }\n            if (page == null) {\n                request.setAttribute(""error"", ""Form doesn\'t have an html file"");\n                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");\n                rd.forward(request, response);\n            }\n            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);\n            os = new BufferedOutputStream(response.getOutputStream());\n            os.write(delegate.getMailer());\n            os.flush();\n        } catch (Exception e) {\n            streamException(request, response, e);\n        } finally {\n            IOUtils.closeQuietly(page);\n            IOUtils.closeQuietly(is);\n            IOUtils.closeQuietly(os);\n        }\n    }\n']",400,,1,1,,-3,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed",,,,,Greedy,,
,,,,,,,,,,,,,,,
306,"['9796161', '11049257', '    public static String getMD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(""MD5"");\n            m.update(s.getBytes(), 0, s.length());\n            return """" + new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(""MD5 is not supported !!!"");\n        }\n        return s;\n    }\n', '    public static String generate(boolean secure, boolean sep) throws UnknownHostException {\n        MessageDigest messagedigest;\n        StringBuilder stringbuffer = new StringBuilder();\n        try {\n            messagedigest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {\n            throw new RuntimeException(nosuchalgorithmexception);\n        }\n        StringBuffer stringbuffer2;\n        InetAddress inetaddress = InetAddress.getLocalHost();\n        long l = System.currentTimeMillis();\n        long l1 = 0L;\n        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();\n        stringbuffer.append(inetaddress.toString());\n        stringbuffer.append("":"");\n        stringbuffer.append(Long.toString(l));\n        stringbuffer.append("":"");\n        stringbuffer.append(Long.toString(l1));\n        messagedigest.update(stringbuffer.toString().getBytes());\n        byte abyte0[] = messagedigest.digest();\n        StringBuffer stringbuffer1 = new StringBuffer();\n        for (int i = 0; i < abyte0.length; i++) {\n            int j = abyte0[i] & 0xff;\n            if (j < 16) stringbuffer1.append(\'0\');\n            stringbuffer1.append(Integer.toHexString(j));\n        }\n        String s = stringbuffer1.toString();\n        stringbuffer2 = new StringBuffer();\n        if (sep) {\n            stringbuffer2.append(s.substring(0, 8));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(8, 12));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(12, 16));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(16, 20));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(20));\n            return stringbuffer2.toString();\n        } else {\n            return s;\n        }\n    }\n']",80,,1,1,,-3,"getMD5,s,m",,,,,Greedy,,
,,,,,,,,,,,,,,,
307,"['1586662', '20414923', '    int doOne(int bid, int tid, int aid, int delta) {\n        int aBalance = 0;\n        if (Conn == null) {\n            bench.incrementFailedTransactionCount();\n            return 0;\n        }\n        try {\n            if (Benchmark.prepared_stmt) {\n                pstmt1.setInt(1, delta);\n                pstmt1.setInt(2, aid);\n                pstmt1.executeUpdate();\n                pstmt1.clearWarnings();\n                pstmt2.setInt(1, aid);\n                ResultSet RS = pstmt2.executeQuery();\n                pstmt2.clearWarnings();\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n                pstmt3.setInt(1, delta);\n                pstmt3.setInt(2, tid);\n                pstmt3.executeUpdate();\n                pstmt3.clearWarnings();\n                pstmt4.setInt(1, delta);\n                pstmt4.setInt(2, bid);\n                pstmt4.executeUpdate();\n                pstmt4.clearWarnings();\n                pstmt5.setInt(1, tid);\n                pstmt5.setInt(2, bid);\n                pstmt5.setInt(3, aid);\n                pstmt5.setInt(4, delta);\n                pstmt5.executeUpdate();\n                pstmt5.clearWarnings();\n            } else {\n                Statement Stmt = Conn.createStatement();\n                String Query = ""UPDATE accounts"";\n                Query += "" SET Abalance = Abalance + "" + delta;\n                Query += "" WHERE Aid = "" + aid;\n                int res = Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = ""SELECT Abalance"";\n                Query += "" FROM accounts"";\n                Query += "" WHERE Aid = "" + aid;\n                ResultSet RS = Stmt.executeQuery(Query);\n                Stmt.clearWarnings();\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n                Query = ""UPDATE tellers"";\n                Query += "" SET Tbalance = Tbalance + "" + delta;\n                Query += "" WHERE Tid = "" + tid;\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = ""UPDATE branches"";\n                Query += "" SET Bbalance = Bbalance + "" + delta;\n                Query += "" WHERE Bid = "" + bid;\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = ""INSERT INTO history(Tid, Bid, Aid, delta)"";\n                Query += "" VALUES ("";\n                Query += tid + "","";\n                Query += bid + "","";\n                Query += aid + "","";\n                Query += delta + "")"";\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Stmt.close();\n            }\n            if (Benchmark.transactions) {\n                Conn.commit();\n            }\n            return aBalance;\n        } catch (java.lang.Exception e) {\n            if (Benchmark.verbose) {\n                System.out.println(""Transaction failed: "" + e.getMessage());\n                e.printStackTrace();\n            }\n            bench.incrementFailedTransactionCount();\n            if (Benchmark.transactions) {\n                try {\n                    Conn.rollback();\n                } catch (SQLException e1) {\n                }\n            }\n        }\n        return 0;\n    }\n', '    protected int deleteBitstreamInfo(int id, Connection conn) {\n        PreparedStatement stmt = null;\n        int numDeleted = 0;\n        try {\n            stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\n            stmt.setInt(1, id);\n            numDeleted = stmt.executeUpdate();\n            if (numDeleted > 1) {\n                conn.rollback();\n                throw new IllegalStateException(""Too many rows deleted! Number of rows deleted: "" + numDeleted + "" only one row should be deleted for bitstream id "" + id);\n            }\n        } catch (SQLException e) {\n            LOG.error(""Problem deleting bitstream. "" + e.getMessage(), e);\n            throw new RuntimeException(""Problem deleting bitstream. "" + e.getMessage(), e);\n        } finally {\n            cleanup(stmt);\n        }\n        return numDeleted;\n    }\n']",525,,1,1,,-3,"doOne,bid,tid,aid,delta,aBalance,RS,Stmt,Query,res",,,,,Greedy,,
,,,,,,,,,,,,,,,
308,"['6271502', '18570190', '    @Override\n    public InputStream getResourceByClassName(String className) {\n        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");\n        if (url == null) {\n            return null;\n        } else {\n            try {\n                return url.openStream();\n            } catch (IOException e) {\n                return null;\n            }\n        }\n    }\n', '    public Processing getProcess(long processId) throws BookKeeprCommunicationException {\n        try {\n            synchronized (httpClient) {\n                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));\n                HttpResponse resp = httpClient.execute(req);\n                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    try {\n                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());\n                        if (xmlable instanceof Processing) {\n                            Processing p = (Processing) xmlable;\n                            return p;\n                        } else {\n                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");\n                        }\n                    } catch (SAXException ex) {\n                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);\n                        throw new BookKeeprCommunicationException(ex);\n                    }\n                } else {\n                    resp.getEntity().consumeContent();\n                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");\n                }\n            }\n        } catch (HttpException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        } catch (IOException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        } catch (URISyntaxException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        }\n    }\n']",60,,0,0,,-3,"getResourceByClassName,className,url",,,,,Greedy,,
,,,,,,,,,,,,,,,
309,"['62362', '3767903', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n', '    public static void copy(File source, File destination) throws FileNotFoundException, IOException {\n        if (source == null) throw new NullPointerException(""The source may not be null."");\n        if (destination == null) throw new NullPointerException(""The destination may not be null."");\n        FileInputStream sourceStream = new FileInputStream(source);\n        destination.getParentFile().mkdirs();\n        FileOutputStream destStream = new FileOutputStream(destination);\n        try {\n            FileChannel sourceChannel = sourceStream.getChannel();\n            FileChannel destChannel = destStream.getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } finally {\n            try {\n                sourceStream.close();\n                destStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n']",765,,1,1,,-3,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,,Greedy,,
,,,,,,,,,,,,,,,
310,"['293167', '8166767', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {\n        retryTimes--;\n        try {\n            String url = getServiceUrl() + ""/"" + invocation.getMethod().getName();\n            HttpPost postMethod = new HttpPost(url);\n            if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));\n            HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);\n            StatusLine sl = rsp.getStatusLine();\n            if (sl.getStatusCode() >= 300) {\n                throw new RuntimeException(""Did not receive successful HTTP response: status code = "" + sl.getStatusCode() + "", status message = ["" + sl.getReasonPhrase() + ""]"");\n            }\n            HttpEntity entity = rsp.getEntity();\n            StringBuilder sb = new StringBuilder();\n            InputStream is = entity.getContent();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""utf-8""));\n            String line;\n            while ((line = reader.readLine()) != null) sb.append(line).append(""\\n"");\n            reader.close();\n            is.close();\n            String responseBody = null;\n            if (sb.length() > 0) {\n                sb.deleteCharAt(sb.length() - 1);\n                responseBody = sb.toString();\n            }\n            Type t = invocation.getMethod().getGenericReturnType();\n            if (t.equals(Void.class) || responseBody == null) return null;\n            return JsonUtils.fromJson(responseBody, t);\n        } catch (ConnectTimeoutException e) {\n            if (retryTimes < 0) throw e;\n            if (urlFromDiscovery) {\n                String serviceUrl = discoverServiceUrl(getServiceInterface().getName());\n                if (!serviceUrl.equals(getServiceUrl())) {\n                    setServiceUrl(serviceUrl);\n                    log.info(""relocate service url:"" + serviceUrl);\n                }\n            }\n            return invoke(invocation, retryTimes);\n        }\n    }\n']",236,,1,1,,-3,"doVersionCheck,view,url,in,bin,line,version,build",,,,,Greedy,,
,,,,,,,,,,,,,,,
311,"['9109613', '4164833', '    public static void fileCopy(String from_name, String to_name) throws IOException {\n        File fromFile = new File(from_name);\n        File toFile = new File(to_name);\n        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);\n        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);\n        if (!fromFile.isFile()) abort(""can\'t copy directory: "" + from_name);\n        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) abort(""destination directory doesn\'t exist: "" + parent);\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n', '    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {\n        long now = new Date().getTime() / 1000;\n        OutputStream deb = new FileOutputStream(debFile);\n        deb.write(""!<arch>\\n"".getBytes());\n        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());\n        deb.write(DEBIAN_BINARY_CONTENT.getBytes());\n        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\n        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());\n        FileInputStream control = new FileInputStream(controlFile);\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int read = control.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        control.close();\n        endFileEntry(deb, controlFile.length());\n        startFileEntry(deb, DATA_NAME, now, dataFile.length());\n        FileInputStream data = new FileInputStream(dataFile);\n        while (true) {\n            int read = data.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        data.close();\n        endFileEntry(deb, dataFile.length());\n        deb.close();\n    }\n']",346,,1,1,,-3,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read",,,,,Greedy,,
,,,,,,,,,,,,,,,
312,"['20623709', '2324868', '    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n        if (!targetDirectory.exists()) {\n            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());\n        }\n        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n            FileInputStream fis = new FileInputStream(this);\n            FileChannel fci = fis.getChannel();\n            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));\n            FileChannel fco = fos.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(64000);\n            while (fci.read(buffer) > 0) {\n                buffer.flip();\n                fco.write(buffer);\n                buffer.clear();\n            }\n            fci.close();\n            fco.close();\n            return (long) 1;\n        } else {\n            long currentBasesCount = 0;\n            long currentEntriesCount = 0;\n            int targetCount = 0;\n            FileChannel fastaChannel = new FileInputStream(this).getChannel();\n            int totalSeqCount = 0;\n            long totalResiduesCount = 0;\n            try {\n                long prevTime = System.currentTimeMillis();\n                long fastaFileSize = this.length();\n                long fastaFileReadOffset = 0L;\n                long partitionStartOffset = 0L;\n                final int bufferSize = 1024 * 1024;\n                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n                int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                for (; fastaFileReadOffset < fastaFileSize; ) {\n                    long nBytes = fastaChannel.read(fastaBuffer);\n                    if (nBytes <= 0) {\n                        fastaBuffer.limit(0);\n                        break;\n                    } else {\n                        fastaBuffer.flip();\n                        fastaFileReadOffset += nBytes;\n                    }\n                    for (; ; ) {\n                        if (!fastaBuffer.hasRemaining()) {\n                            fastaBuffer.clear();\n                            break;\n                        }\n                        int b = fastaBuffer.get();\n                        if (b == \'\\r\') {\n                        } else if (b == \'\\n\') {\n                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n                            }\n                        } else if (b == \'>\') {\n                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            }\n                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n                                    fastaBuffer.position(fastaBuffer.position() - 1);\n                                    long currentTime = System.currentTimeMillis();\n                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");\n                                    prevTime = currentTime;\n                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();\n                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n                                    partitionChannel.force(true);\n                                    partitionChannel.close();\n                                    targetCount++;\n                                    partitionStartOffset += nBytes;\n                                    currentBasesCount = 0;\n                                    currentEntriesCount = 0;\n                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                                } else {\n                                    fastaReadState = FASTAFileTokenizer.DEFLINE;\n                                    currentEntriesCount++;\n                                }\n                                totalSeqCount++;\n                            }\n                        } else {\n                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                totalResiduesCount++;\n                                currentBasesCount++;\n                            }\n                        }\n                    }\n                }\n                if (partitionStartOffset < fastaFileSize) {\n                    long currentTime = System.currentTimeMillis();\n                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");\n                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();\n                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n                    partitionChannel.force(true);\n                    partitionChannel.close();\n                    targetCount++;\n                }\n                if (size.isUnknown()) {\n                    size.setBases(totalResiduesCount);\n                    size.setEntries(totalSeqCount);\n                }\n            } finally {\n                fastaChannel.close();\n            }\n            return (long) targetCount;\n        }\n    }\n', '            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    Pattern delim = Pattern.compile(""[ ]"");\n                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(""/home/lindenb/jeter.txt.gz""))));\n                    String line = null;\n                    URL url = new URL(""http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"");\n                    URLConnection conn = url.openConnection();\n                    conn.setDoOutput(true);\n                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n                    wr.write(""db=snp&retmode=xml"");\n                    while ((line = r.readLine()) != null) {\n                        String tokens[] = delim.split(line, 2);\n                        if (!tokens[0].startsWith(""rs"")) continue;\n                        wr.write(""&id="" + tokens[0].substring(2).trim());\n                    }\n                    wr.flush();\n                    r.close();\n                    InputStream in = conn.getInputStream();\n                    IOUtils.copyTo(in, System.err);\n                    in.close();\n                    wr.close();\n                } catch (IOException err) {\n                    err.printStackTrace();\n                }\n            }\n']",828,,1,1,,-3,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,,Greedy,,
,,,,,,,,,,,,,,,
313,"['18891988', '15445861', '    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {\n        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);\n        mLog.debug(""Received endpoint: "" + endpoint);\n        String fileLocation = null;\n        try {\n            String tempDir = System.getProperty(""java.io.tmpdir"");\n            URL url = new URL(wsdlLocation);\n            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";\n            String tmpWSDLFile = WSDLFile + "".tmp"";\n            File inputFile = new File(WSDLFile);\n            File tmpFile = new File(tmpWSDLFile);\n            if (!inputFile.exists() || inputFile.length() == 0) {\n                mLog.debug(""Downloading the WSDL"");\n                inputFile.createNewFile();\n                InputStream in = url.openStream();\n                FileOutputStream out = new FileOutputStream(inputFile);\n                URLConnection con = url.openConnection();\n                int fileLength = con.getContentLength();\n                ReadableByteChannel channelIn = Channels.newChannel(in);\n                FileChannel channelOut = out.getChannel();\n                channelOut.transferFrom(channelIn, 0, fileLength);\n                channelIn.close();\n                channelOut.close();\n                out.flush();\n                out.close();\n                in.close();\n                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));\n                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");\n                for (int i = 0; i < nl1.getLength(); i++) {\n                    Node node1 = nl1.item(i);\n                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {\n                        ((Element) node1).setAttribute(""location"", endpoint);\n                    }\n                }\n                FileOutputStream tmpOut = new FileOutputStream(tmpFile);\n                XMLUtils.DocumentToStream(tmpDocument, tmpOut);\n                tmpOut.flush();\n                tmpOut.close();\n                boolean retVal = inputFile.delete();\n                if (retVal) {\n                    retVal = tmpFile.renameTo(new File(WSDLFile));\n                }\n                mLog.debug(""Return Value: "" + retVal);\n            } else {\n                mLog.debug(""The WSDL is already at the ServiceProvider"");\n            }\n            fileLocation = WSDLFile;\n        } catch (MalformedURLException mx) {\n            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());\n            throw new AxisFault(mx.getMessage(), mx.getCause());\n        } catch (IOException ix) {\n            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());\n            throw new AxisFault(ix.getMessage(), ix.getCause());\n        } catch (ParserConfigurationException px) {\n            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());\n            throw new AxisFault(px.getMessage(), px.getCause());\n        } catch (SAXException sx) {\n            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());\n            throw new AxisFault(sx.getMessage(), sx.getCause());\n        }\n        return fileLocation;\n    }\n', '    public static void copyFile(File srcFile, File destFile) throws IOException {\n        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn\'t exist: "" + srcFile.getAbsolutePath());\n        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(destFile);\n        byte[] buffer = new byte[4096];\n        int no = 0;\n        try {\n            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n        } finally {\n            in.close();\n            out.close();\n        }\n    }\n']",593,,1,0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,,Greedy,,
,,,,,,,,,,,,,,,
314,"['18504192', '411595', '    static void copyFile(File in, File out) throws IOException {\n        FileChannel source = new FileInputStream(in).getChannel();\n        FileChannel destination = new FileOutputStream(out).getChannel();\n        source.transferTo(0, source.size(), destination);\n        source.close();\n        destination.close();\n    }\n', '    private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(""diff"", "".htm"");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(""<html><head><title>LOC Differences</title>\\n"" + SCRIPT + ""</head>\\n"" + ""<body bgcolor=\'#ffffff\'>\\n"" + ""<div onMouseOver=\\""window.defaultStatus=\'Metrics\'\\"">\\n"");\n        if (addedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");\n            out.write(addedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");\n            out.write(modifiedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");\n            out.write(deletedTable.toString());\n            out.write(""</table><br><br>"");\n        }\n        out.write(""<table name=METRICS BORDER>\\n"");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(""<tr><td>Base:&nbsp;</td><td>"");\n            out.write(Long.toString(base));\n            out.write(""</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>"");\n            out.write(Long.toString(deleted));\n            out.write(""</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>"");\n            out.write(Long.toString(modified));\n            out.write(""</td></tr>\\n<tr><td>Added:&nbsp;</td><td>"");\n            out.write(Long.toString(added));\n            out.write(""</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>"");\n            out.write(Long.toString(added + modified));\n            out.write(""</td></tr>\\n"");\n        }\n        out.write(""<tr><td>Total:&nbsp;</td><td>"");\n        out.write(Long.toString(total));\n        out.write(""</td></tr>\\n</table></div>"");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(""</BODY></HTML>"".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }\n']",68,,1,1,,-3,"copyFile,in,out,source,destination",,,,,Greedy,,
,,,,,,,,,,,,,,,
315,"['8973505', '15810440', '    public static void writeFileType(String uriFile, String outputfile, int num) {\n        BufferedWriter writer = null;\n        String uri = null;\n        try {\n            int counter = 1;\n            writer = new BufferedWriter(new FileWriter(outputfile));\n            BufferedReader reader = new BufferedReader(new FileReader(uriFile));\n            uri = null;\n            while (counter < num) {\n                uri = reader.readLine();\n                counter++;\n            }\n            while ((uri = reader.readLine()) != null) {\n                try {\n                    System.err.println(""working on the ["" + counter + ""]th document."");\n                    counter++;\n                    URL url = new URL(uri);\n                    URLConnection myConnection = url.openConnection();\n                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\n                    String line = null;\n                    boolean hasOWL = false;\n                    boolean hasRDFS = false;\n                    boolean hasRDF = false;\n                    int linecount = 0;\n                    while ((line = myReader.readLine()) != null) {\n                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;\n                        linecount++;\n                        if (linecount > 100) break;\n                    }\n                    if (hasOWL) writer.write(uri + ""\\t"" + OWL); else if (hasRDFS) writer.write(uri + ""\\t"" + RDFS); else if (hasRDF) writer.write(uri + ""\\t"" + RDF); else writer.write(uri + ""\\t"" + UNKNOWN);\n                    writer.newLine();\n                    writer.flush();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    try {\n                        writer.write(uri + ""\\t"" + BROKEN);\n                        writer.newLine();\n                        writer.flush();\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {\n        PreparedStatement pst1 = null;\n        PreparedStatement pst2 = null;\n        ResultSet rs = null;\n        int retVal = -1;\n        try {\n            pst1 = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");\n            pst1.setString(1, name);\n            pst1.setString(2, instructions);\n            pst1.setInt(3, categoryId);\n            if (pst1.executeUpdate() > 0) {\n                pst2 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");\n                pst2.setString(1, name);\n                pst2.setString(2, instructions);\n                pst2.setInt(3, categoryId);\n                rs = pst2.executeQuery();\n                if (rs.next()) {\n                    int id = rs.getInt(1);\n                    System.out.println(""Lis�t��n ainesosat"");\n                    String[] aines;\n                    for (int i = 0; i < ainekset.length; ++i) {\n                        aines = ainekset[i];\n                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));\n                    }\n                    retVal = id;\n                } else {\n                    retVal = -1;\n                }\n            } else {\n                retVal = -1;\n            }\n            conn.commit();\n        } catch (Exception e) {\n            conn.rollback();\n            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());\n        }\n    }\n']",391,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter to = null;
        String obo = null;
        try {
            int counter = 1;
            to = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            obo = null;
            while (counter < num) {
                obo = reader.readLine();
                counter++;
            }
            while ((obo = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL url = new URL(obo);
                    URLConnection myConnection = url.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) to.write(obo + ""\t"" + OWL); else if (hasRDFS) to.write(obo + ""\t"" + RDFS); else if (hasRDF) to.write(obo + ""\t"" + RDF); else to.write(obo + ""\t"" + UNKNOWN);
                    to.newLine();
                    to.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        to.write(obo + ""\t"" + BROKEN);
                        to.newLine();
                        to.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0,0,1,1,"writeFileType,uriFile,outputfile,num,writer,uri,counter,reader,url,myConnection,myReader,line,linecount,hasOWL,hasRDFS,hasRDF","writeFileType:0.000721653639259985,uriFile:0.014365562948129944,outputfile:0.02972345129918244,num:0.002691814454935365,writer:0.15705676301050994,uri:0.09462326259936316,counter:-0.005888994467460502,reader:-0.002809403306346829,url:0.009268733404450497,myConnection:0.013666326716794805,myReader:0.0036051232936018603,line:0.0366635948924695,linecount:0.003153504961628025,hasOWL:0.01059843220953214,hasRDFS:0.007485845331418313,hasRDF:0.0050900871470823126,",2,21,"writer:to,uri:obo,",Greedy,,
,,,,,,,,,,,,,,,
316,"['13783898', '22536033', '    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n', '    private boolean setPayload() throws IOException {\n        if (Index < Headers.length) {\n            FileOutputStream fos = new FileOutputStream(Headers[Index], true);\n            FileInputStream fis = new FileInputStream(HeadlessData);\n            FileChannel fic = fis.getChannel();\n            FileChannel foc = fos.getChannel();\n            fic.transferTo(0, fic.size(), foc);\n            fic.close();\n            foc.close();\n            setDestination(Destinations[Index]);\n            setPayload(Headers[Index]);\n            Index++;\n            return true;\n        }\n        return false;\n    }\n']",194,,1,1,,-3,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,,Greedy,,
,,,,,,,,,,,,,,,
317,"['4531653', '18046717', '    public static String md5(String data) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(MD);\n            md.update(data.getBytes(UTF8));\n            return encodeHex(md.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n', '    private String getFullClassName(URL url, String className) throws Exception {\n        JarInputStream jis = new JarInputStream(url.openStream());\n        ZipEntry zentry = null;\n        while ((zentry = jis.getNextEntry()) != null) {\n            String name = zentry.getName();\n            int lastPos = name.lastIndexOf("".class"");\n            if (lastPos < 0) {\n                continue;\n            }\n            name = name.replace(\'/\', \'.\');\n            int pos = -1;\n            if (className != null) {\n                pos = name.indexOf(className);\n                if (pos >= 0 && name.length() == pos + className.length() + 6) {\n                    jis.close();\n                    return (name.substring(0, lastPos));\n                }\n            }\n        }\n        jis.close();\n        return (null);\n    }\n']",60,"    public static String sha5(String cache) {
        try {
            MessageDigest det = MessageDigest.getInstance(MD);
            det.update(cache.getBytes(UTF8));
            return encodeHex(det.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0,0,0,-1,"md5,data,md","md5:8.145968119303385e-07,data:1.9868214925130207e-07,md:4.798173904418945e-06,",3,6,"md:det,md5:sha5,data:cache,",Greedy,,
,,,,,,,,,,,,,,,
318,"['9236363', '23370621', '    private void unJarStart(String jarPath, String jarEntryStart) {\n        String path;\n        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));\n        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));\n        try {\n            new File(path + ""/"" + relPath).mkdirs();\n            JarFile jar = new JarFile(jarPath);\n            Enumeration<JarEntry> entries = jar.entries();\n            while (entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                String jarEntry = entry.getName();\n                if (jarEntry.startsWith(jarEntryStart)) {\n                    ZipEntry ze = jar.getEntry(jarEntry);\n                    File bin = new File(path + ""/"" + jarEntry);\n                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {\n        InputStream in = downloadData(s3key);\n        if (in == null) {\n            throw new IOException(""No data found"");\n        }\n        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));\n        File temp = File.createTempFile(""dirsync"", null);\n        FileOutputStream fout = new FileOutputStream(temp);\n        try {\n            IOUtils.copy(in, fout);\n            if (target.exists()) {\n                target.delete();\n            }\n            IOUtils.closeQuietly(fout);\n            IOUtils.closeQuietly(in);\n            FileUtils.moveFile(temp, target);\n        } catch (IOException e) {\n            fetchStream(in);\n            throw e;\n        } finally {\n            IOUtils.closeQuietly(fout);\n            IOUtils.closeQuietly(in);\n        }\n    }\n']",208,,1,1,,-3,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,,,,Greedy,,
,,,,,,,,,,,,,,,
319,"['11484416', '19335986', '    private void moveFile(File orig, File target) throws IOException {\n        byte buffer[] = new byte[1000];\n        int bread = 0;\n        FileInputStream fis = new FileInputStream(orig);\n        FileOutputStream fos = new FileOutputStream(target);\n        while (bread != -1) {\n            bread = fis.read(buffer);\n            if (bread != -1) fos.write(buffer, 0, bread);\n        }\n        fis.close();\n        fos.close();\n        orig.delete();\n    }\n', '    public void uncaughtException(final Thread t, final Throwable e) {\n        final Display display = Display.getCurrent();\n        final Shell shell = new Shell(display);\n        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\n        message.setText(""Hawkscope Error"");\n        message.setMessage(e.getMessage() + ""\\nSubmit Hawkscope Error Report to Issue Tracker?"");\n        log.error(""Uncaught exception"", e);\n        if (message.open() == SWT.OK) {\n            IOUtils.copyToClipboard(Version.getBugReport(e));\n            try {\n                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It\'s currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));\n            } catch (final Exception e1) {\n                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");\n            }\n        }\n        shell.dispose();\n    }\n']",103,"    private void MoveImage(File coord, File tile) throws IOException {
        byte output[] = new byte[1000];
        int web = 0;
        FileInputStream Fiss = new FileInputStream(coord);
        FileOutputStream foos = new FileOutputStream(tile);
        while (web != -1) {
            web = Fiss.read(output);
            if (web != -1) foos.write(output, 0, web);
        }
        Fiss.close();
        foos.close();
        coord.delete();
    }
",1,1,1,-1,"moveFile,orig,target,buffer,bread,fis,fos","moveFile:2.8014183044433595e-07,orig:5.185604095458984e-07,target:-7.152557373046876e-08,buffer:8.940696716308594e-08,bread:-1.1324882507324219e-06,fis:2.3245811462402343e-07,fos:-4.112720489501953e-07,",7,20,"target:tile,fos:foos,orig:coord,fis:Fiss,buffer:output,bread:web,moveFile:MoveImage,",Greedy,,
,,,,,,,,,,,,,,,
320,"['21821404', '596993', '    public static String getWebPage(URL urlObj) {\n        try {\n            String content = """";\n            InputStreamReader is = new InputStreamReader(urlObj.openStream());\n            BufferedReader reader = new BufferedReader(is);\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content += line;\n            }\n            return content;\n        } catch (IOException e) {\n            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""\\nThis is could be caused by a number of things:"" + ""\\n"" + ""\\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\\n  - your computer does not have Internet access"" + ""\\n  - the heat death of the universe has occurred, taking down all web servers with it"");\n        }\n    }\n', '    private String makeLoginRequest(URL url) throws IOException {\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        urlConnection.setRequestMethod(""POST"");\n        urlConnection.setDoInput(true);\n        urlConnection.setDoOutput(true);\n        urlConnection.setUseCaches(false);\n        urlConnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");\n        StringBuilder content = new StringBuilder();\n        content.append(""Email="").append(URLEncoder.encode(EMAIL, ""UTF-8""));\n        content.append(""&Passwd="").append(URLEncoder.encode(PASSWORD, ""UTF-8""));\n        content.append(""&service="").append(URLEncoder.encode(SERVICE, ""UTF-8""));\n        content.append(""&source="").append(URLEncoder.encode(""Google Base data API"", ""UTF-8""));\n        OutputStream outputStream = urlConnection.getOutputStream();\n        outputStream.write(content.toString().getBytes(""UTF-8""));\n        outputStream.close();\n        int responseCode = urlConnection.getResponseCode();\n        InputStream inputStream;\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            inputStream = urlConnection.getInputStream();\n        } else {\n            inputStream = urlConnection.getErrorStream();\n        }\n        return toString(inputStream);\n    }\n']",152,"    public static String getDebugPages(URL logInfo) {
        try {
            String write = """";
            InputStreamReader ís = new InputStreamReader(logInfo.openStream());
            BufferedReader writer = new BufferedReader(ís);
            String record;
            while ((record = writer.readLine()) != null) {
                write += record;
            }
            return write;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(logInfo.toString()) + ""could not be retrieved."" + ""
This ís could be caused by a number of things:"" + ""
"" + ""
  - the computer hosting the web page you want ís down, or has returned an error"" + ""
  - your computer does not have Internet access"" + ""
  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
",0,0,0,-1,"getWebPage,urlObj,content,is,reader,line","getWebPage:2.7529895305633545e-06,urlObj:3.48016619682312e-05,content:-3.118067979812622e-06,is:-1.0639429092407227e-05,reader:9.03010368347168e-06,line:1.792609691619873e-05,",6,16,"urlObj:logInfo,is:ís,reader:writer,content:write,getWebPage:getDebugPages,line:record,",Greedy,,
,,,,,,,,,,,,,,,
321,"['18370075', '3375724', '    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(""MD5"");\n        md.update(salt);\n        md.update(password.getBytes(""UTF8""));\n        byte[] digest = md.digest();\n        return digest;\n    }\n', '    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {\n        int numeroDoRegistro = -1;\n        Scanner in = null;\n        Statement stmtLimpezaInicialDestino = conDestino.createStatement();\n        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";\n        stmtLimpezaInicialDestino.executeUpdate(sql);\n        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";\n        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;\n        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;\n        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;\n        final int TAMANHO_MEDIO_POR_REGISTRO = 81;\n        long tamanhoDosArquivos = pArquivoTXT.length();\n        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;\n        String registro;\n        String[] campos;\n        try {\n            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());\n            int quantidadeDeRegistrosImportada = 0;\n            numeroDoRegistro = 0;\n            String vSIGLA, vNOME;\n            BigDecimal vCNPJ;\n            java.sql.Date vDATA_CRIACAO;\n            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;\n            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";\n            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\\"""";\n            while (in.hasNextLine()) {\n                ++numeroDoRegistro;\n                registro = in.nextLine();\n                stmtDestino.clearParameters();\n                registro = registro.substring(1, registro.length() - 1);\n                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {\n                    registro = registro + "" "";\n                }\n                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);\n                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;\n                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {\n                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);\n                }\n                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];\n                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];\n                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];\n                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {\n                    vCNPJ = new BigDecimal(cnpjTmp);\n                } else {\n                    vCNPJ = null;\n                }\n                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];\n                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {\n                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));\n                    Calendar calendario = Calendar.getInstance();\n                    calendario.clear();\n                    calendario.set(ano, mes, dia);\n                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());\n                } else {\n                    vDATA_CRIACAO = null;\n                }\n                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);\n                stmtDestino.setStringAtName(""NOME"", vNOME);\n                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);\n                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);\n                int contagemDasInsercoes = stmtDestino.executeUpdate();\n                quantidadeDeRegistrosImportada++;\n                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;\n                pAndamento.setPercentualCompleto((int) percentualCompleto);\n            }\n            conDestino.commit();\n        } catch (Exception ex) {\n            conDestino.rollback();\n            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\n            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();\n            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;\n            problemaDetalhado.detalhesSobreOProblema = ex;\n            throw problemaDetalhado;\n        } finally {\n            pAndamento.setPercentualCompleto(100);\n            in.close();\n            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\n                stmtLimpezaInicialDestino.close();\n            }\n            if (stmtDestino != null && (!stmtDestino.isClosed())) {\n                stmtDestino.close();\n            }\n        }\n    }\n']",63,,0,0,,-3,"createPasswordDigest,password,salt,md,digest",,,,,Greedy,,
,,,,,,,,,,,,,,,
322,"['6403868', '9109613', '    private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n        File oldlog = null;\n        try {\n            boolean oldClassCopied = false;\n            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);\n            if (upgrade) {\n                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);\n                if (destPath.equals(lastVerPath)) {\n                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");\n                    if (!destPath.renameTo(bkdir)) {\n                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                    }\n                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                    lastVerPath = bkdir;\n                } else {\n                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");\n                }\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n            } else {\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);\n                }\n            }\n            dirty_ = true;\n            File[] ls = destPath.listFiles();\n            for (int i = 0; i < ls.length; i++) {\n                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();\n            }\n            byte[] buf = new byte[0];\n            int read = 0;\n            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                if (outClassFile.exists() && !outClassFile.delete()) {\n                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outClassFile.getName()));\n                }\n                final FileOutputStream out = new FileOutputStream(outClassFile);\n                final FileInputStream in = new FileInputStream(fileWithArchive_);\n                if (installClassOffset_ > 0) {\n                    in.skip(installClassOffset_);\n                }\n                buf = new byte[0];\n                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];\n                read = in.read(buf, 0, buf.length);\n                out.write(buf, 0, read);\n                out.close();\n                in.close();\n            }\n            final FileInputStream in = new FileInputStream(fileWithArchive_);\n            if (jarOffset_ > 0) {\n                in.skip(jarOffset_);\n            }\n            JarInputStream jar = new JarInputStream(in);\n            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");\n            if (outJarFile.exists() && !outJarFile.delete()) {\n                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\\n"" + outJarFile.getName()));\n            }\n            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n            ZipEntry entry = jar.getNextEntry();\n            final int bufSize = 32768;\n            buf = new byte[bufSize];\n            while (entry != null) {\n                String entryName = entry.getName();\n                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {\n                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {\n                    FileOutputStream out = null;\n                    try {\n                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");\n                        VAGlobals.copyStream(jar, out, buf);\n                    } catch (IOException e) {\n                        throw e;\n                    } finally {\n                        if (out != null) out.close();\n                    }\n                } else if (!entryName.endsWith("".zip"")) {\n                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);\n                    ZipEntry outEntry = new ZipEntry(entryName);\n                    CRC32 crc = new CRC32();\n                    outJar.putNextEntry(outEntry);\n                    int size = 0;\n                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n                        size += read;\n                        if (read == 0) {\n                            Thread.yield();\n                        } else {\n                            outJar.write(buf, 0, read);\n                            crc.update(buf, 0, read);\n                        }\n                    }\n                    outEntry.setSize(size);\n                    outEntry.setCrc(crc.getValue());\n                    outJar.flush();\n                    outJar.closeEntry();\n                }\n                jar.closeEntry();\n                entry = jar.getNextEntry();\n            }\n            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");\n            Properties prop = new Properties();\n            try {\n                prop.load(pin);\n            } catch (IOException exc) {\n            }\n            if (language == null) language = ""default"";\n            prop.setProperty(""vainstall.destination.language"", language);\n            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");\n            CRC32 crc = new CRC32();\n            outEntry.setCrc(crc.getValue());\n            outEntry.setSize(prop.size());\n            outJar.putNextEntry(outEntry);\n            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);\n            outEntry.setCrc(crc.getValue());\n            outJar.closeEntry();\n            jar.close();\n            outJar.close();\n            in.close();\n        } catch (IOException e) {\n            String message = e.getLocalizedMessage();\n            message += ""\\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");\n            e.printStackTrace();\n            exitOnError(new IOException(message));\n        }\n        return oldlog;\n    }\n', '    public static void fileCopy(String from_name, String to_name) throws IOException {\n        File fromFile = new File(from_name);\n        File toFile = new File(to_name);\n        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);\n        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);\n        if (!fromFile.isFile()) abort(""can\'t copy directory: "" + from_name);\n        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) abort(""destination directory doesn\'t exist: "" + parent);\n            File dir = new File(parent);\n            if (!dir.exists()) abort(""destination directory doesn\'t exist: "" + parent);\n            if (dir.isFile()) abort(""destination is not a directory: "" + parent);\n            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n']",1149,,1,1,,-3,"extractUninstallFiles,_destPath,upgrade,lastVer,oldlog,destPath,lastVerPath,bkdir,oldClassCopied,ls,i",,,,,Greedy,,
,,,,,,,,,,,,,,,
323,"['12428013', '4118412', '    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\n        if (monitor != null && monitor.isCanceled()) {\n            return;\n        }\n        try {\n            ftpClient = new FTPClient();\n            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\n            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\n            ftpClient.connect();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            if (from != null) {\n                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\n                synchedSet.add(ftpHolder);\n            }\n            JobHandler.aquireFTPLock();\n            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\n                if (monitor != null && monitor.isCanceled()) {\n                    JobHandler.releaseFTPLock();\n                    ftpClient.quit();\n                    return;\n                }\n                Thread.yield();\n                FTPHolder element = (FTPHolder) iter.next();\n                ftpClient.setType(FTPTransferType.ASCII);\n                ftpClient.put(element.from, element.to);\n                if (element.renameTo != null) {\n                    try {\n                        ftpClient.delete(element.renameTo);\n                    } catch (Exception e) {\n                    }\n                    ftpClient.rename(element.to, element.renameTo);\n                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);\n                }\n            }\n            JobHandler.releaseFTPLock();\n            ftpClient.quit();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (FTPException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        synchedSet.clear();\n    }\n', '    private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n        log.println(""Concat files into: "" + outputFile);\n        OutputStream out = new FileOutputStream(absPath + outputFile);\n        byte[] buffer = new byte[4096];\n        int readBytes;\n        for (String file : inputFiles) {\n            log.println("" Read: "" + file);\n            InputStream in = new FileInputStream(absPath + file);\n            while ((readBytes = in.read(buffer)) != -1) {\n                out.write(buffer, 0, readBytes);\n            }\n            in.close();\n        }\n        out.close();\n        if (compress) {\n            long normalSize = new File(absPath + outputFile).length();\n            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");\n            builder.directory(new File(absPath));\n            Process process = builder.start();\n            process.waitFor();\n            long minSize = new File(absPath + outputFile).length();\n            long diff = normalSize - minSize;\n            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");\n        }\n    }\n']",401,,0,0,,-3,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element",,,,,Greedy,,
,,,,,,,,,,,,,,,
324,"['4618237', '11049257', '    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n        FileChannel inChannel = new FileInputStream(fin).getChannel();\n        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            if (inChannel != null) try {\n                inChannel.close();\n            } catch (IOException ex) {\n            }\n            if (outChannel != null) try {\n                outChannel.close();\n            } catch (IOException ex) {\n            }\n        }\n    }\n', '    public static String generate(boolean secure, boolean sep) throws UnknownHostException {\n        MessageDigest messagedigest;\n        StringBuilder stringbuffer = new StringBuilder();\n        try {\n            messagedigest = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {\n            throw new RuntimeException(nosuchalgorithmexception);\n        }\n        StringBuffer stringbuffer2;\n        InetAddress inetaddress = InetAddress.getLocalHost();\n        long l = System.currentTimeMillis();\n        long l1 = 0L;\n        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();\n        stringbuffer.append(inetaddress.toString());\n        stringbuffer.append("":"");\n        stringbuffer.append(Long.toString(l));\n        stringbuffer.append("":"");\n        stringbuffer.append(Long.toString(l1));\n        messagedigest.update(stringbuffer.toString().getBytes());\n        byte abyte0[] = messagedigest.digest();\n        StringBuffer stringbuffer1 = new StringBuffer();\n        for (int i = 0; i < abyte0.length; i++) {\n            int j = abyte0[i] & 0xff;\n            if (j < 16) stringbuffer1.append(\'0\');\n            stringbuffer1.append(Integer.toHexString(j));\n        }\n        String s = stringbuffer1.toString();\n        stringbuffer2 = new StringBuffer();\n        if (sep) {\n            stringbuffer2.append(s.substring(0, 8));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(8, 12));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(12, 16));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(16, 20));\n            stringbuffer2.append(""-"");\n            stringbuffer2.append(s.substring(20));\n            return stringbuffer2.toString();\n        } else {\n            return s;\n        }\n    }\n']",112,,0,0,,-3,"writeFileToFile,fin,fout,append,inChannel,outChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
325,"['4593011', '20275821', '    private void loadDDL() throws IOException {\n        try {\n            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();\n        } catch (SQLException e) {\n            Statement stmt = null;\n            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n                LOG.fatal(SQL_ERROR, e);\n                throw new IOException(""Error on initial data store read"", e);\n            }\n            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES (\'schema\', \'1\')"" };\n            try {\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                for (String q : qry) stmt.executeUpdate(q);\n                conn.commit();\n            } catch (SQLException e2) {\n                try {\n                    conn.rollback();\n                } catch (SQLException e3) {\n                    LOG.fatal(SQL_ERROR, e3);\n                }\n                LOG.fatal(SQL_ERROR, e2);\n                throw new IOException(""Error initializing data store"", e2);\n            } finally {\n                if (stmt != null) {\n                    try {\n                        stmt.close();\n                    } catch (SQLException e4) {\n                        LOG.fatal(SQL_ERROR, e4);\n                        throw new IOException(""Unable to cleanup data store resources"", e4);\n                    }\n                }\n                try {\n                    conn.setAutoCommit(true);\n                } catch (SQLException e3) {\n                    LOG.fatal(SQL_ERROR, e3);\n                    throw new IOException(""Unable to reset data store auto commit"", e3);\n                }\n            }\n        }\n        return;\n    }\n', '    public FileAttribute getAttribute(URL url) throws VFSException {\n        try {\n            con = (HttpURLConnection) url.openConnection();\n            con.setInstanceFollowRedirects(false);\n            int response = con.getResponseCode();\n            if (response >= 400) {\n                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);\n            }\n            boolean redirect = (response >= 300 && response <= 399);\n            if (redirect) {\n                String location = con.getHeaderField(""Location"");\n                return getAttribute(new URL(url, location));\n            }\n            return new DefaultFileAttribute(true, con.getContentLength(), new Date(con.getLastModified()), url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            throw new WrongPathException(file.getAbsolutePath());\n        } catch (IOException e) {\n            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);\n        } finally {\n            if (con != null) {\n                con.disconnect();\n            }\n        }\n    }\n']",259,"    private void readPDl() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement  sttr = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[]  qtry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                 sttr = conn.createStatement();
                for (String q :  qtry)  sttr.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if ( sttr != null) {
                    try {
                         sttr.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
",0,0,0,-1,"loadDDL,stmt,qry,q","loadDDL:-1.3113021850585939e-07,stmt:-5.602836608886719e-06,qry:-7.152557373046876e-08,q:-2.384185791015625e-08,",3,8,"loadDDL:readPDl,qry: qtry,q:q,stmt: sttr,",Greedy,,
,,,,,,,,,,,,,,,
326,"['339517', '4921631', '    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n        URL url = getClass().getResource(name);\n        InputStream in = url.openStream();\n        try {\n            return ClassFile.read(in);\n        } finally {\n            in.close();\n        }\n    }\n', '    public int create(BusinessObject o) throws DAOException {\n        int insert = 0;\n        int id = 0;\n        Item item = (Item) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));\n            pst.setString(1, item.getDescription());\n            pst.setDouble(2, item.getUnit_price());\n            pst.setInt(3, item.getQuantity());\n            pst.setDouble(4, item.getVat());\n            pst.setInt(5, item.getIdProject());\n            pst.setInt(6, item.getIdCurrency());\n            insert = pst.executeUpdate();\n            if (insert <= 0) {\n                connection.rollback();\n                throw new DAOException(""Number of rows <= 0"");\n            } else if (insert > 1) {\n                connection.rollback();\n                throw new DAOException(""Number of rows > 1"");\n            }\n            Statement st = connection.createStatement();\n            ResultSet rs = st.executeQuery(""select max(id_item) from item"");\n            rs.next();\n            id = rs.getInt(1);\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(""A SQLException has occured"");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(""Connection null"");\n        }\n        return id;\n    }\n']",55,,0,0,,-3,"getClassFile,name,url,in",,,,,Greedy,,
,,,,,,,,,,,,,,,
327,"['12306305', '2668634', '    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n        if (destFile.exists() && destFile.isDirectory()) {\n            throw new IOException(""Destination \'"" + destFile + ""\' exists but is a directory"");\n        }\n        FileChannel input = new FileInputStream(srcFile).getChannel();\n        try {\n            FileChannel output = new FileOutputStream(destFile).getChannel();\n            try {\n                output.transferFrom(input, 0, input.size());\n            } finally {\n                IOUtil.closeQuietly(output);\n            }\n        } finally {\n            IOUtil.closeQuietly(input);\n        }\n        if (srcFile.length() != destFile.length()) {\n            throw new IOException(""Failed to copy full contents from \'"" + srcFile + ""\' to \'"" + destFile + ""\'"");\n        }\n        if (preserveFileDate) {\n            destFile.setLastModified(srcFile.lastModified());\n        }\n    }\n', '    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n        File tempFile = null;\n        JarFile jin = null;\n        JarOutputStream jout = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(outputName);\n            System.out.println(""portletApplicationName = "" + portletApplicationName);\n            tempFile = File.createTempFile(""webmill-delpoy-"", """");\n            tempFile.deleteOnExit();\n            jin = new JarFile(inputName);\n            jout = new JarOutputStream(new FileOutputStream(tempFile));\n            Document webXml = null;\n            Document portletXml = null;\n            Document contextXml = null;\n            ZipEntry src;\n            InputStream source;\n            Enumeration zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(""Found web.xml"");\n                        webXml = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(""Found WEB-INF/portlet.xml"");\n                        portletXml = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(""Found META-INF/context.xml"");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (webXml == null) {\n                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");\n            }\n            if (portletXml == null) {\n                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");\n            }\n            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n            webRewriter.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            jin = new JarFile(inputName);\n            zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    String fullTarget = \'/\' + target;\n                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {\n                        System.out.println(""Skip logger "" + target);\n                        continue;\n                    } else {\n                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n                            System.out.println(""Skip portlet tld file "" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(""Skip web.xml file "" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(""Skip portlet.xml file "" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(""Skip context.xml file "" + target);\n                            continue;\n                        }\n                        System.out.println(""Add file "" + target);\n                    }\n                    addFile(target, source, jout);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, webXml, jout);\n            addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n            addFile(META_INF_CONTEXT_XML, contextXml, jout);\n            System.out.println(""Attempting to add portlet.tld to war..."");\n            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");\n            if (is == null) {\n                System.out.println(""Failed to find portlet.tld in classpath"");\n            } else {\n                String portletTldFile = webRewriter.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == \'/\') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(""Adding file "" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, jout);\n                } finally {\n                    is.close();\n                }\n            }\n            jout.close();\n            jin.close();\n            jin = null;\n            jout = null;\n            System.out.println(""Creating war "" + outputName + "" ..."");\n            System.out.flush();\n            srcChannel = new FileInputStream(tempFile).getChannel();\n            dstChannel = new FileOutputStream(outputName).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            tempFile.delete();\n            tempFile = null;\n            System.out.println(""War "" + outputName + "" created"");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (jin != null) {\n                try {\n                    jin.close();\n                    jin = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (jout != null) {\n                try {\n                    jout.close();\n                    jout = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (tempFile != null && tempFile.exists()) {\n                tempFile.delete();\n            }\n        }\n    }\n']",161,,1,1,,-3,"doCopyFile,srcFile,destFile,preserveFileDate,input,output",,,,,Greedy,,
,,,,,,,,,,,,,,,
328,"['11477906', '13886238', '    private static void loadDefaultSettings(final String configFileName) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n            out = new FileOutputStream(configFileName);\n            IOUtils.copy(in, out);\n        } catch (final Exception e) {\n            log.warn(""Unable to pull out the default."", e);\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n', '    public void init() throws GateException {\n        if (reportFile == null) throw new GateException(""No report file set!"");\n        boolean restarting = false;\n        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {\n            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());\n        }\n        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");\n        if (reportFile.exists()) {\n            restarting = true;\n            logger.info(""Existing report file found at \\"""" + reportFile.getAbsolutePath() + ""\\"", attempting to restart"");\n            if (!reportFile.renameTo(backupFile)) {\n                try {\n                    byte[] buff = new byte[32 * 1024];\n                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));\n                    try {\n                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));\n                        try {\n                            int read = in.read(buff);\n                            while (read != -1) {\n                                out.write(buff, 0, read);\n                                read = in.read(buff);\n                            }\n                        } finally {\n                            out.close();\n                        }\n                    } finally {\n                        in.close();\n                    }\n                } catch (IOException e) {\n                    throw new GateException(""Could not restart batch"", e);\n                }\n            }\n        }\n        try {\n            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));\n            reportWriter.writeStartDocument();\n            reportWriter.writeCharacters(""\\n"");\n            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);\n            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");\n            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);\n            reportWriter.writeCharacters(""\\n"");\n            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");\n        } catch (XMLStreamException e) {\n            throw new GateException(""Cannot write to the report file!"", e);\n        } catch (IOException e) {\n            throw new GateException(""Cannot write to the report file!"", e);\n        }\n        if (restarting) {\n            try {\n                Set<String> completedDocuments = new HashSet<String>();\n                logger.debug(""Processing existing report file"");\n                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));\n                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);\n                try {\n                    XMLEvent event;\n                    while (xer.hasNext()) {\n                        event = xer.nextEvent();\n                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {\n                            break;\n                        }\n                    }\n                    List<XMLEvent> events = new LinkedList<XMLEvent>();\n                    String currentReturnCode = null;\n                    String currentDocid = null;\n                    while (xer.hasNext()) {\n                        event = xer.nextEvent();\n                        events.add(event);\n                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {\n                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();\n                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();\n                        }\n                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {\n                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {\n                                completedDocuments.add(currentDocid);\n                                for (XMLEvent evt : events) {\n                                    Tools.writeStaxEvent(evt, reportWriter);\n                                }\n                            }\n                            events.clear();\n                            currentReturnCode = null;\n                            currentDocid = null;\n                        }\n                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {\n                            break;\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);\n                } finally {\n                    xer.close();\n                    bakIn.close();\n                    backupFile.delete();\n                }\n                List<String> unprocessedDocs = new ArrayList<String>();\n                unprocessedDocs.addAll(Arrays.asList(documentIDs));\n                unprocessedDocs.removeAll(completedDocuments);\n                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);\n            } catch (XMLStreamException e) {\n                throw new GateException(""Cannot write to the report file!"", e);\n            } catch (IOException e) {\n                throw new GateException(""Cannot write to the report file!"", e);\n            }\n        } else {\n            unprocessedDocumentIDs = documentIDs;\n        }\n    }\n']",100,"    private static void loaddefaultValues(final String configStreamLocation) {
        InputStream e = null;
        OutputStream null = null;
        try {
            e = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            null = new FileOutputStream(configStreamLocation);
            IOUtils.copy(e, null);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(e);
            IOUtils.closeQuietly(null);
        }
    }
",1,1,1,-1,"loadDefaultSettings,configFileName,in,out","loadDefaultSettings:3.675619761149088e-07,configFileName:-9.934107462565103e-08,in:1.9073486328125e-06,out:3.228584925333659e-06,",4,12,"in:e,configFileName:configStreamLocation,out:null,loadDefaultSettings:loaddefaultValues,",Greedy,,
,,,,,,,,,,,,,,,
329,"['1508161', '8047989', '    public void conMail(MailObject mail) throws NetworkException, ContentException {\n        HttpClient client = HttpConfig.newInstance();\n        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + ""&"" + HttpConfig.BBS_MAIL_N_PARAM_NAME + ""="" + mail.getNumber();\n        HttpGet get = new HttpGet(url);\n        try {\n            HttpResponse response = client.execute(get);\n            HttpEntity entity = response.getEntity();\n            if (HTTPUtil.isXmlContentType(response)) {\n                Document doc = XmlOperator.readDocument(entity.getContent());\n                BBSBodyParseHelper.parseMailContent(doc, mail);\n            } else {\n                String msg = BBSBodyParseHelper.parseFailMsg(entity);\n                throw new ContentException(msg);\n            }\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new NetworkException(e);\n        }\n    }\n', '    protected byte[] getHashedID(String ID) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(""MD5"");\n            md5.reset();\n            md5.update(ID.getBytes());\n            byte[] digest = md5.digest();\n            byte[] bytes = new byte[WLDB_ID_SIZE];\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = digest[i];\n            }\n            return bytes;\n        } catch (NoSuchAlgorithmException exception) {\n            System.err.println(""Java VM is not compatible"");\n            exit();\n            return null;\n        }\n    }\n']",181,,0,0,,-3,"conMail,mail,client,url,get,response,entity,doc,msg",,,,,Greedy,,
,,,,,,,,,,,,,,,
330,"['16079868', '5049453', '    private void readIntoList(URL url, Map<String, JMenuItem> list) {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                int commandNameBegin = inputLine.indexOf("">"") + 1;\n                int commandNameEnd = inputLine.indexOf(""</a>"");\n                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");\n                if (list == allRooms) {\n                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));\n                } else {\n                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");\n                }\n                item.addActionListener(new ActionListener() {\n\n                    public void actionPerformed(ActionEvent e) {\n                        jTextField1.setText(e.getActionCommand());\n                        popup.setVisible(false);\n                    }\n                });\n                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);\n            }\n            in.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n', '    private BingResponse queryBing(BingRequest request) throws BingException {\n        try {\n            if (logger.isDebugEnabled()) {\n                logger.debug(""Searching through bing..."");\n            }\n            String query = request.getQuery();\n            query = URLEncoder.encode(query, ""UTF-8"");\n            URL url = new URL(""http://api.bing.net/json.aspx?"" + ""AppId="" + request.getAppId() + ""&Query="" + query + ""&Sources="" + request.getType().toString());\n            URLConnection connection = null;\n            if (useProxy) {\n                if (proxyType == null) {\n                    throw new BingException(""Please set a proxy first before trying to connect through a proxy"", new Throwable());\n                }\n                connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);\n            } else {\n                connection = new URL(url.toString()).openConnection();\n            }\n            String line;\n            StringBuilder builder = new StringBuilder();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            while ((line = reader.readLine()) != null) {\n                builder.append(line);\n            }\n            String response = builder.toString();\n            ResponseParser parser = new ResponseParser();\n            parser.getError(response);\n            return parser.getResults(response);\n        } catch (MalformedURLException e) {\n            logger.error(e);\n            throw new ConnectionException(""Could not connect to host"", e);\n        } catch (IOException e) {\n            logger.error(e);\n            throw new ConnectionException(""Could not connect to host"", e);\n        }\n    }\n']",211,,0,1,,-4,"readIntoList,url,list,in,inputLine,commandNameBegin,commandNameEnd,item,e",,,,,Greedy,,
,,,,,,,,,,,,,,,
331,"['3046085', '17974661', '    public Song(String s) {\n        StringTokenizer tokenizer = new StringTokenizer(s, "";"");\n        free = false;\n        title = tokenizer.nextToken();\n        artist = tokenizer.nextToken();\n        location = tokenizer.nextToken();\n        rating = Integer.parseInt(tokenizer.nextToken());\n        overplay = Integer.parseInt(tokenizer.nextToken());\n        String temp = tokenizer.nextToken();\n        tokenizer = new StringTokenizer(temp, "",[] "");\n        tags = new ArrayList<String>();\n        while (tokenizer.hasMoreTokens()) {\n            tags.add(tokenizer.nextToken());\n        }\n        byte[] bytes = new byte[40];\n        try {\n            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");\n            hasher.update(title.getBytes());\n            hasher.update(artist.getBytes());\n            bytes = hasher.digest();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n', '    public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {\n        HttpClient client = new SSLHttpClient();\n        StringBuilder builder = new StringBuilder(url).append(""?"" + SESSION_PARAM + ""="" + sessionId).append(""&"" + CMD_PARAM + ""="" + CMD_SERVERMODIF);\n        HttpGet method = httpGetMethod(builder.toString());\n        try {\n            HttpResponse response = client.execute(method);\n            Header header = response.getFirstHeader(HEADER_NAME);\n            if (header != null && HEADER_VALUE.equals(header.getValue())) {\n                int code = response.getStatusLine().getStatusCode();\n                if (code == HttpStatus.SC_OK) {\n                    long expectedLength = response.getEntity().getContentLength();\n                    InputStream is = response.getEntity().getContent();\n                    FileUtils.writeInFile(is, out, expectedLength);\n                    return true;\n                } else {\n                    throw new SynchronizationException(""Command \'receive\' : HTTP error code returned."" + code, SynchronizationException.ERROR_RECEIVE);\n                }\n            } else {\n                throw new SynchronizationException(""HTTP header is invalid"", SynchronizationException.ERROR_RECEIVE);\n            }\n        } catch (Exception e) {\n            throw new SynchronizationException(""Command \'receive\' -> "", e, SynchronizationException.ERROR_RECEIVE);\n        }\n    }\n']",193,,0,0,,-3,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher",,,,,Greedy,,
,,,,,,,,,,,,,,,
332,"['9275622', '2642914', '    private boolean copyFile(File _file1, File _file2) {\n        FileInputStream fis;\n        FileOutputStream fos;\n        try {\n            fis = new FileInputStream(_file1);\n            fos = new FileOutputStream(_file2);\n            FileChannel canalFuente = fis.getChannel();\n            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n            fis.close();\n            fos.close();\n            return true;\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n        return false;\n    }\n', '    private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\n        File f = new File(path);\n        String entryName = base + f.getName();\n        FileInputStream goIn = new FileInputStream(f);\n        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n        taro.putArchiveEntry(tarEntry);\n        if (f.isFile()) {\n            IOUtils.copy(goIn, taro);\n            taro.closeArchiveEntry();\n        } else {\n            taro.closeArchiveEntry();\n            File[] children = f.listFiles();\n            if (children != null) {\n                for (File child : children) {\n                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");\n                }\n            }\n        }\n        taro.close();\n        goIn.close();\n    }\n']",98,,1,1,,-3,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,,Greedy,,
,,,,,,,,,,,,,,,
333,"['10131427', '8747840', '    public static void copyFile(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n', '    public static void copy(File src, File dest) throws FileNotFoundException, IOException {\n        FileInputStream in = new FileInputStream(src);\n        FileOutputStream out = new FileOutputStream(dest);\n        try {\n            byte[] buf = new byte[1024];\n            int c = -1;\n            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);\n        } finally {\n            in.close();\n            out.close();\n        }\n    }\n']",69,,1,1,,-3,"copyFile,in,out,sourceChannel,destinationChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
334,"['21033686', '1235538', '    public File read() throws IOException {\n        URLConnection conn = url.openConnection();\n        conn.setConnectTimeout(5000);\n        conn.setReadTimeout(5000);\n        conn.connect();\n        int length = conn.getContentLength();\n        String tempDir = System.getProperty(""java.io.tmpdir"");\n        if (tempDir == null) {\n            tempDir = ""."";\n        }\n        File tempFile = new File(tempDir + ""/"" + new GUID() + "".dat"");\n        tempFile.deleteOnExit();\n        InputStream in = null;\n        OutputStream out = null;\n        ProgressMonitor monitor = new ProgressMonitor(parentComponent, ""Downloading "" + url, null, 0, length);\n        try {\n            in = conn.getInputStream();\n            out = new BufferedOutputStream(new FileOutputStream(tempFile));\n            int buflen = 1024 * 30;\n            int bytesRead = 0;\n            byte[] buf = new byte[buflen];\n            ;\n            long start = System.currentTimeMillis();\n            for (int nRead = in.read(buf); nRead != -1; nRead = in.read(buf)) {\n                if (monitor.isCanceled()) {\n                    return null;\n                }\n                bytesRead += nRead;\n                out.write(buf, 0, nRead);\n                monitor.setProgress(bytesRead);\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n            monitor.close();\n        }\n        return tempFile;\n    }\n', '    public static String encrypt(final String pass) {\n        try {\n            final MessageDigest md = MessageDigest.getInstance(""SHA"");\n            md.update(pass.getBytes(""UTF-8""));\n            return new String(Base64.encodeBase64(md.digest()));\n        } catch (final Exception e) {\n            throw new RuntimeException(""No se pudo encriptar el password."", e);\n        }\n    }\n']",283,"    public File connect() throws IOException {
        URLConnection client = url.openConnection();
        client.setConnectTimeout(5000);
        client.setReadTimeout(5000);
        client.connect();
        int length = client.getContentLength();
        String templateDir = System.getProperty(""java.io.tmpdir"");
        if (templateDir == null) {
            templateDir = ""."";
        }
        File TempPath = new File(templateDir + ""/"" + new GUID() + "".dat"");
        TempPath.deleteOnExit();
        InputStream ssl = null;
        OutputStream output = null;
        ProgressMonitor trace = new ProgressMonitor(parentComponent, ""Downloading "" + url, null, 0, length);
        try {
            ssl = client.getInputStream();
            output = new BufferedOutputStream(new FileOutputStream(TempPath));
            int bucolleng = 1024 * 30;
            int  bytesread = 0;
            byte[] buf = new byte[bucolleng];
            ;
            long open = System.currentTimeMillis();
            for (int nCopy = ssl.connect(buf); nCopy != -1; nCopy = ssl.connect(buf)) {
                if (trace.isCanceled()) {
                    return null;
                }
                 bytesread += nCopy;
                output.write(buf, 0, nCopy);
                trace.setProgress( bytesread);
            }
        } finally {
            if (ssl != null) {
                ssl.close();
            }
            if (output != null) {
                output.close();
            }
            trace.close();
        }
        return TempPath;
    }
",0,0,0,-1,"read,conn,length,tempDir,tempFile,in,out,monitor,buflen,bytesRead,buf,start,nRead","read:-8.064873364506935e-06,conn:-0.00020476749965122769,length:-1.7419153330277423e-06,tempDir:-2.199289750079719e-06,tempFile:-1.8762082469706632e-05,in:1.1276225654446348e-05,out:-6.507854072415099e-06,monitor:-6.64166041782924e-06,buflen:4.962998993542729e-07,bytesRead:1.4961982259944993e-07,buf:1.2553468042490432e-06,start:7.164721586266342e-07,nRead:4.135832494618941e-06,",11,43,"length:length,in:ssl,monitor:trace,tempDir:templateDir,tempFile:TempPath,read:connect,buf:buf,nRead:nCopy,conn:client,out:output,buflen:bucolleng,start:open,bytesRead: bytesread,",Greedy,,
,,,,,,,,,,,,,,,
335,"['293167', '5951961', '    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(""version-check.url""));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };\n            GUIUtilities.error(view, ""read-error"", args);\n        }\n        view.hideWaitCursor();\n    }\n', '    public static void main(String[] args) {\n        try {\n            URL url = new URL(args[0]);\n            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();\n            httpCon.setDoOutput(true);\n            httpCon.setRequestMethod(""PUT"");\n            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());\n            out.write(""fatal error"");\n            out.close();\n            System.out.println(""end"");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",236,,0,0,,-3,"doVersionCheck,view,url,in,bin,line,version,build",,,,,Greedy,,
,,,,,,,,,,,,,,,
336,"['21754659', '16549995', '    private JButton getButtonSonido() {\n        if (buttonSonido == null) {\n            buttonSonido = new JButton();\n            buttonSonido.setText(Messages.getString(""gui.AdministracionResorces.15""));\n            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png"")));\n            buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n\n                public void actionPerformed(java.awt.event.ActionEvent e) {\n                    JFileChooser fc = new JFileChooser();\n                    fc.addChoosableFileFilter(new SoundFilter());\n                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));\n                    if (returnVal == JFileChooser.APPROVE_OPTION) {\n                        File file = fc.getSelectedFile();\n                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + file.getName();\n                        String rutaRelativa = rutaDatos + ""sonidos/"" + file.getName();\n                        try {\n                            FileInputStream fis = new FileInputStream(file);\n                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n                            FileChannel canalFuente = fis.getChannel();\n                            FileChannel canalDestino = fos.getChannel();\n                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n                            fis.close();\n                            fos.close();\n                            imagen.setSonidoURL(rutaRelativa);\n                            System.out.println(rutaGlobal + "" "" + rutaRelativa);\n                            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png"")));\n                            gui.getAudio().reproduceAudio(imagen);\n                        } catch (IOException ex) {\n                            ex.printStackTrace();\n                        }\n                    } else {\n                    }\n                }\n            });\n        }\n        return buttonSonido;\n    }\n', '    public static String mysqlPasswordHash(String string) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);\n            try {\n                digest.update(string.getBytes(""UTF-8""));\n            } catch (UnsupportedEncodingException e) {\n                throw new RuntimeException(e);\n            }\n            byte[] encodedPassword = digest.digest();\n            digest.update(encodedPassword);\n            encodedPassword = digest.digest();\n            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();\n            while (hash.length() < 40) {\n                hash = ""0"" + hash;\n            }\n            return ""*"" + hash;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n']",313,"    private JButton getButtonDonido() {
        if (buttonBoní == null) {
            buttonBoní = new JButton();
            buttonBoní.setText(Messages.getString(""gui.AdministracionResorces.15""));
            buttonBoní.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png"")));
            buttonBoní.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent act) {
                    JFileChooser etc = new JFileChooser();
                    etc.addChoosableFileFilter(new SoundFilter());
                    int resultValue = etc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));
                    if (resultValue == JFileChooser.APPROVE_OPTION) {
                        File disk = etc.getSelectedFile();
                        String rutenRemote = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + disk.getName();
                        String rutaRelantivo = rutaDatos + ""sonidos/"" + disk.getName();
                        try {
                            FileInputStream  fys = new FileInputStream(disk);
                            FileOutputStream wios = new FileOutputStream(rutenRemote, true);
                            FileChannel canalfuper =  fys.getChannel();
                            FileChannel canalNeginian = wios.getChannel();
                            canalfuper.transferTo(0, canalfuper.size(), canalNeginian);
                             fys.close();
                            wios.close();
                            imagen.setSonidoURL(rutaRelantivo);
                            System.out.println(rutenRemote + "" "" + rutaRelantivo);
                            buttonBoní.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png"")));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonBoní;
    }
",0,0,0,-1,"getButtonSonido,buttonSonido,e,fc,returnVal,file,rutaGlobal,rutaRelativa,fis,fos,canalFuente,canalDestino","getButtonSonido:-5.6293275621202255e-08,buttonSonido:-1.5182627571953668e-05,e:-3.06301646762424e-07,fc:-5.284945170084635e-06,returnVal:-1.0397699144151475e-06,file:-1.895427703857422e-05,rutaGlobal:-2.7418136596679688e-06,rutaRelativa:5.861123402913411e-07,fis:-6.0498714447021484e-06,fos:-6.2982241312662755e-06,canalFuente:-1.0927518208821614e-06,canalDestino:9.470515780978732e-07,",12,36,"e:act,fc:etc,returnVal:resultValue,file:disk,rutaGlobal:rutenRemote,buttonSonido:buttonBoní,rutaRelativa:rutaRelantivo,getButtonSonido:getButtonDonido,fos:wios,canalDestino:canalNeginian,fis: fys,canalFuente:canalfuper,",Greedy,,
,,,,,,,,,,,,,,,
337,"['11556231', '12766394', '    public static Document ByURL(String urlstr) throws IOException {\n        String uri = urlstr;\n        URL url = new URL(uri);\n        URLConnection connection = url.openConnection();\n        InputStream in = connection.getInputStream();\n        Reader reader = new InputStreamReader(in);\n        InputSource is = new InputSourceImpl(reader, uri);\n        System.out.println(is.toString());\n        Document document = new Document() {\n\n            @Override\n            public Node adoptNode(Node source) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Attr createAttribute(String name) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public CDATASection createCDATASection(String data) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Comment createComment(String data) {\n                return null;\n            }\n\n            @Override\n            public DocumentFragment createDocumentFragment() {\n                return null;\n            }\n\n            @Override\n            public Element createElement(String tagName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public EntityReference createEntityReference(String name) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Text createTextNode(String data) {\n                return null;\n            }\n\n            @Override\n            public DocumentType getDoctype() {\n                return null;\n            }\n\n            @Override\n            public Element getDocumentElement() {\n                return null;\n            }\n\n            @Override\n            public String getDocumentURI() {\n                return null;\n            }\n\n            @Override\n            public DOMConfiguration getDomConfig() {\n                return null;\n            }\n\n            @Override\n            public Element getElementById(String elementId) {\n                return null;\n            }\n\n            @Override\n            public NodeList getElementsByTagName(String tagname) {\n                return null;\n            }\n\n            @Override\n            public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {\n                return null;\n            }\n\n            @Override\n            public DOMImplementation getImplementation() {\n                return null;\n            }\n\n            @Override\n            public String getInputEncoding() {\n                return null;\n            }\n\n            @Override\n            public boolean getStrictErrorChecking() {\n                return false;\n            }\n\n            @Override\n            public String getXmlEncoding() {\n                return null;\n            }\n\n            @Override\n            public boolean getXmlStandalone() {\n                return false;\n            }\n\n            @Override\n            public String getXmlVersion() {\n                return null;\n            }\n\n            @Override\n            public Node importNode(Node importedNode, boolean deep) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void normalizeDocument() {\n            }\n\n            @Override\n            public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void setDocumentURI(String documentURI) {\n            }\n\n            @Override\n            public void setStrictErrorChecking(boolean strictErrorChecking) {\n            }\n\n            @Override\n            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {\n            }\n\n            @Override\n            public void setXmlVersion(String xmlVersion) throws DOMException {\n            }\n\n            public Node appendChild(Node arg0) throws DOMException {\n                return null;\n            }\n\n            public Node cloneNode(boolean arg0) {\n                return null;\n            }\n\n            public short compareDocumentPosition(Node arg0) throws DOMException {\n                return 0;\n            }\n\n            public NamedNodeMap getAttributes() {\n                return null;\n            }\n\n            public String getBaseURI() {\n                return null;\n            }\n\n            public NodeList getChildNodes() {\n                return null;\n            }\n\n            public Object getFeature(String arg0, String arg1) {\n                return null;\n            }\n\n            public Node getFirstChild() {\n                return null;\n            }\n\n            public Node getLastChild() {\n                return null;\n            }\n\n            public String getLocalName() {\n                return null;\n            }\n\n            public String getNamespaceURI() {\n                return null;\n            }\n\n            public Node getNextSibling() {\n                return null;\n            }\n\n            public String getNodeName() {\n                return null;\n            }\n\n            public short getNodeType() {\n                return 0;\n            }\n\n            public String getNodeValue() throws DOMException {\n                return null;\n            }\n\n            public Document getOwnerDocument() {\n                return null;\n            }\n\n            public Node getParentNode() {\n                return null;\n            }\n\n            public String getPrefix() {\n                return null;\n            }\n\n            public Node getPreviousSibling() {\n                return null;\n            }\n\n            public String getTextContent() throws DOMException {\n                return null;\n            }\n\n            public Object getUserData(String arg0) {\n                return null;\n            }\n\n            public boolean hasAttributes() {\n                return false;\n            }\n\n            public boolean hasChildNodes() {\n                return false;\n            }\n\n            public Node insertBefore(Node arg0, Node arg1) throws DOMException {\n                return null;\n            }\n\n            public boolean isDefaultNamespace(String arg0) {\n                return false;\n            }\n\n            public boolean isEqualNode(Node arg0) {\n                return false;\n            }\n\n            public boolean isSameNode(Node arg0) {\n                return false;\n            }\n\n            public boolean isSupported(String arg0, String arg1) {\n                return false;\n            }\n\n            public String lookupNamespaceURI(String arg0) {\n                return null;\n            }\n\n            public String lookupPrefix(String arg0) {\n                return null;\n            }\n\n            public void normalize() {\n            }\n\n            public Node removeChild(Node arg0) throws DOMException {\n                return null;\n            }\n\n            public Node replaceChild(Node arg0, Node arg1) throws DOMException {\n                return null;\n            }\n\n            public void setNodeValue(String arg0) throws DOMException {\n            }\n\n            public void setPrefix(String arg0) throws DOMException {\n            }\n\n            public void setTextContent(String arg0) throws DOMException {\n            }\n\n            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {\n                return null;\n            }\n        };\n        return document;\n    }\n', '    public void testReadHelloWorldTxt() throws Exception {\n        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");\n        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));\n        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";\n        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n        IOUtils.copy(helloWorldIS, fileOutputStream);\n        IOUtils.closeQuietly(helloWorldIS);\n        IOUtils.closeQuietly(fileOutputStream);\n        LOG.info(""helloWorldPath: "" + helloWorldPath);\n        final FSContentResolver contentResolver = new FSContentResolver();\n        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");\n        assertNotNull(content);\n        assertEquals(""Hello World"", new String(content, ""UTF-8""));\n        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");\n        assertNotNull(content);\n        assertEquals(""Hello World"", new String(content, ""UTF-8""));\n        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");\n        assertNotNull(content);\n        assertEquals(""Hello World"", new String(content, ""UTF-8""));\n        content = contentResolver.getContent(""file:laksjdhalksdhfa"");\n        assertNull(content);\n        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");\n        assertNotNull(content);\n        assertEquals(""Hello World"", new String(content, ""UTF-8""));\n    }\n']",963,"    public static Document createString(String Urlstr) throws IOException {
        String phi = Urlstr;
        URL file = new URL(phi);
        URLConnection channel = file.openConnection();
        InputStream body = channel.getInputStream();
        Reader writer = new InputStreamReader(body);
        InputSource is = new InputSourceImpl(writer, phi);
        System.out.println(is.toString());
        Document output = new Document() {

            @Override
            public Node adoptNode(Node resource) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String property) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String namesetURL, String fullValue) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String body) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String body) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String qualifiedname) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String namesetURL, String fullValue) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String property) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String property, String body) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String body) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String elementId) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String tagname) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String namesetURL, String localName) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String namesetURL, String fullValue) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return output;
    }
",0,0,0,-1,"ByURL,urlstr,uri,url,connection,in,reader,is,document,source,name,namespaceURI,qualifiedName,data,tagName,target,elementId,tagname,localName","ByURL:2.9319041484111066e-07,urlstr:7.47474464210304e-07,uri:7.249213553763725e-07,url:1.0696617332664697e-06,connection:6.959245011613177e-07,in:4.510621766786318e-08,reader:6.443745381123311e-09,is:-1.2887490762246622e-08,document:0.0,source:-3.2218726905616556e-09,name:6.443745381123311e-09,namespaceURI:-3.866247228673987e-08,qualifiedName:-2.89968542150549e-08,data:-1.2887490762246622e-08,tagName:-6.443745381123311e-09,target:0.0,elementId:0.0,tagname:0.0,localName:0.0,",15,32,"document:output,source:resource,in:body,name:property,namespaceURI:namesetURL,qualifiedName:fullValue,data:body,tagName:qualifiedname,target:property,elementId:elementId,is:is,tagname:tagname,localName:localName,uri:phi,reader:writer,url:file,connection:channel,urlstr:Urlstr,ByURL:createString,",Greedy,,
,,,,,,,,,,,,,,,
338,"['21316706', '19687456', '    @Override\n    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {\n        if ((url == null) || (proxy == null)) {\n            throw new IllegalArgumentException(Messages.getString(""luni.1B""));\n        }\n        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);\n    }\n', '    public void testReadPerMemberSixSmall() throws IOException {\n        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));\n        gzin.setEofEachMember(true);\n        for (int i = 0; i < 3; i++) {\n            int count2 = IOUtils.copy(gzin, new NullOutputStream());\n            assertEquals(""wrong 1-byte member count"", 1, count2);\n            gzin.nextMember();\n            int count3 = IOUtils.copy(gzin, new NullOutputStream());\n            assertEquals(""wrong 5-byte member count"", 5, count3);\n            gzin.nextMember();\n        }\n        int countEnd = IOUtils.copy(gzin, new NullOutputStream());\n        assertEquals(""wrong eof count"", 0, countEnd);\n    }\n']",58,"    @Override
    protected URLConnection openConnection(URL un, Proxy none) throws IOException {
        if ((un == null) || (none == null)) {
            throw new IllegalArgumentException(Messages.getString(""luni.1B""));
        }
        return new HttpsURLConnectionImpl(un, getDefaultPort(), none);
    }
",0,0,0,-1,"openConnection,url,proxy","openConnection:8.88960702078683e-06,url:6.110327584402902e-05,proxy:8.072171892438615e-06,",2,6,"openConnection:openConnection,url:un,proxy:none,",Greedy,,
,,,,,,,,,,,,,,,
339,"['20091126', '4599372', '    static File copy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n            return out;\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n', '    @Override\n    public String readFixString(final int len) {\n        if (len < 1) {\n            return StringUtils.EMPTY;\n        }\n        final StringWriter sw = new StringWriter();\n        try {\n            IOUtils.copy(createLimitedInputStream(len), sw, null);\n        } catch (IOException e) {\n            throw createRuntimeException(e);\n        }\n        return sw.toString();\n    }\n']",99,,1,1,,-3,"copy,in,out,inChannel,outChannel",,,,,Greedy,,
,,,,,,,,,,,,,,,
340,"['3330944', '21979717', '    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n        File in = null;\n        String dest = output;\n        if (input.equals(STDIN)) {\n            try {\n                in = File.createTempFile(""tmp"", "".jp2"");\n                input = in.getAbsolutePath();\n                in.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), in);\n            } catch (IOException e) {\n                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(input, params);\n        if (bi != null) {\n            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n            if (params.getTransform() != null) bi = params.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(""Requested file was not found: "" + dest);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(""Error attempting to close: "" + dest);\n                throw new DjatokaException(e);\n            }\n        }\n        if (in != null) in.delete();\n    }\n', '    @ActionMethod\n    public void upload() throws IOException {\n        final int fileResult = fileChooser.showOpenDialog(frame);\n        if (fileResult != JFileChooser.APPROVE_OPTION) {\n            return;\n        }\n        final InputStream in = new FileInputStream(fileChooser.getSelectedFile());\n        try {\n            final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/databases/"" + fileChooser.getSelectedFile().getName());\n            final HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.setRequestMethod(""PUT"");\n            con.setDoOutput(true);\n            con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");\n            con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\\""karatasi\\"""");\n            con.setRequestProperty(Http11Header.CONTENT_LENGTH, Long.toString(fileChooser.getSelectedFile().length()));\n            con.setRequestProperty(Http11Header.CONTENT_TYPE, ""application/octet-stream"");\n            final OutputStream out = con.getOutputStream();\n            try {\n                Util.copy(in, out);\n                con.connect();\n                final InputStream in2 = con.getInputStream();\n                try {\n                    textArea.setText("""");\n                    final byte[] buf = new byte[4096];\n                    for (int bytesRead; (bytesRead = in2.read(buf)) != -1; ) {\n                        textArea.append(new String(buf, 0, bytesRead));\n                    }\n                } finally {\n                    in2.close();\n                }\n            } finally {\n                out.close();\n            }\n        } finally {\n            in.close();\n        }\n    }\n']",277,"    public void extlateimage(String url, String filename, DjatokaDecodeParam pps, IWriter wal) throws DjatokaException {
        File p = null;
        String desc = filename;
        if (url.equals(STDIN)) {
            try {
                p = File.createTempFile(""tmp"", "".jp2"");
                url = p.getAbsolutePath();
                p.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), p);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage buff = extractImpl.process(url, pps);
        if (buff != null) {
            if (pps.getScalingFactor() != 1.0 || pps.getScalingDimensions() != null) buff = applyScaling(buff, pps);
            if (pps.getTransform() != null) buff = pps.getTransform().run(buff);
            try {
                BufferedOutputStream ons = new BufferedOutputStream(new FileOutputStream(new File(desc)));
                wal.write(buff, ons);
                ons.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + desc);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + desc);
                throw new DjatokaException(e);
            }
        }
        if (p != null) p.delete();
    }
",0,0,0,-1,"extractImage,input,output,params,w,in,dest,bi,os","extractImage:-2.7869198773358323e-07,input:3.170322727512669e-06,output:8.570181356894004e-07,params:-4.848918399295291e-07,w:-5.4771835739548145e-08,in:-3.3040304441709778e-06,dest:-8.763493718327703e-07,bi:-4.82636529046136e-06,os:-6.862588830896326e-07,",9,37,"extractImage:extlateimage,input:url,output:filename,params:pps,w:wal,in:p,bi:buff,dest:desc,os:ons,",Greedy,,
,,,,,,,,,,,,,,,
341,"['8468859', '3536332', '    public boolean connect() {\n        boolean isConnected = false;\n        try {\n            try {\n                this.ftpClient.connect(this.server, this.port);\n            } catch (SocketException e) {\n                status = ErrorResult.CONNECTNOTPOSSIBLE.code;\n                return false;\n            } catch (IOException e) {\n                status = ErrorResult.CONNECTNOTPOSSIBLE.code;\n                return false;\n            }\n            int reply = this.ftpClient.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                this.disconnect();\n                status = ErrorResult.CONNECTNOTCORRECT.code;\n                return false;\n            }\n            try {\n                if (this.account == null) {\n                    if (!this.ftpClient.login(this.username, this.passwd)) {\n                        status = ErrorResult.LOGINNOTCORRECT.code;\n                        this.ftpClient.logout();\n                        return false;\n                    }\n                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {\n                    status = ErrorResult.LOGINACCTNOTCORRECT.code;\n                    this.ftpClient.logout();\n                    return false;\n                }\n            } catch (IOException e) {\n                status = ErrorResult.ERRORWHILECONNECT.code;\n                try {\n                    this.ftpClient.logout();\n                } catch (IOException e1) {\n                }\n                return false;\n            }\n            isConnected = true;\n            return true;\n        } finally {\n            if ((!isConnected) && this.ftpClient.isConnected()) {\n                this.disconnect();\n            }\n        }\n    }\n', '    private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(""MD5"");\n        byte[] md5hash = new byte[64];\n        md.update(input.getBytes(""iso-8859-1""), 0, input.length());\n        md5hash = md.digest();\n        return this.convertToHex(md5hash);\n    }\n']",275,"    public boolean Connect() {
        boolean isCorrecting = false;
        try {
            try {
                this.ftpClient.Connect(this.server, this.port);
            } catch (SocketException e) {
                format = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                format = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int user = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(user)) {
                this.disconnect();
                format = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        format = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    format = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                format = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isCorrecting = true;
            return true;
        } finally {
            if ((!isCorrecting) && this.ftpClient.isCorrecting()) {
                this.disconnect();
            }
        }
    }
",0,0,0,-1,"connect,status,reply,isConnected","connect:0.0004129665238516671,status:0.0013871874128069195,reply:0.000157407351902553,isConnected:0.0002841779163905552,",4,14,"status:format,connect:Connect,reply:user,isConnected:isCorrecting,",Greedy,,
,,,,,,,,,,,,,,,
342,"['12869602', '11154758', '    @Test\n    public void test_validate_tag_getTopAlbums() {\n        try {\n            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");\n            File schemaLocation = new File(""tes.xsd"");\n            Schema schema = factory.newSchema(schemaLocation);\n            Validator validator = schema.newValidator();\n            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026"");\n            InputStream inputStream = url.openStream();\n            Source source = new StreamSource(inputStream);\n            validator.validate(source);\n        } catch (IOException ex) {\n            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(""File not found"", true);\n        } catch (SAXException ex) {\n            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(""Schema did not validate"", true);\n        }\n        assertTrue(true);\n    }\n', '    public static void main(String[] args) {\n        FTPClient client = new FTPClient();\n        FileOutputStream fos = null;\n        try {\n            client.connect(""192.168.1.10"");\n            client.login(""a"", ""123456"");\n            String filename = ""i.exe"";\n            fos = new FileOutputStream(filename);\n            client.retrieveFile(""/"" + filename, fos);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (fos != null) {\n                    fos.close();\n                }\n                client.disconnect();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n']",166,"    @Test
    public void test_validate_tag_getTopAlogges() {
        try {
            SchemaFactory cancy = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schealPath = new File(""tes.xsd"");
            Schema cheme = cancy.newSchema(schealPath);
            Validator verma = cheme.newValidator();
            URL api = new URL(""http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream InputStream = api.openStream();
            Source file = new StreamSource(InputStream);
            verma.validate(file);
        } catch (IOException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",0,0,0,-1,"test_validate_tag_getTopAlbums,factory,schemaLocation,schema,validator,url,inputStream,source","test_validate_tag_getTopAlbums:-3.178914388020833e-07,factory:-5.7220458984375e-07,schemaLocation:-1.2556711832682292e-06,schema:-1.1444091796875e-06,validator:-1.8914540608723959e-06,url:-9.34600830078125e-06,inputStream:-1.6689300537109375e-06,source:-1.0649363199869792e-06,",8,15,"factory:cancy,schemaLocation:schealPath,schema:cheme,validator:verma,inputStream:InputStream,source:file,url:api,test_validate_tag_getTopAlbums:test_validate_tag_getTopAlogges,",Greedy,,
,,,,,,,,,,,,,,,
343,"['3558512', '812803', '    public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n        ensureParsed();\n        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n        parser.setContentPackage(cp);\n        if (on_disk != null) on_disk.delete();\n        on_disk = createTemporaryFile();\n        parser.serialize(on_disk);\n        InputStream in = new FileInputStream(on_disk);\n        IOUtils.copy(in, out);\n    }\n', '    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(""\\n"" + src + "": not an ACRNEMA stream!"");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(""\\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(""\\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print(\'.\');\n        } finally {\n            in.close();\n        }\n    }\n']",81,,1,1,,-3,"serialize,out,parser,on_disk,in",,,,,Greedy,,
,,,,,,,,,,,,,,,
344,"['3309233', '23215235', '        @Override\n        protected String doInBackground(String... params) {\n            try {\n                final HttpParams param = new BasicHttpParams();\n                HttpConnectionParams.setConnectionTimeout(param, 30000);\n                HttpConnectionParams.setSoTimeout(param, 30000);\n                DefaultHttpClient client = new DefaultHttpClient(param);\n                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");\n                post.setEntity(new StringEntity(params[0]));\n                if (DEBUG) Log.d(""Location"", params[0]);\n                HttpResponse resp = client.execute(post);\n                if (resp.getStatusLine().getStatusCode() == 200) {\n                    HttpEntity entity = resp.getEntity();\n                    String result = EntityUtils.toString(entity);\n                    return result;\n                } else {\n                    if (isFirstLocation) {\n                        requestGearsLocation(1);\n                        isFirstLocation = false;\n                        return RESULT_FIRST_FAILE;\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n', '    public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {\n        this.zipFileName = url.toString();\n        URLConnection urlConnection = url.openConnection();\n        InputStream inputStream = urlConnection.getInputStream();\n        unzipNativeFormatFile(inputStream);\n        parseAlertFiles();\n        deleteAlertFiles();\n    }\n']",176,,0,0,,-3,"doInBackground,params,param,client,post,resp,entity,result",,,,,Greedy,,
,,,,,,,,,,,,,,,
345,"['17158020', '4921631', '    public synchronized String encryptPassword(String passwordString) throws Exception {\n        MessageDigest digest = null;\n        digest = MessageDigest.getInstance(""SHA"");\n        digest.update(passwordString.getBytes(""UTF-8""));\n        byte raw[] = digest.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n', '    public int create(BusinessObject o) throws DAOException {\n        int insert = 0;\n        int id = 0;\n        Item item = (Item) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));\n            pst.setString(1, item.getDescription());\n            pst.setDouble(2, item.getUnit_price());\n            pst.setInt(3, item.getQuantity());\n            pst.setDouble(4, item.getVat());\n            pst.setInt(5, item.getIdProject());\n            pst.setInt(6, item.getIdCurrency());\n            insert = pst.executeUpdate();\n            if (insert <= 0) {\n                connection.rollback();\n                throw new DAOException(""Number of rows <= 0"");\n            } else if (insert > 1) {\n                connection.rollback();\n                throw new DAOException(""Number of rows > 1"");\n            }\n            Statement st = connection.createStatement();\n            ResultSet rs = st.executeQuery(""select max(id_item) from item"");\n            rs.next();\n            id = rs.getInt(1);\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(""A SQLException has occured"");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(""Connection null"");\n        }\n        return id;\n    }\n']",68,,0,0,,-3,"encryptPassword,passwordString,digest,raw,hash",,,,,Greedy,,
,,,,,,,,,,,,,,,
346,"['8468859', '9718328', '    public boolean connect() {\n        boolean isConnected = false;\n        try {\n            try {\n                this.ftpClient.connect(this.server, this.port);\n            } catch (SocketException e) {\n                status = ErrorResult.CONNECTNOTPOSSIBLE.code;\n                return false;\n            } catch (IOException e) {\n                status = ErrorResult.CONNECTNOTPOSSIBLE.code;\n                return false;\n            }\n            int reply = this.ftpClient.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                this.disconnect();\n                status = ErrorResult.CONNECTNOTCORRECT.code;\n                return false;\n            }\n            try {\n                if (this.account == null) {\n                    if (!this.ftpClient.login(this.username, this.passwd)) {\n                        status = ErrorResult.LOGINNOTCORRECT.code;\n                        this.ftpClient.logout();\n                        return false;\n                    }\n                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {\n                    status = ErrorResult.LOGINACCTNOTCORRECT.code;\n                    this.ftpClient.logout();\n                    return false;\n                }\n            } catch (IOException e) {\n                status = ErrorResult.ERRORWHILECONNECT.code;\n                try {\n                    this.ftpClient.logout();\n                } catch (IOException e1) {\n                }\n                return false;\n            }\n            isConnected = true;\n            return true;\n        } finally {\n            if ((!isConnected) && this.ftpClient.isConnected()) {\n                this.disconnect();\n            }\n        }\n    }\n', '    public void actionPerformed(ActionEvent e) {\n        if (""register"".equals(e.getActionCommand())) {\n            buttonClicked = ""register"";\n            try {\n                String data = URLEncoder.encode(""ver"", ""UTF-8"") + ""="" + URLEncoder.encode(Double.toString(questVer), ""UTF-8"");\n                data += ""&"" + URLEncoder.encode(""name"", ""UTF-8"") + ""="" + URLEncoder.encode(name.getText(), ""UTF-8"");\n                data += ""&"" + URLEncoder.encode(""os"", ""UTF-8"") + ""="" + URLEncoder.encode(os.getText(), ""UTF-8"");\n                data += ""&"" + URLEncoder.encode(""jre"", ""UTF-8"") + ""="" + URLEncoder.encode(jre.getText(), ""UTF-8"");\n                data += ""&"" + URLEncoder.encode(""email"", ""UTF-8"") + ""="" + URLEncoder.encode(email.getText(), ""UTF-8"");\n                data += ""&"" + URLEncoder.encode(""key"", ""UTF-8"") + ""="" + URLEncoder.encode(""Qr7SchF"", ""UTF-8"");\n                data += ""&"" + URLEncoder.encode(""answers"", ""UTF-8"") + ""="" + URLEncoder.encode(Integer.toString(getAnswers()), ""UTF-8"");\n                URL url = new URL(""http://ubcdcreator.sourceforge.net/register.php"");\n                URLConnection conn = url.openConnection();\n                conn.setDoInput(true);\n                conn.setDoOutput(true);\n                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n                wr.write(data);\n                wr.flush();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String line;\n                while ((line = rd.readLine()) != null) {\n                }\n                rd.close();\n                wr.close();\n            } catch (Exception ex) {\n            }\n            setVisible(false);\n        } else if (""cancel"".equals(e.getActionCommand())) {\n            buttonClicked = ""cancel"";\n            setVisible(false);\n        } else if (""never"".equals(e.getActionCommand())) {\n            buttonClicked = ""never"";\n            setVisible(false);\n        }\n    }\n']",275,,0,0,,-3,"connect,status,reply,isConnected",,,,,Greedy,,
,,,,,,,,,,,,,,,
347,"['13122204', '8788371', '    public static void unzipModel(String filename, String tempdir) throws EDITSException {\n        try {\n            BufferedOutputStream dest = null;\n            FileInputStream fis = new FileInputStream(filename);\n            int BUFFER = 2048;\n            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                int count;\n                byte data[] = new byte[BUFFER];\n                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n                dest = new BufferedOutputStream(fos, BUFFER);\n                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n                dest.flush();\n                dest.close();\n            }\n            zis.close();\n        } catch (Exception e) {\n            throw new EDITSException(""Can not expand model in \\"""" + tempdir + ""\\"" because:\\n"" + e.getMessage());\n        }\n    }\n', '    private void tail(String[] cmd, int pos) throws IOException {\n        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");\n        String src = null;\n        Path path = null;\n        try {\n            List<String> parameters = c.parse(cmd, pos);\n            src = parameters.get(0);\n        } catch (IllegalArgumentException iae) {\n            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);\n            throw iae;\n        }\n        boolean foption = c.getOpt(""f"") ? true : false;\n        path = new Path(src);\n        FileSystem srcFs = path.getFileSystem(getConf());\n        if (srcFs.isDirectory(path)) {\n            throw new IOException(""Source must be a file."");\n        }\n        long fileSize = srcFs.getFileStatus(path).getLen();\n        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n        while (true) {\n            FSDataInputStream in = srcFs.open(path);\n            in.seek(offset);\n            IOUtils.copyBytes(in, System.out, 1024, false);\n            offset = in.getPos();\n            in.close();\n            if (!foption) {\n                break;\n            }\n            fileSize = srcFs.getFileStatus(path).getLen();\n            offset = (fileSize > offset) ? offset : fileSize;\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n']",174,,1,1,,-3,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,,,,Greedy,,
,,,,,,,,,,,,,,,
348,"['2525897', '15166511', '    public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {\n        try {\n            MessageDigest digester = MessageDigest.getInstance(DIGEST);\n            SecureRandom random = SecureRandom.getInstance(RANDOM);\n            digester.reset();\n            for (int i = 0; i < ITERATIONS; i++) {\n                digester.update(salt);\n                digester.update(cryptPassword.getBytes(""UTF-8""));\n            }\n            byte[] hash = digester.digest();\n            random.setSeed(hash);\n            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\n            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);\n            generator.init(maxKeySize, random);\n            SecretKey key = generator.generateKey();\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] decoded = cipher.doFinal(encoded);\n            return decoded;\n        } catch (Exception e) {\n            StorePlugin.getDefault().log(e);\n        }\n        return new byte[0];\n    }\n', '    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(""MD5"");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(""Error: "" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append("":"");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append(\'0\');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(""Error:"" + e);\n        }\n    }\n']",204,"    public static byte[] Decoded(String cmdString, byte[] enccoded, byte[] sift) {
        try {
            MessageDigest signest = MessageDigest.getInstance(DIGEST);
            SecureRandom volume = SecureRandom.getInstance(RANDOM);
            signest.reset();
            for (int batch = 0; batch < ITERATIONS; batch++) {
                signest.update(sift);
                signest.update(cmdString.getBytes(""UTF-8""));
            }
            byte[] sha = signest.digest();
            volume.setSeed(sha);
            int maxKeyCount = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator Generate = KeyGenerator.getInstance(CIPHER);
            Generate.init(maxKeyCount, volume);
            SecretKey char = Generate.generateKey();
            Cipher uncip = Cipher.getInstance(CIPHER);
            uncip.init(Cipher.DECRYPT_MODE, char);
            byte[] decoded = uncip.doFinal(enccoded);
            return decoded;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",1,1,1,-1,"decode,cryptPassword,encoded,salt,digester,random,i,hash,maxKeySize,generator,key,cipher,decoded","decode:-7.450580596923828e-09,cryptPassword:8.046627044677734e-07,encoded:4.3958425521850586e-07,salt:-1.1920928955078125e-07,digester:-6.258487701416016e-06,random:-1.0952353477478027e-06,i:-9.611248970031738e-07,hash:-4.470348358154297e-08,maxKeySize:-6.258487701416016e-07,generator:-8.717179298400879e-07,key:-3.427267074584961e-07,cipher:-1.0058283805847168e-06,decoded:-3.501772880554199e-07,",12,30,"digester:signest,i:batch,maxKeySize:maxKeyCount,random:volume,decode:Decoded,cryptPassword:cmdString,encoded:enccoded,salt:sift,hash:sha,cipher:uncip,decoded:decoded,generator:Generate,key:char,",Greedy,,
,,,,,,,,,,,,,,,
349,"['1966310', '13159394', '    public void init() {\n        super.init();\n        Runnable doActions = new Runnable() {\n\n            public void run() {\n                if (_plot == null) {\n                    _plot = newPlot();\n                }\n                getContentPane().add(plot(), BorderLayout.NORTH);\n                int width;\n                int height;\n                String widthspec = getParameter(""width"");\n                if (widthspec != null) {\n                    width = Integer.parseInt(widthspec);\n                } else {\n                    width = 400;\n                }\n                String heightspec = getParameter(""height"");\n                if (heightspec != null) {\n                    height = Integer.parseInt(heightspec);\n                } else {\n                    height = 400;\n                }\n                _setPlotSize(width, height);\n                plot().setButtons(true);\n                Color background = Color.white;\n                String colorspec = getParameter(""background"");\n                if (colorspec != null) {\n                    background = PlotBox.getColorByName(colorspec);\n                }\n                setBackground(background);\n                plot().setBackground(background);\n                getContentPane().setBackground(background);\n                Color foreground = Color.black;\n                colorspec = getParameter(""foreground"");\n                if (colorspec != null) {\n                    foreground = PlotBox.getColorByName(colorspec);\n                }\n                setForeground(foreground);\n                plot().setForeground(foreground);\n                plot().setVisible(true);\n                String dataurlspec = getParameter(""dataurl"");\n                if (dataurlspec != null) {\n                    try {\n                        showStatus(""Reading data"");\n                        URL dataurl = new URL(getDocumentBase(), dataurlspec);\n                        InputStream in = dataurl.openStream();\n                        _read(in);\n                        showStatus(""Done"");\n                    } catch (MalformedURLException e) {\n                        System.err.println(e.toString());\n                    } catch (FileNotFoundException e) {\n                        System.err.println(""PlotApplet: file not found: "" + e);\n                    } catch (IOException e) {\n                        System.err.println(""PlotApplet: error reading input file: "" + e);\n                    }\n                }\n            }\n        };\n        try {\n            SwingUtilities.invokeAndWait(doActions);\n        } catch (Exception ex) {\n        }\n    }\n', '    public HttpResponse fetch(HttpServletRequest request) throws IOException {\n        GUI = SwingUI.getApplicatoin();\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n        CookieSpecFactory csf = new CookieSpecFactory() {\n\n            public CookieSpec newInstance(HttpParams params) {\n                return new BrowserCompatSpec() {\n\n                    @Override\n                    public void validate(Cookie cookie, CookieOrigin origin) throws MalformedCookieException {\n                    }\n                };\n            }\n        };\n        if (Helper.useProxy()) {\n            HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());\n            httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\n        }\n        httpclient.getCookieSpecs().register(""easy"", csf);\n        httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, ""easy"");\n        String currentRemoteGAEHost = Helper.getRemoteServer();\n        try {\n            HttpUriRequest httpRequest = createRequest(request);\n            addHeader(request, httpRequest);\n            HttpResponse response = httpclient.execute(httpRequest);\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_FORBIDDEN) {\n                challengeProxy(currentRemoteGAEHost);\n            }\n            logger.info(Helper.count.incrementAndGet() + "" Response received from "" + request.getRequestURL().toString() + "", status is "" + response.getStatusLine());\n            GUI.updateFetchCount();\n            return response;\n        } catch (ClientProtocolException e) {\n            logger.error(""Fetch ClientProtocol Error"", e);\n            throw e;\n        } catch (IOException e) {\n            logger.error(""Fetch IO Error"", e);\n            throw e;\n        }\n    }\n']",384,"    public void js() {
        super.js();
        Runnable doAactions = new Runnable() {

            public void run() {
                if (_hide == null) {
                    _hide = newPlot();
                }
                getContentPane().add(plot(), BorderLayout.NORTH);
                int wid;
                int axy;
                String sizeSpec = getParameter(""width"");
                if (sizeSpec != null) {
                    wid = Integer.parseInt(sizeSpec);
                } else {
                    wid = 400;
                }
                String heightpec = getParameter(""height"");
                if (heightpec != null) {
                    axy = Integer.parseInt(heightpec);
                } else {
                    axy = 400;
                }
                _setPlotSize(wid, axy);
                plot().setButtons(true);
                Color comment = Color.white;
                String collectionsync = getParameter(""background"");
                if (collectionsync != null) {
                    comment = PlotBox.getColorByName(collectionsync);
                }
                setBackground(comment);
                plot().setBackground(comment);
                getContentPane().setBackground(comment);
                Color foreground = Color.black;
                collectionsync = getParameter(""foreground"");
                if (collectionsync != null) {
                    foreground = PlotBox.getColorByName(collectionsync);
                }
                setForeground(foreground);
                plot().setForeground(foreground);
                plot().setVisible(true);
                String  datafilenamespe = getParameter(""dataurl"");
                if ( datafilenamespe != null) {
                    try {
                        showStatus(""Reading data"");
                        URL DataURL = new URL(getDocumentBase(),  datafilenamespe);
                        InputStream r = DataURL.openStream();
                        _read(r);
                        showStatus(""Done"");
                    } catch (MalformedURLException e) {
                        System.err.println(e.toString());
                    } catch (FileNotFoundException e) {
                        System.err.println(""PlotApplet: file not found: "" + e);
                    } catch (IOException e) {
                        System.err.println(""PlotApplet: error reading input file: "" + e);
                    }
                }
            }
        };
        try {
            SwingUtilities.invokeAndWait(doAactions);
        } catch (Exception ex) {
        }
    }
",0,0,0,-1,"init,doActions,_plot,width,height,widthspec,heightspec,background,colorspec,foreground,dataurlspec,dataurl,in","init:-2.270653134300595e-08,doActions:3.9736429850260414e-08,_plot:1.0217939104352678e-07,width:3.0653817313058033e-07,height:2.724783761160714e-07,widthspec:1.2772423880440848e-07,heightspec:1.2772423880440848e-07,background:4.6832220894949775e-07,colorspec:5.619866507393973e-07,foreground:2.838316417875744e-07,dataurlspec:9.366444178989955e-08,dataurl:2.0435878208705356e-07,in:1.7029898507254463e-08,",12,38,"doActions:doAactions,init:js,in:r,width:wid,widthspec:sizeSpec,dataurlspec: datafilenamespe,dataurl:DataURL,height:axy,heightspec:heightpec,background:comment,colorspec:collectionsync,foreground:foreground,_plot:_hide,",Greedy,,
,,,,,,,,,,,,,,,
350,"['10451698', '13891080', '    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals("".svn"")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n', '    public static void copyFile(File srcFile, File destFile) throws IOException {\n        logger.debug(""copyFile(srcFile={}, destFile={}) - start"", srcFile, destFile);\n        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();\n        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();\n        try {\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n']",227,,1,1,,-3,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read",,,,,Greedy,,
,,,,,,,,,,,,,,,
351,"['19934218', '5632808', '    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(""SHA-1"");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(""UTF-8""), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n', '        @Override\n        public void respondGet(HttpServletResponse resp) throws IOException {\n            setHeaders(resp);\n            final OutputStream os;\n            if (willDeflate()) {\n                resp.setHeader(""Content-Encoding"", ""gzip"");\n                os = new GZIPOutputStream(resp.getOutputStream(), bufferSize);\n            } else os = resp.getOutputStream();\n            transferStreams(url.openStream(), os);\n        }\n']",73,"    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",0,0,0,-1,"doCrypt,text,UnsupportedEncodingException,md,sha1hash","doCrypt:5.31474749247233e-07,text:-1.9073486328125e-06,UnsupportedEncodingException:-5.066394805908203e-07,md:-1.0391076405843098e-05,sha1hash:6.3925981521606445e-06,",0,0,"md:md,sha1hash:sha1hash,text:text,doCrypt:doCrypt,UnsupportedEncodingException:UnsupportedEncodingException,",Greedy,,
,,,,,,,,,,,,,,,
352,"['771802', '9824814', '    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n        int k_blockSize = 1024;\n        int byteCount;\n        char[] buf = new char[k_blockSize];\n        File ofp = new File(outFile);\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n        zos.setMethod(ZipOutputStream.DEFLATED);\n        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");\n        BufferedWriter bw = new BufferedWriter(osw);\n        ZipEntry zot = null;\n        File ifp = new File(inFile);\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");\n        BufferedReader br = new BufferedReader(isr);\n        ZipEntry zit = null;\n        while ((zit = zis.getNextEntry()) != null) {\n            if (zit.getName().equals(""content.xml"")) {\n                continue;\n            }\n            zot = new ZipEntry(zit.getName());\n            zos.putNextEntry(zot);\n            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n            bw.flush();\n            zos.closeEntry();\n        }\n        zos.putNextEntry(new ZipEntry(""content.xml""));\n        bw.flush();\n        osw = new OutputStreamWriter(zos, ""UTF8"");\n        bw = new BufferedWriter(osw);\n        return bw;\n    }\n', '    public void run() {\n        if (status == COMPLETE) {\n            return;\n        }\n        waitRandom();\n        RandomAccessFile file = null;\n        InputStream inputStream = null;\n        boolean success = false;\n        URL url = null;\n        try {\n            BeatportAccessor beatportAccessor = new BeatportAccessor();\n            if (sessionCookies == null) {\n                sessionCookies = beatportAccessor.getSessionCookies(user, password);\n            }\n            url = new URL(new BeatportAccessor().getTrackDownloadUrl(downloadId, sessionCookies));\n            log.info(""Open (DownloadWorker.run): "" + url);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(""User-Agent"", BeatportAccessor.userAgent);\n            connection.setRequestProperty(""Cookie"", sessionCookies);\n            connection.connect();\n            if (connection.getResponseCode() / 100 != 2) {\n                log.error(""Unexpected response from server: "" + connection.getResponseCode());\n                error();\n                return;\n            }\n            if (connection.getContentType().indexOf(""text"") >= 0) {\n                log.error(""Tried to request: "" + url.toString());\n                log.error(""Unexpected file content type from server: "" + connection.getContentType());\n                log.error(""Server replied:\\n"" + getContentAsString(connection));\n                error();\n                return;\n            }\n            int contentLength = connection.getContentLength();\n            if (contentLength < 1) {\n                log.error(""Invalid content length: "" + connection.getContentLength());\n                error();\n                return;\n            }\n            if (size == -1) {\n                size = contentLength;\n                stateChanged();\n            } else if (size != contentLength) {\n                changeTotal(0, contentLength - size);\n            }\n            if (new File(tmpFileName(fileName)).exists()) {\n                if (!new File(tmpFileName(fileName)).delete()) {\n                    throw new Exception(""Could not delete file: "" + tmpFileName(fileName));\n                }\n            }\n            file = new RandomAccessFile(tmpFileName(fileName), ""rw"");\n            file.seek(downloaded);\n            inputStream = connection.getInputStream();\n            if (started == 0) {\n                started = System.currentTimeMillis();\n                time = started;\n            }\n            statusChangedObserver.statusChanged(status);\n            byte buffer[] = new byte[MAX_BUFFER_SIZE];\n            while (status == DOWNLOADING) {\n                if (size - downloaded < MAX_BUFFER_SIZE) {\n                    buffer = new byte[(int) (size - downloaded)];\n                }\n                int read = inputStream.read(buffer);\n                if (read == -1) break;\n                file.write(buffer, 0, read);\n                downloaded += read;\n                changeTotal(read, 0);\n                stateChanged();\n            }\n            if (status == DOWNLOADING) {\n                stopped = System.currentTimeMillis();\n                status = COMPLETE;\n            }\n            statusChangedObserver.statusChanged(status);\n            stateChanged();\n            success = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            error();\n        } finally {\n            try {\n                file.close();\n            } catch (Exception e) {\n            }\n            if (success) {\n                try {\n                    if (!new File(tmpFileName(fileName)).renameTo(new File(fileName))) {\n                        throw new Exception(""Rename Failed"");\n                    }\n                } catch (Exception e) {\n                    log.error(""Error moving temp file "" + tmpFileName(fileName) + "" file: "" + fileName, e);\n                }\n            } else {\n                try {\n                    new File(tmpFileName(fileName)).delete();\n                } catch (Exception e) {\n                    log.error(""Error deleting erroneous temp file: "" + tmpFileName(fileName), e);\n                }\n            }\n            try {\n                inputStream.close();\n            } catch (Exception e) {\n                log.error(""Error closing input stream of: "" + url + "" / "" + fileName, e);\n            }\n        }\n    }\n']",269,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
",0,0,0,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit","createOutputStream:2.4328426438934947e-09,inFile:1.9462741151147958e-08,outFile:9.731370575573979e-09,k_blockSize:2.1895583795041452e-08,byteCount:1.4597055863360969e-08,buf:2.9194111726721938e-08,ofp:-2.4328426438934946e-08,zos:-2.0435878208705356e-07,osw:-7.785096460459183e-08,bw:-1.0217939104352678e-07,zot:-2.1895583795041452e-08,ifp:0.0,zis:7.2985279316804845e-09,isr:-6.811959402901785e-08,br:-5.8388223453443876e-08,zit:-5.8388223453443876e-08,",0,0,"ofp:ofp,zos:zos,k_blockSize:k_blockSize,byteCount:byteCount,buf:buf,bw:bw,br:br,outFile:outFile,osw:osw,ifp:ifp,zis:zis,isr:isr,createOutputStream:createOutputStream,inFile:inFile,zot:zot,zit:zit,",Greedy,,
,,,,,,,,,,,,,,,
353,"['3309233', '4168534', '        @Override\n        protected String doInBackground(String... params) {\n            try {\n                final HttpParams param = new BasicHttpParams();\n                HttpConnectionParams.setConnectionTimeout(param, 30000);\n                HttpConnectionParams.setSoTimeout(param, 30000);\n                DefaultHttpClient client = new DefaultHttpClient(param);\n                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");\n                post.setEntity(new StringEntity(params[0]));\n                if (DEBUG) Log.d(""Location"", params[0]);\n                HttpResponse resp = client.execute(post);\n                if (resp.getStatusLine().getStatusCode() == 200) {\n                    HttpEntity entity = resp.getEntity();\n                    String result = EntityUtils.toString(entity);\n                    return result;\n                } else {\n                    if (isFirstLocation) {\n                        requestGearsLocation(1);\n                        isFirstLocation = false;\n                        return RESULT_FIRST_FAILE;\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n', '    public String insertSmsInf(Sms sms) throws Exception {\n        String smsId = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        StringBuffer buffer = new StringBuffer();\n        try {\n            buffer.append(""INSERT INTO COMTNSMS\\n"");\n            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n"");\n            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n"");\n            buffer.append(""VALUES\\n"");\n            buffer.append(""(?, ?, ?, ?, SYSDATE())"");\n            conn = SmsBasicDBUtil.getConnection();\n            conn.setAutoCommit(false);\n            smsId = getNextId(conn);\n            pstmt = conn.prepareStatement(buffer.toString());\n            int index = 0;\n            pstmt.setString(++index, smsId);\n            pstmt.setString(++index, sms.getTrnsmitTelno());\n            pstmt.setString(++index, sms.getTrnsmitCn());\n            pstmt.setString(++index, sms.getFrstRegisterId());\n            pstmt.executeUpdate();\n            conn.commit();\n            return smsId;\n        } catch (Exception ex) {\n            if (conn != null) {\n                conn.rollback();\n            }\n            throw ex;\n        } finally {\n            SmsBasicDBUtil.close(null, pstmt, conn);\n        }\n    }\n']",176,,0,0,,-3,"doInBackground,params,param,client,post,resp,entity,result",,,,,Greedy,,
,,,,,,,,,,,,,,,
354,"['3252116', '10176678', '    public static String getMD5(String source) {\n        String s = null;\n        char hexDigits[] = { \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' };\n        try {\n            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");\n            md.update(source.getBytes());\n            byte tmp[] = md.digest();\n            char str[] = new char[16 * 2];\n            int k = 0;\n            for (int i = 0; i < 16; i++) {\n                byte byte0 = tmp[i];\n                str[k++] = hexDigits[byte0 >>> 4 & 0xf];\n                str[k++] = hexDigits[byte0 & 0xf];\n            }\n            s = new String(str);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return s;\n    }\n', '    @Test\n    public void testLoadHttpGzipped() throws Exception {\n        String url = HTTP_GZIPPED;\n        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));\n        InputStream contentInputStream = loadingInfo.getContentInputStream();\n        byte[] actual = IOUtils.toByteArray(contentInputStream);\n        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));\n        assertEquals(expected.length, actual.length);\n    }\n']",192,"    public static String getMC4(String file) {
        String a = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest desc = java.security.MessageDigest.getInstance(""MD5"");
            desc.update(file.getBytes());
            byte bytes[] = desc.digest();
            char cr[] = new char[16 * 2];
            int l = 0;
            for (int ti = 0; ti < 16; ti++) {
                byte Byte1 = bytes[ti];
                cr[l++] = hexDigits[Byte1 >>> 4 & 0xf];
                cr[l++] = hexDigits[Byte1 & 0xf];
            }
            a = new String(cr);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return a;
    }
",0,0,0,-1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0","getMD5:8.770397731236049e-07,source:-2.5119100298200336e-07,s:-8.365937641688755e-07,hexDigits:-3.3846923283168244e-07,md:3.7870236805507114e-06,tmp:9.664467402866907e-07,str:-4.938670567103794e-07,k:-7.024833134242466e-07,i:-2.8950827462332587e-07,byte0:-2.8099332536969867e-07,",9,25,"s:a,hexDigits:hexDigits,i:ti,md:desc,getMD5:getMC4,source:file,str:cr,k:l,byte0:Byte1,tmp:bytes,",Greedy,,
,,,,,,,,,,,,,,,
355,"['15580610', '12380475', '    @Override\n    public void trainClassifier(File dir, String... args) throws Exception {\n        String[] command = new String[args.length + 3];\n        command[0] = this.getCommand();\n        System.arraycopy(args, 0, command, 1, args.length);\n        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();\n        command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n        Process process = Runtime.getRuntime().exec(command);\n        IOUtils.copy(process.getInputStream(), System.out);\n        IOUtils.copy(process.getErrorStream(), System.err);\n        process.waitFor();\n    }\n', '    public void transport(File file) throws TransportException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                File[] files = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    transport(file);\n                }\n            } else if (file.isFile()) {\n                try {\n                    FileChannel inChannel = new FileInputStream(file).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    inChannel.transferTo(0, inChannel.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(""File transfer failed"", e);\n                }\n            }\n        }\n    }\n']",157,"    @Override
    public void  runClassizer(File output, String... args) throws Exception {
        String[] comment = new String[args.ctors + 3];
        comment[0] = this.getCommand();
        System.arraycopy(args, 0, comment, 1, args.ctors);
        comment[comment.ctors - 2] = new File(output, ""training-data.libsvm"").getPath();
        comment[comment.ctors - 1] = new File(output, this.getModelName()).getPath();
        Process request = Runtime.getRuntime().exec(comment);
        IOUtils.copy(request.getInputStream(), System.out);
        IOUtils.copy(request.getErrorStream(), System.err);
        request.waitFor();
    }
",1,1,1,-1,"trainClassifier,dir,command,length,process","trainClassifier:5.3644180297851564e-08,dir:5.006790161132813e-07,command:7.05718994140625e-06,length:1.502037048339844e-06,process:3.337860107421875e-06,",5,20,"dir:output,command:comment,length:ctors,process:request,trainClassifier: runClassizer,",Greedy,,
,,,,,,,,,,,,,,,
356,"['12055086', '15445861', '    protected static void copyDeleting(File source, File dest) throws IOException {\n        byte[] buf = new byte[8 * 1024];\n        FileInputStream in = new FileInputStream(source);\n        try {\n            FileOutputStream out = new FileOutputStream(dest);\n            try {\n                int count;\n                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n            } finally {\n                out.close();\n            }\n        } finally {\n            in.close();\n        }\n    }\n', '    public static void copyFile(File srcFile, File destFile) throws IOException {\n        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn\'t exist: "" + srcFile.getAbsolutePath());\n        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(destFile);\n        byte[] buffer = new byte[4096];\n        int no = 0;\n        try {\n            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n        } finally {\n            in.close();\n            out.close();\n        }\n    }\n']",100,,1,1,,-3,"copyDeleting,source,dest,buf,in,out,count",,,,,Greedy,,
,,,,,,,,,,,,,,,
357,"['9805906', '22366505', '    public static boolean dump(File source, File target) {\n        boolean done = false;\n        try {\n            InputStream is = new BufferedInputStream(new FileInputStream(source));\n            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n            while (is.available() > 0) {\n                os.write(is.read());\n            }\n            os.flush();\n            os.close();\n            is.close();\n            return true;\n        } catch (IOException e) {\n        }\n        return done;\n    }\n', '    @Override\n    public void incluir(Igreja igreja) throws Exception {\n        Connection connection = criaConexao(false);\n        String sql = ""insert into igreja ? as idlocal, ? as possui_salao;"";\n        String sql2 = ""SELECT MAX(idlocal) FROM Local"";\n        PreparedStatement stmt = null;\n        PreparedStatement stmt2 = null;\n        ResultSet rs = null;\n        try {\n            stmt = connection.prepareStatement(sql);\n            stmt2 = connection.prepareStatement(sql2);\n            rs = stmt2.executeQuery();\n            stmt.setInt(1, rs.getInt(""max""));\n            stmt.setBoolean(2, igreja.getPossuiSalao());\n            int retorno = stmt.executeUpdate();\n            if (retorno == 0) {\n                connection.rollback();\n                throw new SQLException(""Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!"");\n            }\n            connection.commit();\n        } catch (SQLException e) {\n            connection.rollback();\n            throw e;\n        } finally {\n            try {\n                stmt.close();\n                stmt2.close();\n                rs.close();\n                this.fechaConexao();\n            } catch (SQLException e) {\n                throw e;\n            }\n        }\n    }\n']",102,"    public static boolean stat(File shell, File term) {
        boolean shown = false;
        try {
            InputStream IS = new BufferedInputStream(new FileInputStream(shell));
            OutputStream es = new BufferedOutputStream(new FileOutputStream(term));
            while (IS.available() > 0) {
                es.write(IS.read());
            }
            es.flush();
            es.close();
            IS.close();
            return true;
        } catch (IOException e) {
        }
        return shown;
    }
",0,0,0,-1,"dump,source,target,is,os,done","dump:-5.984306335449219e-06,source:-9.202957153320313e-06,target:-1.6156832377115885e-05,is:-3.849665323893229e-05,os:3.6557515462239586e-05,done:-2.1052360534667968e-05,",6,15,"source:shell,is:IS,target:term,os:es,done:shown,dump:stat,",Greedy,,
,,,,,,,,,,,,,,,
358,"['15241397', '14758866', '    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\\\/(id:.*)\\\\/.*?$"", ""$1"");\n        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);\n        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);\n        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());\n        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();\n        HttpURLConnection.setFollowRedirects(false);\n        httpURLConnection.connect();\n        response.setStatus(httpURLConnection.getResponseCode());\n        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");\n        logger.debug(""[headers]"");\n        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {\n            if (header.getKey() != null) {\n                for (String value : header.getValue()) {\n                    if (value != null) {\n                        logger.debug(header.getKey() + "": "" + value);\n                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {\n                            response.addHeader(header.getKey(), value);\n                        }\n                    }\n                }\n            }\n        }\n        logger.debug(""[/headers]"");\n        InputStream inputStream = httpURLConnection.getInputStream();\n        OutputStream outputStream = response.getOutputStream();\n        IOUtils.copy(inputStream, outputStream);\n    }\n', '    public synchronized InputStream getResourceAsStream(String name) {\n        InputStream inputStream = null;\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        try {\n            URL url = getResource(name);\n            String remoteName = url.toExternalForm();\n            String localName = (String) cacheHashtable.get(remoteName);\n            if (localName != null) {\n                System.out.println(""Retrieving \\"""" + localName + ""\\""..."");\n                return new FileInputStream(localName);\n            }\n            String host = url.getHost();\n            String prot = url.getProtocol();\n            int port = url.getPort();\n            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);\n            cacheFile = new File(cacheFile.getCanonicalPath());\n            localName = cacheFile.getCanonicalPath();\n            System.out.println(""Comparing \\"""" + localName + ""\\""..."");\n            URLConnection urlConnection = url.openConnection();\n            if (cacheFile.exists()) {\n                urlConnection.setIfModifiedSince(cacheFile.lastModified());\n            }\n            if (urlConnection instanceof HttpURLConnection) {\n                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n                httpURLConnection.setFollowRedirects(true);\n                httpURLConnection.setRequestMethod(""GET"");\n                int responseCode = httpURLConnection.getResponseCode();\n                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));\n                if (responseCode != HttpURLConnection.HTTP_OK) {\n                    return null;\n                }\n            }\n            inputStream = urlConnection.getInputStream();\n            if (inputStream == null) return null;\n            if (cacheFile.exists()) {\n                long lastModified = urlConnection.getLastModified();\n                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n                    inputStream.close();\n                    cacheHashtable.put(remoteName, localName);\n                    System.out.println(""Retrieving \\"""" + localName + ""\\""..."");\n                    return new FileInputStream(cacheFile);\n                }\n            }\n            File parentFile = new File(cacheFile.getParent());\n            parentFile.mkdirs();\n            localName = cacheFile.getCanonicalPath();\n            System.out.println(""CACHING \\"""" + localName + ""\\""..."");\n            in = new BufferedInputStream(inputStream);\n            out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n            int i;\n            while ((i = in.read()) > -1) out.write(i);\n            out.close();\n            in.close();\n            cacheHashtable.put(remoteName, localName);\n            System.out.println(""Retrieving \\"""" + localName + ""\\""..."");\n            return new FileInputStream(localName);\n        } catch (Exception ex) {\n            try {\n                inputStream.close();\n            } catch (Exception ex1) {\n            }\n            try {\n                in.close();\n            } catch (Exception ex1) {\n            }\n            try {\n                out.close();\n            } catch (Exception ex1) {\n            }\n            ex.printStackTrace();\n            return null;\n        }\n    }\n']",303,,1,0,,-4,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,,Greedy,,
,,,,,,,,,,,,,,,
359,"['3252116', '22022715', '    public static String getMD5(String source) {\n        String s = null;\n        char hexDigits[] = { \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' };\n        try {\n            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");\n            md.update(source.getBytes());\n            byte tmp[] = md.digest();\n            char str[] = new char[16 * 2];\n            int k = 0;\n            for (int i = 0; i < 16; i++) {\n                byte byte0 = tmp[i];\n                str[k++] = hexDigits[byte0 >>> 4 & 0xf];\n                str[k++] = hexDigits[byte0 & 0xf];\n            }\n            s = new String(str);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return s;\n    }\n', '    protected static final byte[] digest(String s) {\n        byte[] ret = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(""MD5"");\n            md.update(s.getBytes());\n            ret = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(""no message digest algorithm available!"");\n            System.exit(1);\n        }\n        return ret;\n    }\n']",192,,1,1,,-3,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0",,,,,Greedy,,
,,,,,,,,,,,,,,,
360,"['7872659', '18793482', '    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n', '    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();\n            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");\n            if (!englishFile.exists()) throw new Exception(""English file not found"");\n            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";\n            File file = new File(propertiesFilePath);\n            if (!file.exists()) {\n                FileReader in = new FileReader(englishFile);\n                FileWriter out = new FileWriter(file);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String line = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((line = breader.readLine()) != null) {\n                if (line.startsWith(""#"")) strBuilder.append(line).append(""\\n""); else {\n                    String[] pieces = line.split(""="");\n                    if (pieces.length == 2) {\n                        if (pieces[0].trim().equals(messageName)) {\n                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\\n"");\n                            found = true;\n                        } else strBuilder.append(line).append(""\\n"");\n                    } else strBuilder.append(line).append(""\\n"");\n                }\n            }\n            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\\n"");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n']",385,,1,1,,-3,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,,Greedy,,
,,,,,,,,,,,,,,,
361,"['3430784', '22536033', '    public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {\n        if (contentTransferEncoding != null) {\n            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);\n            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {\n                in = new QuotedPrintableInputStream(in);\n            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {\n                in = new Base64InputStream(in);\n            }\n        }\n        BinaryTempFileBody tempBody = new BinaryTempFileBody();\n        OutputStream out = tempBody.getOutputStream();\n        IOUtils.copy(in, out);\n        out.close();\n        return tempBody;\n    }\n', '    private boolean setPayload() throws IOException {\n        if (Index < Headers.length) {\n            FileOutputStream fos = new FileOutputStream(Headers[Index], true);\n            FileInputStream fis = new FileInputStream(HeadlessData);\n            FileChannel fic = fis.getChannel();\n            FileChannel foc = fos.getChannel();\n            fic.transferTo(0, fic.size(), foc);\n            fic.close();\n            foc.close();\n            setDestination(Destinations[Index]);\n            setPayload(Headers[Index]);\n            Index++;\n            return true;\n        }\n        return false;\n    }\n']",109,"    public static Body decprocessBody(InputStream req, String contentRequestEnation) throws IOException {
        if (contentRequestEnation != null) {
            contentRequestEnation = MimeUtility.getHeaderParameter(contentRequestEnation, null);
            if (""quoted-printable"".equalsIgnoreCase(contentRequestEnation)) {
                req = new QuotedPrintableInputStream(req);
            } else if (""base64"".equalsIgnoreCase(contentRequestEnation)) {
                req = new Base64InputStream(req);
            }
        }
        BinaryTempFileBody tempFoot = new BinaryTempFileBody();
        OutputStream conv = tempFoot.getOutputStream();
        IOUtils.copy(req, conv);
        conv.close();
        return tempFoot;
    }
",1,1,1,-1,"decodeBody,in,contentTransferEncoding,tempBody,out","decodeBody:8.783842387952302e-08,in:-4.140954268606085e-07,contentTransferEncoding:1.7316717850534538e-06,tempBody:-5.64675582082648e-08,out:1.1669962029708058e-06,",5,19,"in:req,contentTransferEncoding:contentRequestEnation,decodeBody:decprocessBody,tempBody:tempFoot,out:conv,",Greedy,,
,,,,,,,,,,,,,,,
362,"['23291583', '4750967', '    private ByteArrayInputStream fetchUrl(String urlString, Exception[] outException) {\n        URL url;\n        try {\n            url = new URL(urlString);\n            InputStream is = null;\n            int inc = 65536;\n            int curr = 0;\n            byte[] result = new byte[inc];\n            try {\n                is = url.openStream();\n                int n;\n                while ((n = is.read(result, curr, result.length - curr)) != -1) {\n                    curr += n;\n                    if (curr == result.length) {\n                        byte[] temp = new byte[curr + inc];\n                        System.arraycopy(result, 0, temp, 0, curr);\n                        result = temp;\n                    }\n                }\n                return new ByteArrayInputStream(result, 0, curr);\n            } finally {\n                if (is != null) {\n                    try {\n                        is.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n        } catch (Exception e) {\n            if (outException != null) {\n                outException[0] = e;\n            }\n        }\n        return null;\n    }\n', '    public void patch() throws IOException {\n        if (mods.isEmpty()) {\n            return;\n        }\n        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\n        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n    }\n']",204,"    private ByteArrayInputStream faultString(String lName, Exception[] OutEvent) {
        URL email;
        try {
            email = new URL(lName);
            InputStream serv = null;
            int cc = 65536;
            int urr = 0;
            byte[] response = new byte[cc];
            try {
                serv = email.openStream();
                int name;
                while ((name = serv.read(response, urr, response.length - urr)) != -1) {
                    urr += name;
                    if (urr == response.length) {
                        byte[] template = new byte[urr + cc];
                        System.arraycopy(response, 0, template, 0, urr);
                        response = template;
                    }
                }
                return new ByteArrayInputStream(response, 0, urr);
            } finally {
                if (serv != null) {
                    try {
                        serv.close();
                    } catch (IOException e) {
                    }
                }
            }
        } catch (Exception e) {
            if (OutEvent != null) {
                OutEvent[0] = e;
            }
        }
        return null;
    }
",0,0,0,-1,"fetchUrl,urlString,outException,url,is,inc,curr,result,n,temp","fetchUrl:5.050709373072574e-07,urlString:8.783842387952302e-08,outException:-8.47013373123972e-08,url:-8.658358925267269e-07,is:-1.8195102089329768e-06,inc:-1.3834551761024876e-06,curr:-4.366824501439144e-06,result:-1.7787280835603412e-06,n:-8.564246328253495e-07,temp:-3.764503880550987e-07,",10,38,"is:serv,curr:urr,result:response,n:name,urlString:lName,url:email,fetchUrl:faultString,outException:OutEvent,inc:cc,temp:template,",Greedy,,
,,,,,,,,,,,,,,,
363,"['14758866', '20886320', '    public synchronized InputStream getResourceAsStream(String name) {\n        InputStream inputStream = null;\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        try {\n            URL url = getResource(name);\n            String remoteName = url.toExternalForm();\n            String localName = (String) cacheHashtable.get(remoteName);\n            if (localName != null) {\n                System.out.println(""Retrieving \\"""" + localName + ""\\""..."");\n                return new FileInputStream(localName);\n            }\n            String host = url.getHost();\n            String prot = url.getProtocol();\n            int port = url.getPort();\n            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);\n            cacheFile = new File(cacheFile.getCanonicalPath());\n            localName = cacheFile.getCanonicalPath();\n            System.out.println(""Comparing \\"""" + localName + ""\\""..."");\n            URLConnection urlConnection = url.openConnection();\n            if (cacheFile.exists()) {\n                urlConnection.setIfModifiedSince(cacheFile.lastModified());\n            }\n            if (urlConnection instanceof HttpURLConnection) {\n                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n                httpURLConnection.setFollowRedirects(true);\n                httpURLConnection.setRequestMethod(""GET"");\n                int responseCode = httpURLConnection.getResponseCode();\n                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));\n                if (responseCode != HttpURLConnection.HTTP_OK) {\n                    return null;\n                }\n            }\n            inputStream = urlConnection.getInputStream();\n            if (inputStream == null) return null;\n            if (cacheFile.exists()) {\n                long lastModified = urlConnection.getLastModified();\n                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n                    inputStream.close();\n                    cacheHashtable.put(remoteName, localName);\n                    System.out.println(""Retrieving \\"""" + localName + ""\\""..."");\n                    return new FileInputStream(cacheFile);\n                }\n            }\n            File parentFile = new File(cacheFile.getParent());\n            parentFile.mkdirs();\n            localName = cacheFile.getCanonicalPath();\n            System.out.println(""CACHING \\"""" + localName + ""\\""..."");\n            in = new BufferedInputStream(inputStream);\n            out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n            int i;\n            while ((i = in.read()) > -1) out.write(i);\n            out.close();\n            in.close();\n            cacheHashtable.put(remoteName, localName);\n            System.out.println(""Retrieving \\"""" + localName + ""\\""..."");\n            return new FileInputStream(localName);\n        } catch (Exception ex) {\n            try {\n                inputStream.close();\n            } catch (Exception ex1) {\n            }\n            try {\n                in.close();\n            } catch (Exception ex1) {\n            }\n            try {\n                out.close();\n            } catch (Exception ex1) {\n            }\n            ex.printStackTrace();\n            return null;\n        }\n    }\n', '    @Override\n    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {\n        if (query == null) {\n            return null;\n        }\n        String encodedQuery = """";\n        try {\n            encodedQuery = URLEncoder.encode(query, ""UTF-8"");\n        } catch (UnsupportedEncodingException e) {\n            throw e;\n        }\n        final int startAt = 0;\n        final int pageNr = (startAt - 1) / 30;\n        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));\n        HttpParams httpparams = new BasicHttpParams();\n        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);\n        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);\n        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);\n        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");\n        HttpGet httpget = new HttpGet(url);\n        HttpResponse response = httpclient.execute(httpget);\n        InputStream instream = response.getEntity().getContent();\n        String html = HttpHelper.ConvertStreamToString(instream);\n        instream.close();\n        return parseHtml(html);\n    }\n']",602,,0,0,,-3,"getResourceAsStream,name,inputStream,in,out,url,remoteName,localName,host,prot,port,cacheFile,urlConnection,httpURLConnection,responseCode,lastModified",,,,,Greedy,,
,,,,,,,,,,,,,,,
364,"['1798720', '15645004', '    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n        String dirBase = Util.JAVA_DIR + File.separator + packageName;\n        File packageDir = new File(dirBase);\n        if (!packageDir.exists()) {\n            boolean created = packageDir.mkdir();\n            if (!created) {\n                File currentPath = new File(""."");\n                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i < fileContents.size(); i++) {\n            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(fileContents.get(i));\n            fos.flush();\n            fos.close();\n        }\n        for (int i = 0; i < fileNames.size(); i++) {\n            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n            writer.append(""package "" + packageName + "";\\n"");\n            String line = """";\n            while ((line = reader.readLine()) != null) writer.append(line + ""\\n"");\n            writer.flush();\n            writer.close();\n            reader.close();\n        }\n    }\n', '    private void unzip(File filename) throws ZipException, IOException {\n        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n        ZipEntry entry = null;\n        boolean first_entry = true;\n        while ((entry = in.getNextEntry()) != null) {\n            if (first_entry) {\n                if (!entry.isDirectory()) {\n                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n                    if (!subdir.exists()) {\n                        subdir.mkdir();\n                        dir = subdir;\n                    }\n                }\n                first_entry = false;\n            }\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n            } else {\n                File outfile = new File(dir + File.separator + entry.getName());\n                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n                if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n                FileOutputStream fo = new FileOutputStream(outfile);\n                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n                int read;\n                byte data[] = new byte[BUFFER];\n                while ((read = in.read(data, 0, BUFFER)) != -1) {\n                    read_position++;\n                    bos.write(data, 0, read);\n                }\n                bos.flush();\n                bos.close();\n            }\n        }\n        in.close();\n    }\n']",320,,1,1,,-3,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line",,,,,Greedy,,
,,,,,,,,,,,,,,,
365,"['22235113', '21368981', '    protected Object unmarshallXml(final Unmarshaller unmarshaller, final String accessUrl, final String nameSpace, final String replace, final String with) throws Exception {\n        final URL url = new URL(accessUrl);\n        final BufferedReader inputStream = new BufferedReader(new InputStreamReader(url.openStream()));\n        String xmlContent = readWithStringBuffer(inputStream);\n        if (replace != null) {\n            xmlContent = xmlContent.replace(replace, with);\n        }\n        LOGGER.info(""Calls "" + accessUrl);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(""\\nXml:"" + accessUrl + ""\\n"" + xmlContent);\n        }\n        if (LOGGER.isDebugEnabled()) {\n            final BufferedWriter out = new BufferedWriter(new FileWriter(""target/XmlAgentLog"" + xmlRequestNumber++ + "".txt""));\n            out.write(xmlContent);\n            out.close();\n        }\n        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xmlContent.getBytes());\n        Source source;\n        if (nameSpace != null) {\n            source = setNameSpaceOnXmlStream(byteArrayInputStream, nameSpace);\n        } else {\n            source = new StreamSource(byteArrayInputStream);\n        }\n        return unmarshaller.unmarshal(source);\n    }\n', '    public APIResponse create(Application application) throws Exception {\n        APIResponse response = new APIResponse();\n        connection = (HttpURLConnection) new URL(url + ""/api/application/create"").openConnection();\n        connection.setDoOutput(true);\n        connection.setRequestMethod(""POST"");\n        connection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");\n        connection.setUseCaches(false);\n        connection.setConnectTimeout(TIMEOUT);\n        connection.connect();\n        marshaller.marshal(application, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), ""utf-8"")));\n        connection.getOutputStream().flush();\n        connection.getOutputStream().close();\n        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n            JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), ""utf-8"")).readLine()));\n            response.setDone(true);\n            response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));\n            connection.getInputStream().close();\n        } else {\n            response.setDone(false);\n            response.setMessage(""Create Application Error Code: Http ("" + connection.getResponseCode() + "")"");\n        }\n        connection.disconnect();\n        return response;\n    }\n']",208,"    protected Object unmarshalYxml(final Unmarshaller unmarshCalling, final String accessurl, final String resourceSpace, final String look, final String set) throws Exception {
        final URL nl = new URL(accessurl);
        final BufferedReader  inputThread = new BufferedReader(new InputStreamReader(nl.openStream()));
        String jsoncontent = readWithStringBuffer( inputThread);
        if (look != null) {
            jsoncontent = jsoncontent.look(look, set);
        }
        LOGGER.info(""Calls "" + accessurl);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""
Xml:"" + accessUrl + ""
"" + xmlContent);
        }
        if (LOGGER.isDebugEnabled()) {
            final BufferedWriter log = new BufferedWriter(new FileWriter(""target/XmlAgentLog"" + xmlEventNumber++ + "".txt""));
            log.write(jsoncontent);
            log.close();
        }
        final ByteArrayInputStream byteArrayStorageSet = new ByteArrayInputStream(jsoncontent.getBytes());
        Source site;
        if (resourceSpace != null) {
            site = setNameSpaceOnXmlStream(byteArrayStorageSet, resourceSpace);
        } else {
            site = new StreamSource(byteArrayStorageSet);
        }
        return unmarshCalling.unmarshal(site);
    }
",0,0,0,-1,"unmarshallXml,unmarshaller,accessUrl,nameSpace,replace,with,url,inputStream,xmlContent,out,xmlRequestNumber,byteArrayInputStream,source","unmarshallXml:-3.6425060696072045e-08,unmarshaller:-3.9736429850260414e-08,accessUrl:1.3245476616753473e-07,nameSpace:7.947285970052083e-08,replace:0.0,with:6.622738308376736e-09,url:3.2451417711046003e-07,inputStream:1.3778607050577799e-05,xmlContent:0.0,out:2.9802322387695312e-08,xmlRequestNumber:0.0,byteArrayInputStream:-6.953875223795572e-08,source:-1.0596381293402777e-07,",13,36,"replace:look,with:set,xmlContent:jsoncontent,out:log,xmlRequestNumber:xmlEventNumber,url:nl,inputStream: inputThread,unmarshallXml:unmarshalYxml,unmarshaller:unmarshCalling,accessUrl:accessurl,nameSpace:resourceSpace,byteArrayInputStream:byteArrayStorageSet,source:site,",Greedy,,
,,,,,,,,,,,,,,,
366,"['8490710', '14191679', '    public void actualizar() throws SQLException, ClassNotFoundException, Exception {\n        Connection conn = null;\n        PreparedStatement ms = null;\n        registroActualizado = false;\n        try {\n            conn = ToolsBD.getConn();\n            conn.setAutoCommit(false);\n            Date fechaSystem = new Date();\n            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");\n            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");\n            DateFormat sss = new SimpleDateFormat(""S"");\n            String ss = sss.format(fechaSystem);\n            if (ss.length() > 2) {\n                ss = ss.substring(0, 2);\n            }\n            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n            ms = conn.prepareStatement(SENTENCIA_UPDATE);\n            ms.setString(1, descartadoEntrada);\n            ms.setString(2, usuarioEntrada);\n            ms.setString(3, motivosDescarteEntrada);\n            ms.setInt(4, Integer.parseInt(anoOficio));\n            ms.setInt(5, Integer.parseInt(oficinaOficio));\n            ms.setInt(6, Integer.parseInt(numeroOficio));\n            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);\n            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);\n            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);\n            int afectados = ms.executeUpdate();\n            if (afectados > 0) {\n                registroActualizado = true;\n            } else {\n                registroActualizado = false;\n            }\n            conn.commit();\n        } catch (Exception ex) {\n            System.out.println(""Error inesperat, no s\'ha desat el registre: "" + ex.getMessage());\n            ex.printStackTrace();\n            registroActualizado = false;\n            errores.put("""", ""Error inesperat, no s\'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());\n            try {\n                if (conn != null) conn.rollback();\n            } catch (SQLException sqle) {\n                throw new RemoteException(""S\'ha produït un error i no s\'han pogut tornar enrere els canvis efectuats"", sqle);\n            }\n            throw new RemoteException(""Error inesperat, no s\'ha modifcat el registre"", ex);\n        } finally {\n            ToolsBD.closeConn(conn, ms, null);\n        }\n    }\n', '    protected File EncodeReturn() throws EncodeFailedException, IOException {\n        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);\n        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");\n        ChannelWriter cw = new ChannelWriter(tmpf);\n        cw.putLongFile(DownloadData);\n        cw.close();\n        File encdata = c.RawEncode(tmpf, RawKey);\n        File pigdata = PigData.EncodeData(encdata);\n        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);\n        FileOutputStream fos = new FileOutputStream(pigroute, true);\n        FileChannel foc = fos.getChannel();\n        FileInputStream fis = new FileInputStream(pigdata);\n        FileChannel fic = fis.getChannel();\n        fic.transferTo(0, fic.size(), foc);\n        foc.close();\n        fic.close();\n        pigdata.delete();\n        ReturnRouteFile.delete();\n        encdata.delete();\n        return pigroute;\n    }\n']",430,"    public void  actualizer() throws SQLException, ClassNotPresentException, Transaction {
        Connection pen = null;
        PreparedStatement ems = null;
        registroActualizado = false;
        try {
            pen = ToolsBD.getConn();
            pen.setAutoCommit(false);
            Date fechaesystem = new Date();
            DateFormat aaaamds = new SimpleDateFormat(""yyyyMMdd"");
            int fzeajsi = Integer.parseInt(aaaamds.format(fechaesystem));
            DateFormat HHmmps = new SimpleDateFormat(""HHmmss"");
            DateFormat ssn = new SimpleDateFormat(""S"");
            String sql = ssn.format(fechaesystem);
            if (sql.length() > 2) {
                sql = sql.substring(0, 2);
            }
            int fizaforus = Integer.parseInt(HHmmps.format(fechaesystem) + sql);
            ems = pen.prepareStatement(SENTENCIA_UPDATE);
            ems.setString(1, descartadoEntrada);
            ems.setString(2, usuarioEntrada);
            ems.setString(3, motivosDescarteEntrada);
            ems.setInt(4, Integer.parseInt(anoOficio));
            ems.setInt(5, Integer.parseInt(oficinaOficio));
            ems.setInt(6, Integer.parseInt(numeroOficio));
            ems.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ems.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ems.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int affectado = ems.executeUpdate();
            if (affectado > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            pen.commit();
        } catch (Transaction ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (pen != null) pen.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(pen, ems, null);
        }
    }
",0,0,0,-1,"actualizar,ClassNotFoundException,Exception,conn,ms,fechaSystem,aaaammdd,fzafsis,hhmmss,sss,ss,fzahsis,afectados","actualizar:-4.930929704145952e-07,ClassNotFoundException:2.0143660632046787e-06,Exception:1.5063719315962358e-06,conn:0.00011937184767289595,ms:0.000509030439636924,fechaSystem:2.4112788113680754e-05,aaaammdd:1.6391277313232422e-06,fzafsis:1.2462789362127131e-06,hhmmss:5.930662155151367e-06,sss:5.789778449318626e-06,ss:3.481453115289862e-05,fzahsis:3.901394930752841e-07,afectados:6.946650418368253e-06,",13,44,"fechaSystem:fechaesystem,aaaammdd:aaaamds,fzafsis:fzeajsi,ms:ems,hhmmss:HHmmps,ss:sql,fzahsis:fizaforus,conn:pen,actualizar: actualizer,ClassNotFoundException:ClassNotPresentException,Exception:Transaction,sss:ssn,afectados:affectado,",Greedy,,
,,,,,,,,,,,,,,,
367,"['10674824', '5682569', '    @Before\n    public void setUp() throws Exception {\n        final URL url = getClass().getClassLoader().getResource(""insecureSSL.keystore"");\n        final KeyStore keystore = KeyStore.getInstance(""jks"");\n        final char[] pwd = ""nopassword"".toCharArray();\n        keystore.load(url.openStream(), pwd);\n        final TrustManagerFactory trustManagerFactory = createTrustManagerFactory();\n        trustManagerFactory.init(keystore);\n        final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n        final KeyManagerFactory keyManagerFactory = createKeyManagerFactory();\n        keyManagerFactory.init(keystore, pwd);\n        final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n        final SSLContext serverSSLContext = SSLContext.getInstance(""TLS"");\n        serverSSLContext.init(keyManagers, trustManagers, null);\n        localServer_ = new LocalTestServer(serverSSLContext);\n        localServer_.registerDefaultHandlers();\n        localServer_.start();\n    }\n', '    public void metodo1() {\n        int temp;\n        boolean flagDesordenado = true;\n        while (flagDesordenado) {\n            flagDesordenado = false;\n            for (int i = 0; i < this.tamanoTabla - 1; i++) {\n                if (tabla[i] > tabla[i + 1]) {\n                    flagDesordenado = true;\n                    temp = tabla[i];\n                    tabla[i] = tabla[i + 1];\n                    tabla[i + 1] = temp;\n                }\n            }\n        }\n    }\n']",163,"    @Before
    public void settingup() throws Exception {
        final URL xml = getClass().getClassLoader().getResource(""insecureSSL.keystore"");
        final KeyStore chaintool = KeyStore.getInstance(""jks"");
        final char[] pppassword = ""nopassword"".toCharArray();
        chaintool.load(xml.openStream(), pppassword);
        final TrustManagerFactory trustManFrame = createTrustManagerFactory();
        trustManFrame.init(chaintool);
        final TrustManager[] rustManagers = trustManFrame.getTrustManagers();
        final KeyManagerFactory  keyManageractory = createKeyManagerFactory();
         keyManageractory.init(chaintool, pppassword);
        final KeyManager[] keyMackers =  keyManageractory.getKeyManagers();
        final SSLContext serverSAContext = SSLContext.getInstance(""TLS"");
        serverSAContext.init(keyMackers, rustManagers, null);
        localQueue_ = new LocalTestServer(serverSAContext);
        localQueue_.registerDefaultHandlers();
        localQueue_.start();
    }
",0,0,0,-1,"setUp,url,keystore,pwd,trustManagerFactory,trustManagers,keyManagerFactory,keyManagers,serverSSLContext,localServer_","setUp:-7.335956280048077e-08,url:-5.887104914738582e-06,keystore:1.9440284142127407e-06,pwd:-8.252950815054087e-07,trustManagerFactory:4.81422130878155e-07,trustManagers:7.794453547551083e-07,keyManagerFactory:7.702754094050481e-07,keyManagers:3.5762786865234375e-07,serverSSLContext:1.3892467205341047e-06,localServer_:6.877459012545073e-08,",10,26,"url:xml,keystore:chaintool,serverSSLContext:serverSAContext,trustManagerFactory:trustManFrame,trustManagers:rustManagers,pwd:pppassword,keyManagerFactory: keyManageractory,keyManagers:keyMackers,localServer_:localQueue_,setUp:settingup,",Greedy,,
,,,,,,,,,,,,,,,
368,"['16466743', '14590676', '    public String getmd5(String password) {\n        String pwHash = """";\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(""MD5"");\n            md.reset();\n            md.update(password.getBytes());\n            byte[] b = md.digest();\n            for (int i = 0; i < b.length; i++) {\n                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.fatal(""MD5 Hash Algorithm not found"", ex);\n        }\n        Logger.info(""PWHash erzeugt und wird übergeben"");\n        return pwHash;\n    }\n', '    public static void download(String address, String localFileName) {\n        OutputStream out = null;\n        URLConnection conn = null;\n        InputStream in = null;\n        try {\n            URL url = new URL(address);\n            out = new BufferedOutputStream(new FileOutputStream(localFileName));\n            conn = url.openConnection();\n            in = conn.getInputStream();\n            byte[] buffer = new byte[1024];\n            int numRead;\n            long numWritten = 0;\n            while ((numRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, numRead);\n                numWritten += numRead;\n            }\n            System.out.println(localFileName + ""\\t"" + numWritten);\n        } catch (Exception exception) {\n            exception.printStackTrace();\n        } finally {\n            try {\n                if (in != null) in.close();\n                if (out != null) out.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n']",129,,0,0,,-3,"getmd5,password,pwHash,md,b,i",,,,,Greedy,,
